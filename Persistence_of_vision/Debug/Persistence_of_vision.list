
Persistence_of_vision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005590  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005760  08005760  00006760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c0  080057c0  0000719c  2**0
                  CONTENTS
  4 .ARM          00000008  080057c0  080057c0  000067c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c8  080057c8  0000719c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c8  080057c8  000067c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057cc  080057cc  000067cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000019c  20000000  080057d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000019c  0800596c  0000719c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800596c  0000744c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000719c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182ed  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022db  00000000  00000000  0001f4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00021798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fed  00000000  00000000  00022c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c70  00000000  00000000  00023c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a19  00000000  00000000  000468ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3653  00000000  00000000  000582c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b919  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f90  00000000  00000000  0012b95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001318ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005748 	.word	0x08005748

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	08005748 	.word	0x08005748

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <OutputEnable>:
 */


	uint16_t A[9] = {0x1FFF, 0x2080, 0x4080, 0x8080, 0x8080, 0x8080, 0x4080, 0x2080, 0x1FFF};  // Binary: 00011100, 00100010, ...

void OutputEnable(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Set PB2 low to enable output
 80005a4:	2200      	movs	r2, #0
 80005a6:	2104      	movs	r1, #4
 80005a8:	4802      	ldr	r0, [pc, #8]	@ (80005b4 <OutputEnable+0x14>)
 80005aa:	f002 fae9 	bl	8002b80 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400

080005b8 <OutputDisable>:

void OutputDisable(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Set PB2 high to disable output
 80005bc:	2201      	movs	r2, #1
 80005be:	2104      	movs	r1, #4
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <OutputDisable+0x14>)
 80005c2:	f002 fadd 	bl	8002b80 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40020400 	.word	0x40020400

080005d0 <LatchEnable>:

void LatchEnable(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // Set PB1 high
 80005d4:	2201      	movs	r2, #1
 80005d6:	2102      	movs	r1, #2
 80005d8:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <LatchEnable+0x24>)
 80005da:	f002 fad1 	bl	8002b80 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // Short delay to ensure the latch pulse is detected
 80005de:	2001      	movs	r0, #1
 80005e0:	f001 ff10 	bl	8002404 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Set PB1 low again
 80005e4:	2200      	movs	r2, #0
 80005e6:	2102      	movs	r1, #2
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <LatchEnable+0x24>)
 80005ea:	f002 fac9 	bl	8002b80 <HAL_GPIO_WritePin>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40020400 	.word	0x40020400

080005f8 <SendLEDData>:

void SendLEDData(uint8_t *data) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8000600:	2305      	movs	r3, #5
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	e00a      	b.n	800061c <SendLEDData+0x24>
        HAL_SPI_Transmit(&hspi2, &data[i], 1, 100);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	18d1      	adds	r1, r2, r3
 800060c:	2364      	movs	r3, #100	@ 0x64
 800060e:	2201      	movs	r2, #1
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <SendLEDData+0x38>)
 8000612:	f003 f980 	bl	8003916 <HAL_SPI_Transmit>
    for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3b01      	subs	r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b00      	cmp	r3, #0
 8000620:	daf1      	bge.n	8000606 <SendLEDData+0xe>
    }
    LatchEnable();
 8000622:	f7ff ffd5 	bl	80005d0 <LatchEnable>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200001b8 	.word	0x200001b8

08000634 <CombineLEDData>:

void CombineLEDData(uint8_t *result, uint8_t ledIdx) {
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]

	        for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e016      	b.n	8000674 <CombineLEDData+0x40>
	            result[j] |= LED_ARRAY[ledIdx][j];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <CombineLEDData+0x54>)
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	18c2      	adds	r2, r0, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	4403      	add	r3, r0
 8000668:	430a      	orrs	r2, r1
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	701a      	strb	r2, [r3, #0]
	        for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	3301      	adds	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	2b05      	cmp	r3, #5
 8000678:	dde5      	ble.n	8000646 <CombineLEDData+0x12>
	        }

}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	20000000 	.word	0x20000000

0800068c <CombineAndSendNEW>:

void CombineAndSendNEW(uint16_t ledMask){
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]

	//if the value of a variable is 1, concatenate that LED into the sum
	char a = (ledMask & 0b1000000000000000) >> 15;
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	0bdb      	lsrs	r3, r3, #15
 800069a:	b29b      	uxth	r3, r3
 800069c:	77fb      	strb	r3, [r7, #31]
	char b = (ledMask & 0b0100000000000000) >> 14;
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	139b      	asrs	r3, r3, #14
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	77bb      	strb	r3, [r7, #30]
	char c = (ledMask & 0b0010000000000000) >> 13;
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	135b      	asrs	r3, r3, #13
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	777b      	strb	r3, [r7, #29]
	char d = (ledMask & 0b0001000000000000) >> 12;
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	131b      	asrs	r3, r3, #12
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	773b      	strb	r3, [r7, #28]
	char e = (ledMask & 0b0000100000000000) >> 11;
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	12db      	asrs	r3, r3, #11
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	76fb      	strb	r3, [r7, #27]
	char f = (ledMask & 0b0000010000000000) >> 10;
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	129b      	asrs	r3, r3, #10
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	76bb      	strb	r3, [r7, #26]
	char g = (ledMask & 0b0000001000000000) >> 9;
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	125b      	asrs	r3, r3, #9
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	767b      	strb	r3, [r7, #25]
	char h = (ledMask & 0b0000000100000000) >> 8;
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	121b      	asrs	r3, r3, #8
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	763b      	strb	r3, [r7, #24]
	char i = (ledMask & 0b0000000010000000) >> 7;
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	11db      	asrs	r3, r3, #7
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	75fb      	strb	r3, [r7, #23]
	char j = (ledMask & 0b0000000001000000) >> 6;
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	119b      	asrs	r3, r3, #6
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	75bb      	strb	r3, [r7, #22]
	char k = (ledMask & 0b0000000000100000) >> 5;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	115b      	asrs	r3, r3, #5
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	757b      	strb	r3, [r7, #21]
	char l = (ledMask & 0b0000000000010000) >> 4;
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	111b      	asrs	r3, r3, #4
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	753b      	strb	r3, [r7, #20]
	char m = (ledMask & 0b0000000000001000) >> 3;
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	10db      	asrs	r3, r3, #3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	74fb      	strb	r3, [r7, #19]
	char n = (ledMask & 0b0000000000000100) >> 2;
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	109b      	asrs	r3, r3, #2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	74bb      	strb	r3, [r7, #18]
	char o = (ledMask & 0b0000000000000010) >> 1;
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	105b      	asrs	r3, r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	747b      	strb	r3, [r7, #17]
	char p = (ledMask & 0b0000000000000001);
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	743b      	strb	r3, [r7, #16]

	uint8_t LED[6] = {0};
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	2300      	movs	r3, #0
 8000756:	81bb      	strh	r3, [r7, #12]

	if(a) {
 8000758:	7ffb      	ldrb	r3, [r7, #31]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d005      	beq.n	800076a <CombineAndSendNEW+0xde>
	    CombineLEDData(&LED, 0);
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff65 	bl	8000634 <CombineLEDData>
	}
	if(b) {
 800076a:	7fbb      	ldrb	r3, [r7, #30]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <CombineAndSendNEW+0xf0>
	    CombineLEDData(&LED, 3);
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2103      	movs	r1, #3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff5c 	bl	8000634 <CombineLEDData>
	}
	if(c) {
 800077c:	7f7b      	ldrb	r3, [r7, #29]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d005      	beq.n	800078e <CombineAndSendNEW+0x102>
	    CombineLEDData(&LED, 6);
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2106      	movs	r1, #6
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff53 	bl	8000634 <CombineLEDData>
	}
	if(d) {
 800078e:	7f3b      	ldrb	r3, [r7, #28]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d005      	beq.n	80007a0 <CombineAndSendNEW+0x114>
	    CombineLEDData(&LED, 9);
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2109      	movs	r1, #9
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff4a 	bl	8000634 <CombineLEDData>
	}
	if(e) {
 80007a0:	7efb      	ldrb	r3, [r7, #27]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d005      	beq.n	80007b2 <CombineAndSendNEW+0x126>
	    CombineLEDData(&LED, 12);
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	210c      	movs	r1, #12
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff41 	bl	8000634 <CombineLEDData>
	}
	if(f) {
 80007b2:	7ebb      	ldrb	r3, [r7, #26]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <CombineAndSendNEW+0x138>
	    CombineLEDData(&LED, 15);
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	210f      	movs	r1, #15
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff38 	bl	8000634 <CombineLEDData>
	}
	if(g) {
 80007c4:	7e7b      	ldrb	r3, [r7, #25]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d005      	beq.n	80007d6 <CombineAndSendNEW+0x14a>
	    CombineLEDData(&LED, 18);
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2112      	movs	r1, #18
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff2f 	bl	8000634 <CombineLEDData>
	}
	if(h) {
 80007d6:	7e3b      	ldrb	r3, [r7, #24]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d005      	beq.n	80007e8 <CombineAndSendNEW+0x15c>
	    CombineLEDData(&LED, 21);
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	2115      	movs	r1, #21
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff26 	bl	8000634 <CombineLEDData>
	}
	if(i) {
 80007e8:	7dfb      	ldrb	r3, [r7, #23]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <CombineAndSendNEW+0x16e>
	    CombineLEDData(&LED, 24);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2118      	movs	r1, #24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff1d 	bl	8000634 <CombineLEDData>
	}
	if(j) {
 80007fa:	7dbb      	ldrb	r3, [r7, #22]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d005      	beq.n	800080c <CombineAndSendNEW+0x180>
	    CombineLEDData(&LED, 27);
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	211b      	movs	r1, #27
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff14 	bl	8000634 <CombineLEDData>
	}
	if(k) {
 800080c:	7d7b      	ldrb	r3, [r7, #21]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d005      	beq.n	800081e <CombineAndSendNEW+0x192>
	    CombineLEDData(&LED, 30);
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	211e      	movs	r1, #30
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff0b 	bl	8000634 <CombineLEDData>
	}
	if(l) {
 800081e:	7d3b      	ldrb	r3, [r7, #20]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d005      	beq.n	8000830 <CombineAndSendNEW+0x1a4>
	    CombineLEDData(&LED, 33);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2121      	movs	r1, #33	@ 0x21
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff02 	bl	8000634 <CombineLEDData>
	}
	if(m) {
 8000830:	7cfb      	ldrb	r3, [r7, #19]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d005      	beq.n	8000842 <CombineAndSendNEW+0x1b6>
	    CombineLEDData(&LED, 36);
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2124      	movs	r1, #36	@ 0x24
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fef9 	bl	8000634 <CombineLEDData>
	}
	if(n) {
 8000842:	7cbb      	ldrb	r3, [r7, #18]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d005      	beq.n	8000854 <CombineAndSendNEW+0x1c8>
	    CombineLEDData(&LED, 39);
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	2127      	movs	r1, #39	@ 0x27
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fef0 	bl	8000634 <CombineLEDData>
	}
	if(o) {
 8000854:	7c7b      	ldrb	r3, [r7, #17]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d005      	beq.n	8000866 <CombineAndSendNEW+0x1da>
	    CombineLEDData(&LED, 42);
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	212a      	movs	r1, #42	@ 0x2a
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fee7 	bl	8000634 <CombineLEDData>
	}
	if(p) {
 8000866:	7c3b      	ldrb	r3, [r7, #16]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d005      	beq.n	8000878 <CombineAndSendNEW+0x1ec>
	    CombineLEDData(&LED, 45);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	212d      	movs	r1, #45	@ 0x2d
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fede 	bl	8000634 <CombineLEDData>
	}

	SendLEDData(&LED);
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff febb 	bl	80005f8 <SendLEDData>

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <wrap_platform_read>:


int32_t wrap_platform_read(uint8_t Address, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	603a      	str	r2, [r7, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	460b      	mov	r3, r1
 800089c:	71bb      	strb	r3, [r7, #6]
 800089e:	4613      	mov	r3, r2
 80008a0:	80bb      	strh	r3, [r7, #4]
  Reg |= 0x80;
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2110      	movs	r1, #16
 80008b0:	480b      	ldr	r0, [pc, #44]	@ (80008e0 <wrap_platform_read+0x54>)
 80008b2:	f002 f965 	bl	8002b80 <HAL_GPIO_WritePin>
  BSP_SPI1_Send(&Reg, 1);
 80008b6:	1dbb      	adds	r3, r7, #6
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fbcc 	bl	8001058 <BSP_SPI1_Send>
  BSP_SPI1_SendRecv(&Reg, Bufp, len);
 80008c0:	88ba      	ldrh	r2, [r7, #4]
 80008c2:	1dbb      	adds	r3, r7, #6
 80008c4:	6839      	ldr	r1, [r7, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fbe2 	bl	8001090 <BSP_SPI1_SendRecv>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2110      	movs	r1, #16
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <wrap_platform_read+0x54>)
 80008d2:	f002 f955 	bl	8002b80 <HAL_GPIO_WritePin>
  return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40020000 	.word	0x40020000

080008e4 <wrap_platform_write>:

int32_t wrap_platform_write(uint8_t Address, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	603a      	str	r2, [r7, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
 80008f2:	460b      	mov	r3, r1
 80008f4:	71bb      	strb	r3, [r7, #6]
 80008f6:	4613      	mov	r3, r2
 80008f8:	80bb      	strh	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2110      	movs	r1, #16
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <wrap_platform_write+0x48>)
 8000900:	f002 f93e 	bl	8002b80 <HAL_GPIO_WritePin>
  BSP_SPI1_Send(&Reg, 1);
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	2101      	movs	r1, #1
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fba5 	bl	8001058 <BSP_SPI1_Send>
  BSP_SPI1_Send(Bufp, len);
 800090e:	88bb      	ldrh	r3, [r7, #4]
 8000910:	4619      	mov	r1, r3
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f000 fba0 	bl	8001058 <BSP_SPI1_Send>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2110      	movs	r1, #16
 800091c:	4803      	ldr	r0, [pc, #12]	@ (800092c <wrap_platform_write+0x48>)
 800091e:	f002 f92f 	bl	8002b80 <HAL_GPIO_WritePin>
  return 0;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40020000 	.word	0x40020000

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f001 fcf3 	bl	8002320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f83f 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f90d 	bl	8000b5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000942:	f000 f8e1 	bl	8000b08 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000946:	f000 f8a7 	bl	8000a98 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  dataRdyIntReceived = 0;
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <main+0x78>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 8000950:	f000 f99e 	bl	8000c90 <MEMS_Init>
  OutputDisable();
 8000954:	f7ff fe30 	bl	80005b8 <OutputDisable>
  SendLEDData(LED_CLEAR);
 8000958:	4814      	ldr	r0, [pc, #80]	@ (80009ac <main+0x7c>)
 800095a:	f7ff fe4d 	bl	80005f8 <SendLEDData>
  OutputEnable();
 800095e:	f7ff fe1f 	bl	80005a0 <OutputEnable>
	  }
*/



	       dataRdyIntReceived = 0;
 8000962:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <main+0x78>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
	       LSM6DSL_Axes_t acc_axes;
	       LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4810      	ldr	r0, [pc, #64]	@ (80009b0 <main+0x80>)
 800096e:	f000 fee9 	bl	8001744 <LSM6DSL_ACC_GetAxes>
	       printf("% 5d, % 5d, % 5d\r\n",  (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	480e      	ldr	r0, [pc, #56]	@ (80009b4 <main+0x84>)
 800097a:	f004 f877 	bl	8004a6c <iprintf>


	  for(int i=0; i<9; i++){
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e00c      	b.n	800099e <main+0x6e>
		  CombineAndSendNEW(A[i]);
 8000984:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <main+0x88>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe7d 	bl	800068c <CombineAndSendNEW>
		  HAL_Delay(10);
 8000992:	200a      	movs	r0, #10
 8000994:	f001 fd36 	bl	8002404 <HAL_Delay>
	  for(int i=0; i<9; i++){
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3301      	adds	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b08      	cmp	r3, #8
 80009a2:	ddef      	ble.n	8000984 <main+0x54>
  {
 80009a4:	e7dd      	b.n	8000962 <main+0x32>
 80009a6:	bf00      	nop
 80009a8:	20000290 	.word	0x20000290
 80009ac:	20000294 	.word	0x20000294
 80009b0:	20000258 	.word	0x20000258
 80009b4:	08005760 	.word	0x08005760
 80009b8:	20000120 	.word	0x20000120

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	@ 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2234      	movs	r2, #52	@ 0x34
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f004 f8a3 	bl	8004b16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a90 <SystemClock_Config+0xd4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	4a29      	ldr	r2, [pc, #164]	@ (8000a90 <SystemClock_Config+0xd4>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f0:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <SystemClock_Config+0xd4>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fc:	2300      	movs	r3, #0
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <SystemClock_Config+0xd8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a08:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <SystemClock_Config+0xd8>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <SystemClock_Config+0xd8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2310      	movs	r3, #16
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a30:	2310      	movs	r3, #16
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a34:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a38:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fc14 	bl	8003278 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a56:	f000 f991 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f8b4 	bl	8002be4 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a82:	f000 f97b 	bl	8000d7c <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	@ 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000a9e:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <MX_SPI2_Init+0x6c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000ab2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ab6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000ae6:	220a      	movs	r2, #10
 8000ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_SPI2_Init+0x68>)
 8000aec:	f002 fe62 	bl	80037b4 <HAL_SPI_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000af6:	f000 f941 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001b8 	.word	0x200001b8
 8000b04:	40003800 	.word	0x40003800

08000b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_USART2_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_USART2_UART_Init+0x4c>)
 8000b40:	f003 fac6 	bl	80040d0 <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f000 f917 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000210 	.word	0x20000210
 8000b58:	40004400 	.word	0x40004400

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b42      	ldr	r3, [pc, #264]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a41      	ldr	r2, [pc, #260]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b3f      	ldr	r3, [pc, #252]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b3b      	ldr	r3, [pc, #236]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a3a      	ldr	r2, [pc, #232]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b38      	ldr	r3, [pc, #224]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b34      	ldr	r3, [pc, #208]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a33      	ldr	r2, [pc, #204]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b31      	ldr	r3, [pc, #196]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a2c      	ldr	r2, [pc, #176]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c80 <MX_GPIO_Init+0x124>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2110      	movs	r1, #16
 8000be6:	4827      	ldr	r0, [pc, #156]	@ (8000c84 <MX_GPIO_Init+0x128>)
 8000be8:	f001 ffca 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_LE_Pin|LED_OE_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2106      	movs	r1, #6
 8000bf0:	4825      	ldr	r0, [pc, #148]	@ (8000c88 <MX_GPIO_Init+0x12c>)
 8000bf2:	f001 ffc5 	bl	8002b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481f      	ldr	r0, [pc, #124]	@ (8000c8c <MX_GPIO_Init+0x130>)
 8000c0e:	f001 fd2f 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c12:	2310      	movs	r3, #16
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4816      	ldr	r0, [pc, #88]	@ (8000c84 <MX_GPIO_Init+0x128>)
 8000c2a:	f001 fd21 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_Pin LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_LE_Pin|LED_OE_Pin;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4810      	ldr	r0, [pc, #64]	@ (8000c88 <MX_GPIO_Init+0x12c>)
 8000c46:	f001 fd13 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_INT1_EXTI11_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 8000c4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6DSL_INT1_EXTI11_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <MX_GPIO_Init+0x130>)
 8000c62:	f001 fd05 	bl	8002670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2028      	movs	r0, #40	@ 0x28
 8000c6c:	f001 fcc9 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c70:	2028      	movs	r0, #40	@ 0x28
 8000c72:	f001 fce2 	bl	800263a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800

08000c90 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id ;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
	io_ctx.BusType = LSM6DSL_SPI_4WIRES_BUS;
 8000c96:	2301      	movs	r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
	io_ctx.Address = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	753b      	strb	r3, [r7, #20]
	io_ctx.Init = BSP_SPI1_Init;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MEMS_Init+0x7c>)
 8000ca0:	60bb      	str	r3, [r7, #8]
	io_ctx.DeInit = BSP_SPI1_DeInit;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MEMS_Init+0x80>)
 8000ca4:	60fb      	str	r3, [r7, #12]
	io_ctx.ReadReg = wrap_platform_read;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <MEMS_Init+0x84>)
 8000ca8:	61fb      	str	r3, [r7, #28]
	io_ctx.WriteReg = wrap_platform_write;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <MEMS_Init+0x88>)
 8000cac:	61bb      	str	r3, [r7, #24]
	io_ctx.GetTick = BSP_GetTick;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MEMS_Init+0x8c>)
 8000cb0:	623b      	str	r3, [r7, #32]
	LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <MEMS_Init+0x90>)
 8000cba:	f000 fb87 	bl	80013cc <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4817      	ldr	r0, [pc, #92]	@ (8000d20 <MEMS_Init+0x90>)
 8000cc4:	f000 fc55 	bl	8001572 <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b6a      	cmp	r3, #106	@ 0x6a
 8000ccc:	d001      	beq.n	8000cd2 <MEMS_Init+0x42>
    Error_Handler();
 8000cce:	f000 f855 	bl	8000d7c <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 8000cd2:	4813      	ldr	r0, [pc, #76]	@ (8000d20 <MEMS_Init+0x90>)
 8000cd4:	f000 fbe4 	bl	80014a0 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 8000cd8:	eeb3 0a0a 	vmov.f32	s0, #58	@ 0x41d00000  26.0
 8000cdc:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <MEMS_Init+0x90>)
 8000cde:	f000 fcc9 	bl	8001674 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <MEMS_Init+0x90>)
 8000ce6:	f000 fce1 	bl	80016ac <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8000cea:	2101      	movs	r1, #1
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <MEMS_Init+0x90>)
 8000cee:	f000 fd9b 	bl	8001828 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480a      	ldr	r0, [pc, #40]	@ (8000d20 <MEMS_Init+0x90>)
 8000cf8:	f000 fd00 	bl	80016fc <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <MEMS_Init+0x90>)
 8000cfe:	f000 fc4e 	bl	800159e <LSM6DSL_ACC_Enable>
}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	@ 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	08000fa9 	.word	0x08000fa9
 8000d10:	08001009 	.word	0x08001009
 8000d14:	0800088d 	.word	0x0800088d
 8000d18:	080008e5 	.word	0x080008e5
 8000d1c:	080010d1 	.word	0x080010d1
 8000d20:	20000258 	.word	0x20000258

08000d24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d34:	d104      	bne.n	8000d40 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_GPIO_EXTI_Callback+0x28>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4a03      	ldr	r2, [pc, #12]	@ (8000d4c <HAL_GPIO_EXTI_Callback+0x28>)
 8000d3e:	6013      	str	r3, [r2, #0]
  }
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000290 	.word	0x20000290

08000d50 <_write>:

int _write(int fd, char * ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	4804      	ldr	r0, [pc, #16]	@ (8000d78 <_write+0x28>)
 8000d68:	f003 fa02 	bl	8004170 <HAL_UART_Transmit>
  return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000210 	.word	0x20000210

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1) {
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <Error_Handler+0x4>

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dc2:	2007      	movs	r0, #7
 8000dc4:	f001 fc12 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <HAL_SPI_MspInit+0x84>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12c      	bne.n	8000e50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <HAL_SPI_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_SPI_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e2e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e40:	2305      	movs	r3, #5
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <HAL_SPI_MspInit+0x8c>)
 8000e4c:	f001 fc10 	bl	8002670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	@ 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40003800 	.word	0x40003800
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020400 	.word	0x40020400

08000e64 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a08      	ldr	r2, [pc, #32]	@ (8000e94 <HAL_SPI_MspDeInit+0x30>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10a      	bne.n	8000e8c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000e76:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <HAL_SPI_MspDeInit+0x34>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <HAL_SPI_MspDeInit+0x34>)
 8000e7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e80:	6413      	str	r3, [r2, #64]	@ 0x40

    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8000e82:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_SPI_MspDeInit+0x38>)
 8000e88:	f001 fd86 	bl	8002998 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40003800 	.word	0x40003800
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a19      	ldr	r2, [pc, #100]	@ (8000f24 <HAL_UART_MspInit+0x84>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12b      	bne.n	8000f1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <HAL_UART_MspInit+0x88>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	4a17      	ldr	r2, [pc, #92]	@ (8000f28 <HAL_UART_MspInit+0x88>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <HAL_UART_MspInit+0x88>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <HAL_UART_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	@ (8000f28 <HAL_UART_MspInit+0x88>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <HAL_UART_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000efa:	230c      	movs	r3, #12
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <HAL_UART_MspInit+0x8c>)
 8000f16:	f001 fbab 	bl	8002670 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	@ 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004400 	.word	0x40004400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <NMI_Handler+0x4>

08000f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <MemManage_Handler+0x4>

08000f48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f86:	f001 fa1d 	bl	80023c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000f92:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000f96:	f001 fe0d 	bl	8002bb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f9a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f9e:	f001 fe09 	bl	8002bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <BSP_SPI1_Init+0x54>)
 8000fb4:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <BSP_SPI1_Init+0x58>)
 8000fb6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <BSP_SPI1_Init+0x5c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	4911      	ldr	r1, [pc, #68]	@ (8001004 <BSP_SPI1_Init+0x5c>)
 8000fc0:	600a      	str	r2, [r1, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d114      	bne.n	8000ff0 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <BSP_SPI1_Init+0x54>)
 8000fc8:	f002 ff98 	bl	8003efc <HAL_SPI_GetState>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10e      	bne.n	8000ff0 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <BSP_SPI1_Init+0x54>)
 8000fd4:	f000 f8c0 	bl	8001158 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d108      	bne.n	8000ff0 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <BSP_SPI1_Init+0x54>)
 8000fe0:	f000 f87e 	bl	80010e0 <MX_SPI1_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000fea:	f06f 0307 	mvn.w	r3, #7
 8000fee:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000029c 	.word	0x2000029c
 8001000:	40013000 	.word	0x40013000
 8001004:	200002f4 	.word	0x200002f4

08001008 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800100e:	f06f 0307 	mvn.w	r3, #7
 8001012:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <BSP_SPI1_DeInit+0x48>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d013      	beq.n	8001044 <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <BSP_SPI1_DeInit+0x48>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3b01      	subs	r3, #1
 8001022:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <BSP_SPI1_DeInit+0x48>)
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <BSP_SPI1_DeInit+0x48>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10a      	bne.n	8001044 <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <BSP_SPI1_DeInit+0x4c>)
 8001030:	f000 f8ea 	bl	8001208 <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8001034:	4807      	ldr	r0, [pc, #28]	@ (8001054 <BSP_SPI1_DeInit+0x4c>)
 8001036:	f002 fc46 	bl	80038c6 <HAL_SPI_DeInit>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200002f4 	.word	0x200002f4
 8001054:	2000029c 	.word	0x2000029c

08001058 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001068:	887a      	ldrh	r2, [r7, #2]
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4806      	ldr	r0, [pc, #24]	@ (800108c <BSP_SPI1_Send+0x34>)
 8001072:	f002 fc50 	bl	8003916 <HAL_SPI_Transmit>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800107c:	f06f 0305 	mvn.w	r3, #5
 8001080:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000029c 	.word	0x2000029c

08001090 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af02      	add	r7, sp, #8
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010a8:	9200      	str	r2, [sp, #0]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	68f9      	ldr	r1, [r7, #12]
 80010ae:	4807      	ldr	r0, [pc, #28]	@ (80010cc <BSP_SPI1_SendRecv+0x3c>)
 80010b0:	f002 fd74 	bl	8003b9c <HAL_SPI_TransmitReceive>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80010ba:	f06f 0305 	mvn.w	r3, #5
 80010be:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80010c0:	697b      	ldr	r3, [r7, #20]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000029c 	.word	0x2000029c

080010d0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010d4:	f001 f98a 	bl	80023ec <HAL_GetTick>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a19      	ldr	r2, [pc, #100]	@ (8001154 <MX_SPI1_Init+0x74>)
 80010f0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010f8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001118:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2218      	movs	r2, #24
 800111e:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	220a      	movs	r2, #10
 8001136:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f002 fb3b 	bl	80037b4 <HAL_SPI_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40013000 	.word	0x40013000

08001158 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <SPI1_MspInit+0xa8>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001168:	4a25      	ldr	r2, [pc, #148]	@ (8001200 <SPI1_MspInit+0xa8>)
 800116a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800116e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001170:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <SPI1_MspInit+0xa8>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001174:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <SPI1_MspInit+0xa8>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	4a1e      	ldr	r2, [pc, #120]	@ (8001200 <SPI1_MspInit+0xa8>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6313      	str	r3, [r2, #48]	@ 0x30
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <SPI1_MspInit+0xa8>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001198:	2320      	movs	r3, #32
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80011a8:	2305      	movs	r3, #5
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4814      	ldr	r0, [pc, #80]	@ (8001204 <SPI1_MspInit+0xac>)
 80011b4:	f001 fa5c 	bl	8002670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80011b8:	2340      	movs	r3, #64	@ 0x40
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80011c8:	2305      	movs	r3, #5
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	480c      	ldr	r0, [pc, #48]	@ (8001204 <SPI1_MspInit+0xac>)
 80011d4:	f001 fa4c 	bl	8002670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80011e8:	2305      	movs	r3, #5
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4804      	ldr	r0, [pc, #16]	@ (8001204 <SPI1_MspInit+0xac>)
 80011f4:	f001 fa3c 	bl	8002670 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000

08001208 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <SPI1_MspDeInit+0x34>)
 8001212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001214:	4a09      	ldr	r2, [pc, #36]	@ (800123c <SPI1_MspDeInit+0x34>)
 8001216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800121a:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 800121c:	2120      	movs	r1, #32
 800121e:	4808      	ldr	r0, [pc, #32]	@ (8001240 <SPI1_MspDeInit+0x38>)
 8001220:	f001 fbba 	bl	8002998 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8001224:	2140      	movs	r1, #64	@ 0x40
 8001226:	4806      	ldr	r0, [pc, #24]	@ (8001240 <SPI1_MspDeInit+0x38>)
 8001228:	f001 fbb6 	bl	8002998 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 800122c:	2180      	movs	r1, #128	@ 0x80
 800122e:	4804      	ldr	r0, [pc, #16]	@ (8001240 <SPI1_MspDeInit+0x38>)
 8001230:	f001 fbb2 	bl	8002998 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e00a      	b.n	800126c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001256:	f3af 8000 	nop.w
 800125a:	4601      	mov	r1, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	60ba      	str	r2, [r7, #8]
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf0      	blt.n	8001256 <_read+0x12>
  }

  return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_close>:
  }
  return len;
}

int _close(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a6:	605a      	str	r2, [r3, #4]
  return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_isatty>:

int _isatty(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	@ (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f003 fc4c 	bl	8004bb4 <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	@ (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20020000 	.word	0x20020000
 8001348:	00000400 	.word	0x00000400
 800134c:	200002f8 	.word	0x200002f8
 8001350:	20000450 	.word	0x20000450

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800137c:	f7ff ffea 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	@ (80013b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f003 fc0b 	bl	8004bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff fac1 	bl	8000930 <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 80013bc:	080057d0 	.word	0x080057d0
  ldr r2, =_sbss
 80013c0:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80013c4:	2000044c 	.word	0x2000044c

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>
	...

080013cc <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d103      	bne.n	80013e8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e051      	b.n	800148c <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	7b1a      	ldrb	r2, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a1d      	ldr	r2, [pc, #116]	@ (8001498 <LSM6DSL_RegisterBusIO+0xcc>)
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1c      	ldr	r2, [pc, #112]	@ (800149c <LSM6DSL_RegisterBusIO+0xd0>)
 800142a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	69da      	ldr	r2, [r3, #28]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e020      	b.n	800148c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4798      	blx	r3
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e016      	b.n	800148c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d112      	bne.n	800148c <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10d      	bne.n	800148c <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001470:	230c      	movs	r3, #12
 8001472:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	461a      	mov	r2, r3
 8001478:	2112      	movs	r1, #18
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f9b9 	bl	80017f2 <LSM6DSL_Write_Reg>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800148c:	68fb      	ldr	r3, [r7, #12]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	08001aad 	.word	0x08001aad
 800149c:	08001ae3 	.word	0x08001ae3

080014a0 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3320      	adds	r3, #32
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fcb1 	bl	8001e16 <lsm6dsl_auto_increment_set>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e054      	b.n	800156a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3320      	adds	r3, #32
 80014c4:	2101      	movs	r1, #1
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fc26 	bl	8001d18 <lsm6dsl_block_data_update_set>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e048      	b.n	800156a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3320      	adds	r3, #32
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fef8 	bl	80022d4 <lsm6dsl_fifo_mode_set>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e03c      	b.n	800156a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2204      	movs	r2, #4
 80014f4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3320      	adds	r3, #32
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fb98 	bl	8001c34 <lsm6dsl_xl_data_rate_set>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e02c      	b.n	800156a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3320      	adds	r3, #32
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fb2e 	bl	8001b78 <lsm6dsl_xl_full_scale_set>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e020      	b.n	800156a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2204      	movs	r2, #4
 800152c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3320      	adds	r3, #32
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fbc8 	bl	8001ccc <lsm6dsl_gy_data_rate_set>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e010      	b.n	800156a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3320      	adds	r3, #32
 800154c:	2106      	movs	r1, #6
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fb96 	bl	8001c80 <lsm6dsl_gy_full_scale_set>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e004      	b.n	800156a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3320      	adds	r3, #32
 8001580:	6839      	ldr	r1, [r7, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fc36 	bl	8001df4 <lsm6dsl_device_id_get>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e000      	b.n	8001596 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e014      	b.n	80015de <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f103 0220 	add.w	r2, r3, #32
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80015c0:	4619      	mov	r1, r3
 80015c2:	4610      	mov	r0, r2
 80015c4:	f000 fb36 	bl	8001c34 <lsm6dsl_xl_data_rate_set>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e004      	b.n	80015de <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3320      	adds	r3, #32
 80015fa:	f107 020b 	add.w	r2, r7, #11
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fadf 	bl	8001bc4 <lsm6dsl_xl_full_scale_get>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	e023      	b.n	800165a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001612:	7afb      	ldrb	r3, [r7, #11]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d81b      	bhi.n	8001650 <LSM6DSL_ACC_GetSensitivity+0x68>
 8001618:	a201      	add	r2, pc, #4	@ (adr r2, 8001620 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	08001649 	.word	0x08001649
 8001628:	08001639 	.word	0x08001639
 800162c:	08001641 	.word	0x08001641
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4a0c      	ldr	r2, [pc, #48]	@ (8001664 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8001634:	601a      	str	r2, [r3, #0]
      break;
 8001636:	e00f      	b.n	8001658 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800163c:	601a      	str	r2, [r3, #0]
      break;
 800163e:	e00b      	b.n	8001658 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8001644:	601a      	str	r2, [r3, #0]
      break;
 8001646:	e007      	b.n	8001658 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800164c:	601a      	str	r2, [r3, #0]
      break;
 800164e:	e003      	b.n	8001658 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	60fb      	str	r3, [r7, #12]
      break;
 8001656:	bf00      	nop
  }

  return ret;
 8001658:	68fb      	ldr	r3, [r7, #12]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	3d79db23 	.word	0x3d79db23
 8001668:	3df9db23 	.word	0x3df9db23
 800166c:	3e79db23 	.word	0x3e79db23
 8001670:	3ef9db23 	.word	0x3ef9db23

08001674 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001686:	2b01      	cmp	r3, #1
 8001688:	d106      	bne.n	8001698 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800168a:	ed97 0a00 	vldr	s0, [r7]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f8fe 	bl	8001890 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8001694:	4603      	mov	r3, r0
 8001696:	e005      	b.n	80016a4 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001698:	ed97 0a00 	vldr	s0, [r7]
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f983 	bl	80019a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80016a2:	4603      	mov	r3, r0
  }
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	dd0b      	ble.n	80016d4 <LSM6DSL_ACC_SetFullScale+0x28>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	dd06      	ble.n	80016d0 <LSM6DSL_ACC_SetFullScale+0x24>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	dc01      	bgt.n	80016cc <LSM6DSL_ACC_SetFullScale+0x20>
 80016c8:	2303      	movs	r3, #3
 80016ca:	e004      	b.n	80016d6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e002      	b.n	80016d6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e000      	b.n	80016d6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80016d4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80016d6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3320      	adds	r3, #32
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fa49 	bl	8001b78 <lsm6dsl_xl_full_scale_set>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	e000      	b.n	80016f4 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3320      	adds	r3, #32
 800170a:	f107 0208 	add.w	r2, r7, #8
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fb27 	bl	8001d64 <lsm6dsl_acceleration_raw_get>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	e00c      	b.n	800173c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8001722:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800172a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8001732:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3320      	adds	r3, #32
 8001758:	f107 0210 	add.w	r2, r7, #16
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fb00 	bl	8001d64 <lsm6dsl_acceleration_raw_get>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e03c      	b.n	80017ea <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff36 	bl	80015e8 <LSM6DSL_ACC_GetSensitivity>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e030      	b.n	80017ea <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001788:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001794:	edd7 7a03 	vldr	s15, [r7, #12]
 8001798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a0:	ee17 2a90 	vmov	r2, s15
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80017a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c0:	ee17 2a90 	vmov	r2, s15
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80017c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 2a90 	vmov	r2, s15
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70fb      	strb	r3, [r7, #3]
 80017fe:	4613      	mov	r3, r2
 8001800:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f103 0020 	add.w	r0, r3, #32
 8001808:	1cba      	adds	r2, r7, #2
 800180a:	78f9      	ldrb	r1, [r7, #3]
 800180c:	2301      	movs	r3, #1
 800180e:	f000 f99b 	bl	8001b48 <lsm6dsl_write_reg>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	e000      	b.n	8001820 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3320      	adds	r3, #32
 8001838:	f107 020c 	add.w	r2, r7, #12
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fc72 	bl	8002128 <lsm6dsl_pin_int1_route_get>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e01b      	b.n	8001888 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d811      	bhi.n	800187a <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	7b3b      	ldrb	r3, [r7, #12]
 8001860:	f362 0300 	bfi	r3, r2, #0, #1
 8001864:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3320      	adds	r3, #32
 800186a:	68f9      	ldr	r1, [r7, #12]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 faf8 	bl	8001e62 <lsm6dsl_pin_int1_route_set>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8001878:	e002      	b.n	8001880 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e003      	b.n	8001888 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
 8001884:	e000      	b.n	8001888 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800189c:	edd7 7a00 	vldr	s15, [r7]
 80018a0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	d801      	bhi.n	80018b2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e058      	b.n	8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80018b2:	edd7 7a00 	vldr	s15, [r7]
 80018b6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80018ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	d801      	bhi.n	80018c8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e04d      	b.n	8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80018c8:	edd7 7a00 	vldr	s15, [r7]
 80018cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800198c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80018d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	d801      	bhi.n	80018de <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80018da:	2303      	movs	r3, #3
 80018dc:	e042      	b.n	8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80018de:	edd7 7a00 	vldr	s15, [r7]
 80018e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001990 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80018e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ee:	d801      	bhi.n	80018f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80018f0:	2304      	movs	r3, #4
 80018f2:	e037      	b.n	8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80018f4:	edd7 7a00 	vldr	s15, [r7]
 80018f8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001994 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 80018fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	d801      	bhi.n	800190a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8001906:	2305      	movs	r3, #5
 8001908:	e02c      	b.n	8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800190a:	edd7 7a00 	vldr	s15, [r7]
 800190e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001998 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8001912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	d801      	bhi.n	8001920 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800191c:	2306      	movs	r3, #6
 800191e:	e021      	b.n	8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001920:	edd7 7a00 	vldr	s15, [r7]
 8001924:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800199c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8001928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	d801      	bhi.n	8001936 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8001932:	2307      	movs	r3, #7
 8001934:	e016      	b.n	8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001936:	edd7 7a00 	vldr	s15, [r7]
 800193a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80019a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800193e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	d801      	bhi.n	800194c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8001948:	2308      	movs	r3, #8
 800194a:	e00b      	b.n	8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800194c:	edd7 7a00 	vldr	s15, [r7]
 8001950:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8001954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d801      	bhi.n	8001962 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800195e:	2309      	movs	r3, #9
 8001960:	e000      	b.n	8001964 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001962:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8001964:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3320      	adds	r3, #32
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f960 	bl	8001c34 <lsm6dsl_xl_data_rate_set>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e000      	b.n	8001982 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	42500000 	.word	0x42500000
 8001990:	42d00000 	.word	0x42d00000
 8001994:	43500000 	.word	0x43500000
 8001998:	43d00000 	.word	0x43d00000
 800199c:	44504000 	.word	0x44504000
 80019a0:	44cf8000 	.word	0x44cf8000
 80019a4:	45502000 	.word	0x45502000

080019a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80019b4:	edd7 7a00 	vldr	s15, [r7]
 80019b8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80019bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	d801      	bhi.n	80019ca <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e058      	b.n	8001a7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80019ca:	edd7 7a00 	vldr	s15, [r7]
 80019ce:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80019d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d801      	bhi.n	80019e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80019dc:	2302      	movs	r3, #2
 80019de:	e04d      	b.n	8001a7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80019e0:	edd7 7a00 	vldr	s15, [r7]
 80019e4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001a90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80019e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f0:	d801      	bhi.n	80019f6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e042      	b.n	8001a7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80019f6:	edd7 7a00 	vldr	s15, [r7]
 80019fa:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a94 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d801      	bhi.n	8001a0c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e037      	b.n	8001a7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001a0c:	edd7 7a00 	vldr	s15, [r7]
 8001a10:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8001a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	d801      	bhi.n	8001a22 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8001a1e:	2305      	movs	r3, #5
 8001a20:	e02c      	b.n	8001a7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001a22:	edd7 7a00 	vldr	s15, [r7]
 8001a26:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001a9c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8001a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	d801      	bhi.n	8001a38 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8001a34:	2306      	movs	r3, #6
 8001a36:	e021      	b.n	8001a7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001a38:	edd7 7a00 	vldr	s15, [r7]
 8001a3c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001aa0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	d801      	bhi.n	8001a4e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e016      	b.n	8001a7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001a4e:	edd7 7a00 	vldr	s15, [r7]
 8001a52:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001aa4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d801      	bhi.n	8001a64 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8001a60:	2308      	movs	r3, #8
 8001a62:	e00b      	b.n	8001a7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001a64:	edd7 7a00 	vldr	s15, [r7]
 8001a68:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001aa8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	d801      	bhi.n	8001a7a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8001a76:	2309      	movs	r3, #9
 8001a78:	e000      	b.n	8001a7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001a7a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	42500000 	.word	0x42500000
 8001a94:	42d00000 	.word	0x42d00000
 8001a98:	43500000 	.word	0x43500000
 8001a9c:	43d00000 	.word	0x43d00000
 8001aa0:	44504000 	.word	0x44504000
 8001aa4:	44cf8000 	.word	0x44cf8000
 8001aa8:	45502000 	.word	0x45502000

08001aac <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	72fb      	strb	r3, [r7, #11]
 8001abc:	4613      	mov	r3, r2
 8001abe:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	695c      	ldr	r4, [r3, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	7b1b      	ldrb	r3, [r3, #12]
 8001acc:	4618      	mov	r0, r3
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	893b      	ldrh	r3, [r7, #8]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	47a0      	blx	r4
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}

08001ae2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ae2:	b590      	push	{r4, r7, lr}
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	461a      	mov	r2, r3
 8001aee:	460b      	mov	r3, r1
 8001af0:	72fb      	strb	r3, [r7, #11]
 8001af2:	4613      	mov	r3, r2
 8001af4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	691c      	ldr	r4, [r3, #16]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	7b1b      	ldrb	r3, [r3, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	7afb      	ldrb	r3, [r7, #11]
 8001b06:	b299      	uxth	r1, r3
 8001b08:	893b      	ldrh	r3, [r7, #8]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	47a0      	blx	r4
 8001b0e:	4603      	mov	r3, r0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	461a      	mov	r2, r3
 8001b24:	460b      	mov	r3, r1
 8001b26:	72fb      	strb	r3, [r7, #11]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685c      	ldr	r4, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	68d8      	ldr	r0, [r3, #12]
 8001b34:	893b      	ldrh	r3, [r7, #8]
 8001b36:	7af9      	ldrb	r1, [r7, #11]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	47a0      	blx	r4
 8001b3c:	6178      	str	r0, [r7, #20]

  return ret;
 8001b3e:	697b      	ldr	r3, [r7, #20]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}

08001b48 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	72fb      	strb	r3, [r7, #11]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681c      	ldr	r4, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	68d8      	ldr	r0, [r3, #12]
 8001b64:	893b      	ldrh	r3, [r7, #8]
 8001b66:	7af9      	ldrb	r1, [r7, #11]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	47a0      	blx	r4
 8001b6c:	6178      	str	r0, [r7, #20]

  return ret;
 8001b6e:	697b      	ldr	r3, [r7, #20]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}

08001b78 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001b84:	f107 0208 	add.w	r2, r7, #8
 8001b88:	2301      	movs	r3, #1
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffc3 	bl	8001b18 <lsm6dsl_read_reg>
 8001b92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10f      	bne.n	8001bba <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	7a3b      	ldrb	r3, [r7, #8]
 8001ba4:	f362 0383 	bfi	r3, r2, #2, #2
 8001ba8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001baa:	f107 0208 	add.w	r2, r7, #8
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffc8 	bl	8001b48 <lsm6dsl_write_reg>
 8001bb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001bce:	f107 0208 	add.w	r2, r7, #8
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	2110      	movs	r1, #16
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff9e 	bl	8001b18 <lsm6dsl_read_reg>
 8001bdc:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8001bde:	7a3b      	ldrb	r3, [r7, #8]
 8001be0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d81a      	bhi.n	8001c20 <lsm6dsl_xl_full_scale_get+0x5c>
 8001bea:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf0 <lsm6dsl_xl_full_scale_get+0x2c>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c01 	.word	0x08001c01
 8001bf4:	08001c09 	.word	0x08001c09
 8001bf8:	08001c11 	.word	0x08001c11
 8001bfc:	08001c19 	.word	0x08001c19
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
      break;
 8001c06:	e00f      	b.n	8001c28 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
      break;
 8001c0e:	e00b      	b.n	8001c28 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2202      	movs	r2, #2
 8001c14:	701a      	strb	r2, [r3, #0]
      break;
 8001c16:	e007      	b.n	8001c28 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	701a      	strb	r2, [r3, #0]
      break;
 8001c1e:	e003      	b.n	8001c28 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2204      	movs	r2, #4
 8001c24:	701a      	strb	r2, [r3, #0]
      break;
 8001c26:	bf00      	nop
  }

  return ret;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop

08001c34 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001c40:	f107 0208 	add.w	r2, r7, #8
 8001c44:	2301      	movs	r3, #1
 8001c46:	2110      	movs	r1, #16
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff65 	bl	8001b18 <lsm6dsl_read_reg>
 8001c4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10f      	bne.n	8001c76 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	7a3b      	ldrb	r3, [r7, #8]
 8001c60:	f362 1307 	bfi	r3, r2, #4, #4
 8001c64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001c66:	f107 0208 	add.w	r2, r7, #8
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ff6a 	bl	8001b48 <lsm6dsl_write_reg>
 8001c74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001c8c:	f107 0208 	add.w	r2, r7, #8
 8001c90:	2301      	movs	r3, #1
 8001c92:	2111      	movs	r1, #17
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff3f 	bl	8001b18 <lsm6dsl_read_reg>
 8001c9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10f      	bne.n	8001cc2 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	7a3b      	ldrb	r3, [r7, #8]
 8001cac:	f362 0343 	bfi	r3, r2, #1, #3
 8001cb0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001cb2:	f107 0208 	add.w	r2, r7, #8
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	2111      	movs	r1, #17
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ff44 	bl	8001b48 <lsm6dsl_write_reg>
 8001cc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001cd8:	f107 0208 	add.w	r2, r7, #8
 8001cdc:	2301      	movs	r3, #1
 8001cde:	2111      	movs	r1, #17
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff19 	bl	8001b18 <lsm6dsl_read_reg>
 8001ce6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10f      	bne.n	8001d0e <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	7a3b      	ldrb	r3, [r7, #8]
 8001cf8:	f362 1307 	bfi	r3, r2, #4, #4
 8001cfc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001cfe:	f107 0208 	add.w	r2, r7, #8
 8001d02:	2301      	movs	r3, #1
 8001d04:	2111      	movs	r1, #17
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff1e 	bl	8001b48 <lsm6dsl_write_reg>
 8001d0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001d24:	f107 0208 	add.w	r2, r7, #8
 8001d28:	2301      	movs	r3, #1
 8001d2a:	2112      	movs	r1, #18
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fef3 	bl	8001b18 <lsm6dsl_read_reg>
 8001d32:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10f      	bne.n	8001d5a <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	7a3b      	ldrb	r3, [r7, #8]
 8001d44:	f362 1386 	bfi	r3, r2, #6, #1
 8001d48:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001d4a:	f107 0208 	add.w	r2, r7, #8
 8001d4e:	2301      	movs	r3, #1
 8001d50:	2112      	movs	r1, #18
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fef8 	bl	8001b48 <lsm6dsl_write_reg>
 8001d58:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001d6e:	f107 020c 	add.w	r2, r7, #12
 8001d72:	2306      	movs	r3, #6
 8001d74:	2128      	movs	r1, #40	@ 0x28
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fece 	bl	8001b18 <lsm6dsl_read_reg>
 8001d7c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001d7e:	7b7b      	ldrb	r3, [r7, #13]
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	7b3a      	ldrb	r2, [r7, #12]
 8001d94:	4413      	add	r3, r2
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	3302      	adds	r3, #2
 8001da4:	b212      	sxth	r2, r2
 8001da6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	3302      	adds	r3, #2
 8001dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	7bba      	ldrb	r2, [r7, #14]
 8001db8:	4413      	add	r3, r2
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	b212      	sxth	r2, r2
 8001dc2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001dc4:	7c7a      	ldrb	r2, [r7, #17]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	b212      	sxth	r2, r2
 8001dcc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	7c3a      	ldrb	r2, [r7, #16]
 8001dde:	4413      	add	r3, r2
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	3304      	adds	r3, #4
 8001de6:	b212      	sxth	r2, r2
 8001de8:	801a      	strh	r2, [r3, #0]

  return ret;
 8001dea:	697b      	ldr	r3, [r7, #20]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001dfe:	2301      	movs	r3, #1
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	210f      	movs	r1, #15
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fe87 	bl	8001b18 <lsm6dsl_read_reg>
 8001e0a:	60f8      	str	r0, [r7, #12]

  return ret;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001e22:	f107 0208 	add.w	r2, r7, #8
 8001e26:	2301      	movs	r3, #1
 8001e28:	2112      	movs	r1, #18
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fe74 	bl	8001b18 <lsm6dsl_read_reg>
 8001e30:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10f      	bne.n	8001e58 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	7a3b      	ldrb	r3, [r7, #8]
 8001e42:	f362 0382 	bfi	r3, r2, #2, #1
 8001e46:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001e48:	f107 0208 	add.w	r2, r7, #8
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	2112      	movs	r1, #18
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fe79 	bl	8001b48 <lsm6dsl_write_reg>
 8001e56:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e58:	68fb      	ldr	r3, [r7, #12]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08a      	sub	sp, #40	@ 0x28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001e6c:	f107 021c 	add.w	r2, r7, #28
 8001e70:	2301      	movs	r3, #1
 8001e72:	210d      	movs	r1, #13
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff fe4f 	bl	8001b18 <lsm6dsl_read_reg>
 8001e7a:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == 0)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d147      	bne.n	8001f12 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8001e82:	783b      	ldrb	r3, [r7, #0]
 8001e84:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	7f3b      	ldrb	r3, [r7, #28]
 8001e8c:	f362 0300 	bfi	r3, r2, #0, #1
 8001e90:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8001e92:	783b      	ldrb	r3, [r7, #0]
 8001e94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	7f3b      	ldrb	r3, [r7, #28]
 8001e9c:	f362 0341 	bfi	r3, r2, #1, #1
 8001ea0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8001ea2:	783b      	ldrb	r3, [r7, #0]
 8001ea4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	7f3b      	ldrb	r3, [r7, #28]
 8001eac:	f362 0382 	bfi	r3, r2, #2, #1
 8001eb0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8001eb2:	783b      	ldrb	r3, [r7, #0]
 8001eb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	7f3b      	ldrb	r3, [r7, #28]
 8001ebc:	f362 03c3 	bfi	r3, r2, #3, #1
 8001ec0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8001ec2:	783b      	ldrb	r3, [r7, #0]
 8001ec4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	7f3b      	ldrb	r3, [r7, #28]
 8001ecc:	f362 1304 	bfi	r3, r2, #4, #1
 8001ed0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8001ed2:	783b      	ldrb	r3, [r7, #0]
 8001ed4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	7f3b      	ldrb	r3, [r7, #28]
 8001edc:	f362 1345 	bfi	r3, r2, #5, #1
 8001ee0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8001ee2:	783b      	ldrb	r3, [r7, #0]
 8001ee4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	7f3b      	ldrb	r3, [r7, #28]
 8001eec:	f362 1386 	bfi	r3, r2, #6, #1
 8001ef0:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8001ef2:	783b      	ldrb	r3, [r7, #0]
 8001ef4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	7f3b      	ldrb	r3, [r7, #28]
 8001efc:	f362 13c7 	bfi	r3, r2, #7, #1
 8001f00:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001f02:	f107 021c 	add.w	r2, r7, #28
 8001f06:	2301      	movs	r3, #1
 8001f08:	210d      	movs	r1, #13
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fe1c 	bl	8001b48 <lsm6dsl_write_reg>
 8001f10:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001f18:	f107 0218 	add.w	r2, r7, #24
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	215e      	movs	r1, #94	@ 0x5e
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fdf9 	bl	8001b18 <lsm6dsl_read_reg>
 8001f26:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d107      	bne.n	8001f3e <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8001f2e:	f107 0214 	add.w	r2, r7, #20
 8001f32:	2301      	movs	r3, #1
 8001f34:	215f      	movs	r1, #95	@ 0x5f
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fdee 	bl	8001b18 <lsm6dsl_read_reg>
 8001f3c:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d147      	bne.n	8001fd4 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	7e3b      	ldrb	r3, [r7, #24]
 8001f4e:	f362 0300 	bfi	r3, r2, #0, #1
 8001f52:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	7e3b      	ldrb	r3, [r7, #24]
 8001f5e:	f362 0341 	bfi	r3, r2, #1, #1
 8001f62:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	7e3b      	ldrb	r3, [r7, #24]
 8001f6e:	f362 0382 	bfi	r3, r2, #2, #1
 8001f72:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	7e3b      	ldrb	r3, [r7, #24]
 8001f7e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001f82:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8001f84:	787b      	ldrb	r3, [r7, #1]
 8001f86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	7e3b      	ldrb	r3, [r7, #24]
 8001f8e:	f362 1304 	bfi	r3, r2, #4, #1
 8001f92:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	7e3b      	ldrb	r3, [r7, #24]
 8001f9e:	f362 1345 	bfi	r3, r2, #5, #1
 8001fa2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	7e3b      	ldrb	r3, [r7, #24]
 8001fae:	f362 1386 	bfi	r3, r2, #6, #1
 8001fb2:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	7e3b      	ldrb	r3, [r7, #24]
 8001fbe:	f362 13c7 	bfi	r3, r2, #7, #1
 8001fc2:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001fc4:	f107 0218 	add.w	r2, r7, #24
 8001fc8:	2301      	movs	r3, #1
 8001fca:	215e      	movs	r1, #94	@ 0x5e
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fdbb 	bl	8001b48 <lsm6dsl_write_reg>
 8001fd2:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d107      	bne.n	8001fea <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8001fda:	f107 0210 	add.w	r2, r7, #16
 8001fde:	2301      	movs	r3, #1
 8001fe0:	2113      	movs	r1, #19
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd98 	bl	8001b18 <lsm6dsl_read_reg>
 8001fe8:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10f      	bne.n	8002010 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8001ff0:	78bb      	ldrb	r3, [r7, #2]
 8001ff2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	7c3b      	ldrb	r3, [r7, #16]
 8001ffa:	f362 1304 	bfi	r3, r2, #4, #1
 8001ffe:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002000:	f107 0210 	add.w	r2, r7, #16
 8002004:	2301      	movs	r3, #1
 8002006:	2113      	movs	r1, #19
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fd9d 	bl	8001b48 <lsm6dsl_write_reg>
 800200e:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	2b00      	cmp	r3, #0
 8002014:	d107      	bne.n	8002026 <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002016:	f107 0220 	add.w	r2, r7, #32
 800201a:	2301      	movs	r3, #1
 800201c:	211a      	movs	r1, #26
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fd7a 	bl	8001b18 <lsm6dsl_read_reg>
 8002024:	6278      	str	r0, [r7, #36]	@ 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	2b00      	cmp	r3, #0
 800202a:	d111      	bne.n	8002050 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 800202c:	78bb      	ldrb	r3, [r7, #2]
 800202e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002038:	f362 13c7 	bfi	r3, r2, #7, #1
 800203c:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002040:	f107 0220 	add.w	r2, r7, #32
 8002044:	2301      	movs	r3, #1
 8002046:	211a      	movs	r1, #26
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fd7d 	bl	8001b48 <lsm6dsl_write_reg>
 800204e:	6278      	str	r0, [r7, #36]	@ 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	d158      	bne.n	8002108 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002056:	f107 020c 	add.w	r2, r7, #12
 800205a:	2301      	movs	r3, #1
 800205c:	2158      	movs	r1, #88	@ 0x58
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fd5a 	bl	8001b18 <lsm6dsl_read_reg>
 8002064:	6278      	str	r0, [r7, #36]	@ 0x24

    if ((val.int1_6d != 0x00U) ||
 8002066:	787b      	ldrb	r3, [r7, #1]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d141      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8002072:	787b      	ldrb	r3, [r7, #1]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 800207a:	2b00      	cmp	r3, #0
 800207c:	d13b      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 800207e:	787b      	ldrb	r3, [r7, #1]
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002086:	2b00      	cmp	r3, #0
 8002088:	d135      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 800208a:	787b      	ldrb	r3, [r7, #1]
 800208c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002090:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002092:	2b00      	cmp	r3, #0
 8002094:	d12f      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002096:	787b      	ldrb	r3, [r7, #1]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d129      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 80020a2:	787b      	ldrb	r3, [r7, #1]
 80020a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020a8:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d123      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 80020ae:	7d3b      	ldrb	r3, [r7, #20]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d11d      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 80020ba:	7d3b      	ldrb	r3, [r7, #20]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d117      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 80020c6:	7d3b      	ldrb	r3, [r7, #20]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d111      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 80020d2:	7d3b      	ldrb	r3, [r7, #20]
 80020d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10b      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80020de:	7d3b      	ldrb	r3, [r7, #20]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d105      	bne.n	80020f6 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 80020ea:	7d3b      	ldrb	r3, [r7, #20]
 80020ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020f0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 80020f6:	7b3b      	ldrb	r3, [r7, #12]
 80020f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020fc:	733b      	strb	r3, [r7, #12]
 80020fe:	e003      	b.n	8002108 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002100:	7b3b      	ldrb	r3, [r7, #12]
 8002102:	f36f 13c7 	bfc	r3, #7, #1
 8002106:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	d107      	bne.n	800211e <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 800210e:	f107 020c 	add.w	r2, r7, #12
 8002112:	2301      	movs	r3, #1
 8002114:	2158      	movs	r1, #88	@ 0x58
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fd16 	bl	8001b48 <lsm6dsl_write_reg>
 800211c:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return ret;
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002120:	4618      	mov	r0, r3
 8002122:	3728      	adds	r7, #40	@ 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002132:	f107 0214 	add.w	r2, r7, #20
 8002136:	2301      	movs	r3, #1
 8002138:	210d      	movs	r1, #13
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fcec 	bl	8001b18 <lsm6dsl_read_reg>
 8002140:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 80c0 	bne.w	80022ca <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 800214a:	7d3b      	ldrb	r3, [r7, #20]
 800214c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002150:	b2d9      	uxtb	r1, r3
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	7813      	ldrb	r3, [r2, #0]
 8002156:	f361 0300 	bfi	r3, r1, #0, #1
 800215a:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 800215c:	7d3b      	ldrb	r3, [r7, #20]
 800215e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002162:	b2d9      	uxtb	r1, r3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	7813      	ldrb	r3, [r2, #0]
 8002168:	f361 0341 	bfi	r3, r1, #1, #1
 800216c:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 800216e:	7d3b      	ldrb	r3, [r7, #20]
 8002170:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002174:	b2d9      	uxtb	r1, r3
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	7813      	ldrb	r3, [r2, #0]
 800217a:	f361 0382 	bfi	r3, r1, #2, #1
 800217e:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8002180:	7d3b      	ldrb	r3, [r7, #20]
 8002182:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002186:	b2d9      	uxtb	r1, r3
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	7813      	ldrb	r3, [r2, #0]
 800218c:	f361 03c3 	bfi	r3, r1, #3, #1
 8002190:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8002192:	7d3b      	ldrb	r3, [r7, #20]
 8002194:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002198:	b2d9      	uxtb	r1, r3
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	7813      	ldrb	r3, [r2, #0]
 800219e:	f361 1304 	bfi	r3, r1, #4, #1
 80021a2:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 80021a4:	7d3b      	ldrb	r3, [r7, #20]
 80021a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021aa:	b2d9      	uxtb	r1, r3
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	7813      	ldrb	r3, [r2, #0]
 80021b0:	f361 1345 	bfi	r3, r1, #5, #1
 80021b4:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 80021b6:	7d3b      	ldrb	r3, [r7, #20]
 80021b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80021bc:	b2d9      	uxtb	r1, r3
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	7813      	ldrb	r3, [r2, #0]
 80021c2:	f361 1386 	bfi	r3, r1, #6, #1
 80021c6:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 80021c8:	7d3b      	ldrb	r3, [r7, #20]
 80021ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80021ce:	b2d9      	uxtb	r1, r3
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	7813      	ldrb	r3, [r2, #0]
 80021d4:	f361 13c7 	bfi	r3, r1, #7, #1
 80021d8:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80021da:	f107 0210 	add.w	r2, r7, #16
 80021de:	2301      	movs	r3, #1
 80021e0:	215e      	movs	r1, #94	@ 0x5e
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fc98 	bl	8001b18 <lsm6dsl_read_reg>
 80021e8:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d16c      	bne.n	80022ca <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 80021f0:	7c3b      	ldrb	r3, [r7, #16]
 80021f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021f6:	b2d9      	uxtb	r1, r3
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	7853      	ldrb	r3, [r2, #1]
 80021fc:	f361 0300 	bfi	r3, r1, #0, #1
 8002200:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 8002202:	7c3b      	ldrb	r3, [r7, #16]
 8002204:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002208:	b2d9      	uxtb	r1, r3
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	7853      	ldrb	r3, [r2, #1]
 800220e:	f361 0341 	bfi	r3, r1, #1, #1
 8002212:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 8002214:	7c3b      	ldrb	r3, [r7, #16]
 8002216:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800221a:	b2d9      	uxtb	r1, r3
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	7853      	ldrb	r3, [r2, #1]
 8002220:	f361 0382 	bfi	r3, r1, #2, #1
 8002224:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 8002226:	7c3b      	ldrb	r3, [r7, #16]
 8002228:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800222c:	b2d9      	uxtb	r1, r3
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	7853      	ldrb	r3, [r2, #1]
 8002232:	f361 03c3 	bfi	r3, r1, #3, #1
 8002236:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8002238:	7c3b      	ldrb	r3, [r7, #16]
 800223a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800223e:	b2d9      	uxtb	r1, r3
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	7853      	ldrb	r3, [r2, #1]
 8002244:	f361 1304 	bfi	r3, r1, #4, #1
 8002248:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 800224a:	7c3b      	ldrb	r3, [r7, #16]
 800224c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002250:	b2d9      	uxtb	r1, r3
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	7853      	ldrb	r3, [r2, #1]
 8002256:	f361 1345 	bfi	r3, r1, #5, #1
 800225a:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 800225c:	7c3b      	ldrb	r3, [r7, #16]
 800225e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002262:	b2d9      	uxtb	r1, r3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	7853      	ldrb	r3, [r2, #1]
 8002268:	f361 1386 	bfi	r3, r1, #6, #1
 800226c:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 800226e:	7c3b      	ldrb	r3, [r7, #16]
 8002270:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002274:	b2d9      	uxtb	r1, r3
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	7853      	ldrb	r3, [r2, #1]
 800227a:	f361 13c7 	bfi	r3, r1, #7, #1
 800227e:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002280:	f107 020c 	add.w	r2, r7, #12
 8002284:	2301      	movs	r3, #1
 8002286:	2113      	movs	r1, #19
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fc45 	bl	8001b18 <lsm6dsl_read_reg>
 800228e:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d119      	bne.n	80022ca <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8002296:	7b3b      	ldrb	r3, [r7, #12]
 8002298:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800229c:	b2d9      	uxtb	r1, r3
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	7893      	ldrb	r3, [r2, #2]
 80022a2:	f361 0300 	bfi	r3, r1, #0, #1
 80022a6:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80022a8:	f107 0218 	add.w	r2, r7, #24
 80022ac:	2301      	movs	r3, #1
 80022ae:	211a      	movs	r1, #26
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff fc31 	bl	8001b18 <lsm6dsl_read_reg>
 80022b6:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 80022b8:	7e3b      	ldrb	r3, [r7, #24]
 80022ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80022be:	b2d9      	uxtb	r1, r3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	7893      	ldrb	r3, [r2, #2]
 80022c4:	f361 0300 	bfi	r3, r1, #0, #1
 80022c8:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 80022ca:	69fb      	ldr	r3, [r7, #28]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80022e0:	f107 0208 	add.w	r2, r7, #8
 80022e4:	2301      	movs	r3, #1
 80022e6:	210a      	movs	r1, #10
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff fc15 	bl	8001b18 <lsm6dsl_read_reg>
 80022ee:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	7a3b      	ldrb	r3, [r7, #8]
 8002300:	f362 0302 	bfi	r3, r2, #0, #3
 8002304:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002306:	f107 0208 	add.w	r2, r7, #8
 800230a:	2301      	movs	r3, #1
 800230c:	210a      	movs	r1, #10
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fc1a 	bl	8001b48 <lsm6dsl_write_reg>
 8002314:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_Init+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <HAL_Init+0x40>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800232e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <HAL_Init+0x40>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <HAL_Init+0x40>)
 8002336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800233a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <HAL_Init+0x40>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002348:	2003      	movs	r0, #3
 800234a:	f000 f94f 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234e:	2000      	movs	r0, #0
 8002350:	f000 f808 	bl	8002364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002354:	f7fe fd16 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023c00 	.word	0x40023c00

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_InitTick+0x54>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_InitTick+0x58>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237a:	fbb3 f3f1 	udiv	r3, r3, r1
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f967 	bl	8002656 <HAL_SYSTICK_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e00e      	b.n	80023b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d80a      	bhi.n	80023ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002398:	2200      	movs	r2, #0
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f000 f92f 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a4:	4a06      	ldr	r2, [pc, #24]	@ (80023c0 <HAL_InitTick+0x5c>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000134 	.word	0x20000134
 80023bc:	2000013c 	.word	0x2000013c
 80023c0:	20000138 	.word	0x20000138

080023c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_IncTick+0x20>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_IncTick+0x24>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <HAL_IncTick+0x24>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	2000013c 	.word	0x2000013c
 80023e8:	200002fc 	.word	0x200002fc

080023ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return uwTick;
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <HAL_GetTick+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	200002fc 	.word	0x200002fc

08002404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800240c:	f7ff ffee 	bl	80023ec <HAL_GetTick>
 8002410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d005      	beq.n	800242a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_Delay+0x44>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800242a:	bf00      	nop
 800242c:	f7ff ffde 	bl	80023ec <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	429a      	cmp	r2, r3
 800243a:	d8f7      	bhi.n	800242c <HAL_Delay+0x28>
  {
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	2000013c 	.word	0x2000013c

0800244c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002474:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800247c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247e:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60d3      	str	r3, [r2, #12]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <__NVIC_GetPriorityGrouping+0x18>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	f003 0307 	and.w	r3, r3, #7
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	db0b      	blt.n	80024da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	f003 021f 	and.w	r2, r3, #31
 80024c8:	4907      	ldr	r1, [pc, #28]	@ (80024e8 <__NVIC_EnableIRQ+0x38>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2001      	movs	r0, #1
 80024d2:	fa00 f202 	lsl.w	r2, r0, r2
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000e100 	.word	0xe000e100

080024ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db0a      	blt.n	8002516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	490c      	ldr	r1, [pc, #48]	@ (8002538 <__NVIC_SetPriority+0x4c>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	440b      	add	r3, r1
 8002510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002514:	e00a      	b.n	800252c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4908      	ldr	r1, [pc, #32]	@ (800253c <__NVIC_SetPriority+0x50>)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3b04      	subs	r3, #4
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	440b      	add	r3, r1
 800252a:	761a      	strb	r2, [r3, #24]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	@ 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1c3 0307 	rsb	r3, r3, #7
 800255a:	2b04      	cmp	r3, #4
 800255c:	bf28      	it	cs
 800255e:	2304      	movcs	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3304      	adds	r3, #4
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <NVIC_EncodePriority+0x30>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3b03      	subs	r3, #3
 800256e:	e000      	b.n	8002572 <NVIC_EncodePriority+0x32>
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43d9      	mvns	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	4313      	orrs	r3, r2
         );
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	@ 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff8e 	bl	80024ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff29 	bl	800244c <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff3e 	bl	8002494 <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff8e 	bl	8002540 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5d 	bl	80024ec <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff31 	bl	80024b0 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffa2 	bl	80025a8 <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	@ 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	e165      	b.n	8002958 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800268c:	2201      	movs	r2, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	f040 8154 	bne.w	8002952 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d005      	beq.n	80026c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d130      	bne.n	8002724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	2203      	movs	r2, #3
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f8:	2201      	movs	r2, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 0201 	and.w	r2, r3, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b03      	cmp	r3, #3
 800272e:	d017      	beq.n	8002760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d123      	bne.n	80027b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	08da      	lsrs	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3208      	adds	r2, #8
 8002774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	220f      	movs	r2, #15
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	08da      	lsrs	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3208      	adds	r2, #8
 80027ae:	69b9      	ldr	r1, [r7, #24]
 80027b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0203 	and.w	r2, r3, #3
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80ae 	beq.w	8002952 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002970 <HAL_GPIO_Init+0x300>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002970 <HAL_GPIO_Init+0x300>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002804:	6453      	str	r3, [r2, #68]	@ 0x44
 8002806:	4b5a      	ldr	r3, [pc, #360]	@ (8002970 <HAL_GPIO_Init+0x300>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002812:	4a58      	ldr	r2, [pc, #352]	@ (8002974 <HAL_GPIO_Init+0x304>)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	3302      	adds	r3, #2
 800281a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4f      	ldr	r2, [pc, #316]	@ (8002978 <HAL_GPIO_Init+0x308>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d025      	beq.n	800288a <HAL_GPIO_Init+0x21a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4e      	ldr	r2, [pc, #312]	@ (800297c <HAL_GPIO_Init+0x30c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01f      	beq.n	8002886 <HAL_GPIO_Init+0x216>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4d      	ldr	r2, [pc, #308]	@ (8002980 <HAL_GPIO_Init+0x310>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d019      	beq.n	8002882 <HAL_GPIO_Init+0x212>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4c      	ldr	r2, [pc, #304]	@ (8002984 <HAL_GPIO_Init+0x314>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0x20e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4b      	ldr	r2, [pc, #300]	@ (8002988 <HAL_GPIO_Init+0x318>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00d      	beq.n	800287a <HAL_GPIO_Init+0x20a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4a      	ldr	r2, [pc, #296]	@ (800298c <HAL_GPIO_Init+0x31c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <HAL_GPIO_Init+0x206>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a49      	ldr	r2, [pc, #292]	@ (8002990 <HAL_GPIO_Init+0x320>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_GPIO_Init+0x202>
 800286e:	2306      	movs	r3, #6
 8002870:	e00c      	b.n	800288c <HAL_GPIO_Init+0x21c>
 8002872:	2307      	movs	r3, #7
 8002874:	e00a      	b.n	800288c <HAL_GPIO_Init+0x21c>
 8002876:	2305      	movs	r3, #5
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x21c>
 800287a:	2304      	movs	r3, #4
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x21c>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x21c>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x21c>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x21c>
 800288a:	2300      	movs	r3, #0
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289c:	4935      	ldr	r1, [pc, #212]	@ (8002974 <HAL_GPIO_Init+0x304>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002994 <HAL_GPIO_Init+0x324>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ce:	4a31      	ldr	r2, [pc, #196]	@ (8002994 <HAL_GPIO_Init+0x324>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002994 <HAL_GPIO_Init+0x324>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f8:	4a26      	ldr	r2, [pc, #152]	@ (8002994 <HAL_GPIO_Init+0x324>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fe:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <HAL_GPIO_Init+0x324>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002922:	4a1c      	ldr	r2, [pc, #112]	@ (8002994 <HAL_GPIO_Init+0x324>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002928:	4b1a      	ldr	r3, [pc, #104]	@ (8002994 <HAL_GPIO_Init+0x324>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294c:	4a11      	ldr	r2, [pc, #68]	@ (8002994 <HAL_GPIO_Init+0x324>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	f67f ae96 	bls.w	800268c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	@ 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40013800 	.word	0x40013800
 8002978:	40020000 	.word	0x40020000
 800297c:	40020400 	.word	0x40020400
 8002980:	40020800 	.word	0x40020800
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40021400 	.word	0x40021400
 8002990:	40021800 	.word	0x40021800
 8002994:	40013c00 	.word	0x40013c00

08002998 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e0c7      	b.n	8002b44 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b4:	2201      	movs	r2, #1
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	f040 80b7 	bne.w	8002b3e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80029d0:	4a62      	ldr	r2, [pc, #392]	@ (8002b5c <HAL_GPIO_DeInit+0x1c4>)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	220f      	movs	r2, #15
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b60 <HAL_GPIO_DeInit+0x1c8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d025      	beq.n	8002a46 <HAL_GPIO_DeInit+0xae>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a59      	ldr	r2, [pc, #356]	@ (8002b64 <HAL_GPIO_DeInit+0x1cc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01f      	beq.n	8002a42 <HAL_GPIO_DeInit+0xaa>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a58      	ldr	r2, [pc, #352]	@ (8002b68 <HAL_GPIO_DeInit+0x1d0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d019      	beq.n	8002a3e <HAL_GPIO_DeInit+0xa6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a57      	ldr	r2, [pc, #348]	@ (8002b6c <HAL_GPIO_DeInit+0x1d4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_DeInit+0xa2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a56      	ldr	r2, [pc, #344]	@ (8002b70 <HAL_GPIO_DeInit+0x1d8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_GPIO_DeInit+0x9e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a55      	ldr	r2, [pc, #340]	@ (8002b74 <HAL_GPIO_DeInit+0x1dc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <HAL_GPIO_DeInit+0x9a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a54      	ldr	r2, [pc, #336]	@ (8002b78 <HAL_GPIO_DeInit+0x1e0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_GPIO_DeInit+0x96>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00c      	b.n	8002a48 <HAL_GPIO_DeInit+0xb0>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e00a      	b.n	8002a48 <HAL_GPIO_DeInit+0xb0>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_DeInit+0xb0>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_DeInit+0xb0>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_DeInit+0xb0>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_DeInit+0xb0>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_DeInit+0xb0>
 8002a46:	2300      	movs	r3, #0
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d132      	bne.n	8002abe <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a58:	4b48      	ldr	r3, [pc, #288]	@ (8002b7c <HAL_GPIO_DeInit+0x1e4>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4946      	ldr	r1, [pc, #280]	@ (8002b7c <HAL_GPIO_DeInit+0x1e4>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a66:	4b45      	ldr	r3, [pc, #276]	@ (8002b7c <HAL_GPIO_DeInit+0x1e4>)
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4943      	ldr	r1, [pc, #268]	@ (8002b7c <HAL_GPIO_DeInit+0x1e4>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a74:	4b41      	ldr	r3, [pc, #260]	@ (8002b7c <HAL_GPIO_DeInit+0x1e4>)
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	493f      	ldr	r1, [pc, #252]	@ (8002b7c <HAL_GPIO_DeInit+0x1e4>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a82:	4b3e      	ldr	r3, [pc, #248]	@ (8002b7c <HAL_GPIO_DeInit+0x1e4>)
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	493c      	ldr	r1, [pc, #240]	@ (8002b7c <HAL_GPIO_DeInit+0x1e4>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	220f      	movs	r2, #15
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002aa0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b5c <HAL_GPIO_DeInit+0x1c4>)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	482a      	ldr	r0, [pc, #168]	@ (8002b5c <HAL_GPIO_DeInit+0x1c4>)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2103      	movs	r1, #3
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	08d2      	lsrs	r2, r2, #3
 8002af4:	4019      	ands	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3208      	adds	r2, #8
 8002afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2103      	movs	r1, #3
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	401a      	ands	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2103      	movs	r1, #3
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	401a      	ands	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3301      	adds	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	f67f af34 	bls.w	80029b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40021400 	.word	0x40021400
 8002b78:	40021800 	.word	0x40021800
 8002b7c:	40013c00 	.word	0x40013c00

08002b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	807b      	strh	r3, [r7, #2]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b90:	787b      	ldrb	r3, [r7, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b9c:	e003      	b.n	8002ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	041a      	lsls	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bbe:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d006      	beq.n	8002bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bca:	4a05      	ldr	r2, [pc, #20]	@ (8002be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f8a6 	bl	8000d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0cc      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b68      	ldr	r3, [pc, #416]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d90c      	bls.n	8002c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b65      	ldr	r3, [pc, #404]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b63      	ldr	r3, [pc, #396]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0b8      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d020      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c38:	4b59      	ldr	r3, [pc, #356]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a58      	ldr	r2, [pc, #352]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c50:	4b53      	ldr	r3, [pc, #332]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a52      	ldr	r2, [pc, #328]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b50      	ldr	r3, [pc, #320]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	494d      	ldr	r1, [pc, #308]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d044      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b47      	ldr	r3, [pc, #284]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d119      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e06f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e067      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b37      	ldr	r3, [pc, #220]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4934      	ldr	r1, [pc, #208]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7ff fb8a 	bl	80023ec <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7ff fb86 	bl	80023ec <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e04f      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b25      	ldr	r3, [pc, #148]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d20c      	bcs.n	8002d2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b22      	ldr	r3, [pc, #136]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b20      	ldr	r3, [pc, #128]	@ (8002d9c <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e032      	b.n	8002d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d38:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4916      	ldr	r1, [pc, #88]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d56:	4b12      	ldr	r3, [pc, #72]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	490e      	ldr	r1, [pc, #56]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d6a:	f000 f855 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	490a      	ldr	r1, [pc, #40]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7c:	5ccb      	ldrb	r3, [r1, r3]
 8002d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d82:	4a09      	ldr	r2, [pc, #36]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff faea 	bl	8002364 <HAL_InitTick>

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023c00 	.word	0x40023c00
 8002da0:	40023800 	.word	0x40023800
 8002da4:	08005774 	.word	0x08005774
 8002da8:	20000134 	.word	0x20000134
 8002dac:	20000138 	.word	0x20000138

08002db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b03      	ldr	r3, [pc, #12]	@ (8002dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000134 	.word	0x20000134

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dcc:	f7ff fff0 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b05      	ldr	r3, [pc, #20]	@ (8002de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0a9b      	lsrs	r3, r3, #10
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4903      	ldr	r1, [pc, #12]	@ (8002dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	08005784 	.word	0x08005784

08002df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002df4:	f7ff ffdc 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0b5b      	lsrs	r3, r3, #13
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4903      	ldr	r1, [pc, #12]	@ (8002e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	08005784 	.word	0x08005784

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e1c:	b0ae      	sub	sp, #184	@ 0xb8
 8002e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e3e:	4bcb      	ldr	r3, [pc, #812]	@ (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	f200 8206 	bhi.w	8003258 <HAL_RCC_GetSysClockFreq+0x440>
 8002e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e54 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e89 	.word	0x08002e89
 8002e58:	08003259 	.word	0x08003259
 8002e5c:	08003259 	.word	0x08003259
 8002e60:	08003259 	.word	0x08003259
 8002e64:	08002e91 	.word	0x08002e91
 8002e68:	08003259 	.word	0x08003259
 8002e6c:	08003259 	.word	0x08003259
 8002e70:	08003259 	.word	0x08003259
 8002e74:	08002e99 	.word	0x08002e99
 8002e78:	08003259 	.word	0x08003259
 8002e7c:	08003259 	.word	0x08003259
 8002e80:	08003259 	.word	0x08003259
 8002e84:	08003089 	.word	0x08003089
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4bb9      	ldr	r3, [pc, #740]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002e8e:	e1e7      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e90:	4bb8      	ldr	r3, [pc, #736]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e96:	e1e3      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e98:	4bb4      	ldr	r3, [pc, #720]	@ (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea4:	4bb1      	ldr	r3, [pc, #708]	@ (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d071      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb0:	4bae      	ldr	r3, [pc, #696]	@ (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ebc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	0159      	lsls	r1, r3, #5
 8002ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee8:	0150      	lsls	r0, r2, #5
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4621      	mov	r1, r4
 8002ef0:	1a51      	subs	r1, r2, r1
 8002ef2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8002efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002f08:	4649      	mov	r1, r9
 8002f0a:	018b      	lsls	r3, r1, #6
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f12:	4641      	mov	r1, r8
 8002f14:	018a      	lsls	r2, r1, #6
 8002f16:	4641      	mov	r1, r8
 8002f18:	1a51      	subs	r1, r2, r1
 8002f1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002f30:	4649      	mov	r1, r9
 8002f32:	00cb      	lsls	r3, r1, #3
 8002f34:	4641      	mov	r1, r8
 8002f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3a:	4641      	mov	r1, r8
 8002f3c:	00ca      	lsls	r2, r1, #3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	4622      	mov	r2, r4
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f4a:	462b      	mov	r3, r5
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	eb42 0303 	adc.w	r3, r2, r3
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f60:	4629      	mov	r1, r5
 8002f62:	024b      	lsls	r3, r1, #9
 8002f64:	4621      	mov	r1, r4
 8002f66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	024a      	lsls	r2, r1, #9
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002f84:	f7fd f994 	bl	80002b0 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f92:	e067      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f94:	4b75      	ldr	r3, [pc, #468]	@ (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fa0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fae:	2300      	movs	r3, #0
 8002fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	0159      	lsls	r1, r3, #5
 8002fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc8:	0150      	lsls	r0, r2, #5
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4621      	mov	r1, r4
 8002fd0:	1a51      	subs	r1, r2, r1
 8002fd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002fe8:	4649      	mov	r1, r9
 8002fea:	018b      	lsls	r3, r1, #6
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	018a      	lsls	r2, r1, #6
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ffc:	4649      	mov	r1, r9
 8002ffe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800300e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003016:	4692      	mov	sl, r2
 8003018:	469b      	mov	fp, r3
 800301a:	4623      	mov	r3, r4
 800301c:	eb1a 0303 	adds.w	r3, sl, r3
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	462b      	mov	r3, r5
 8003024:	eb4b 0303 	adc.w	r3, fp, r3
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003036:	4629      	mov	r1, r5
 8003038:	028b      	lsls	r3, r1, #10
 800303a:	4621      	mov	r1, r4
 800303c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003040:	4621      	mov	r1, r4
 8003042:	028a      	lsls	r2, r1, #10
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800304c:	2200      	movs	r2, #0
 800304e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003050:	677a      	str	r2, [r7, #116]	@ 0x74
 8003052:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003056:	f7fd f92b 	bl	80002b0 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4613      	mov	r3, r2
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003064:	4b41      	ldr	r3, [pc, #260]	@ (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	3301      	adds	r3, #1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800307a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003086:	e0eb      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003088:	4b38      	ldr	r3, [pc, #224]	@ (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003090:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003094:	4b35      	ldr	r3, [pc, #212]	@ (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d06b      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a0:	4b32      	ldr	r3, [pc, #200]	@ (800316c <HAL_RCC_GetSysClockFreq+0x354>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	2200      	movs	r2, #0
 80030a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80030b4:	2300      	movs	r3, #0
 80030b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80030b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80030bc:	4622      	mov	r2, r4
 80030be:	462b      	mov	r3, r5
 80030c0:	f04f 0000 	mov.w	r0, #0
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	0159      	lsls	r1, r3, #5
 80030ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ce:	0150      	lsls	r0, r2, #5
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4621      	mov	r1, r4
 80030d6:	1a51      	subs	r1, r2, r1
 80030d8:	61b9      	str	r1, [r7, #24]
 80030da:	4629      	mov	r1, r5
 80030dc:	eb63 0301 	sbc.w	r3, r3, r1
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030ee:	4659      	mov	r1, fp
 80030f0:	018b      	lsls	r3, r1, #6
 80030f2:	4651      	mov	r1, sl
 80030f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030f8:	4651      	mov	r1, sl
 80030fa:	018a      	lsls	r2, r1, #6
 80030fc:	4651      	mov	r1, sl
 80030fe:	ebb2 0801 	subs.w	r8, r2, r1
 8003102:	4659      	mov	r1, fp
 8003104:	eb63 0901 	sbc.w	r9, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003114:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003118:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311c:	4690      	mov	r8, r2
 800311e:	4699      	mov	r9, r3
 8003120:	4623      	mov	r3, r4
 8003122:	eb18 0303 	adds.w	r3, r8, r3
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	462b      	mov	r3, r5
 800312a:	eb49 0303 	adc.w	r3, r9, r3
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800313c:	4629      	mov	r1, r5
 800313e:	024b      	lsls	r3, r1, #9
 8003140:	4621      	mov	r1, r4
 8003142:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003146:	4621      	mov	r1, r4
 8003148:	024a      	lsls	r2, r1, #9
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003152:	2200      	movs	r2, #0
 8003154:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003156:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003158:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800315c:	f7fd f8a8 	bl	80002b0 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800316a:	e065      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x420>
 800316c:	40023800 	.word	0x40023800
 8003170:	00f42400 	.word	0x00f42400
 8003174:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003178:	4b3d      	ldr	r3, [pc, #244]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x458>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	2200      	movs	r2, #0
 8003180:	4618      	mov	r0, r3
 8003182:	4611      	mov	r1, r2
 8003184:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003188:	653b      	str	r3, [r7, #80]	@ 0x50
 800318a:	2300      	movs	r3, #0
 800318c:	657b      	str	r3, [r7, #84]	@ 0x54
 800318e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003192:	4642      	mov	r2, r8
 8003194:	464b      	mov	r3, r9
 8003196:	f04f 0000 	mov.w	r0, #0
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	0159      	lsls	r1, r3, #5
 80031a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031a4:	0150      	lsls	r0, r2, #5
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4641      	mov	r1, r8
 80031ac:	1a51      	subs	r1, r2, r1
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	4649      	mov	r1, r9
 80031b2:	eb63 0301 	sbc.w	r3, r3, r1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031c4:	4659      	mov	r1, fp
 80031c6:	018b      	lsls	r3, r1, #6
 80031c8:	4651      	mov	r1, sl
 80031ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ce:	4651      	mov	r1, sl
 80031d0:	018a      	lsls	r2, r1, #6
 80031d2:	4651      	mov	r1, sl
 80031d4:	1a54      	subs	r4, r2, r1
 80031d6:	4659      	mov	r1, fp
 80031d8:	eb63 0501 	sbc.w	r5, r3, r1
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	00eb      	lsls	r3, r5, #3
 80031e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ea:	00e2      	lsls	r2, r4, #3
 80031ec:	4614      	mov	r4, r2
 80031ee:	461d      	mov	r5, r3
 80031f0:	4643      	mov	r3, r8
 80031f2:	18e3      	adds	r3, r4, r3
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	464b      	mov	r3, r9
 80031f8:	eb45 0303 	adc.w	r3, r5, r3
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320a:	4629      	mov	r1, r5
 800320c:	028b      	lsls	r3, r1, #10
 800320e:	4621      	mov	r1, r4
 8003210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003214:	4621      	mov	r1, r4
 8003216:	028a      	lsls	r2, r1, #10
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003220:	2200      	movs	r2, #0
 8003222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003224:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003226:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800322a:	f7fd f841 	bl	80002b0 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4613      	mov	r3, r2
 8003234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003238:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x458>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0f1b      	lsrs	r3, r3, #28
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800324a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003256:	e003      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x45c>)
 800325a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800325e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003260:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003264:	4618      	mov	r0, r3
 8003266:	37b8      	adds	r7, #184	@ 0xb8
 8003268:	46bd      	mov	sp, r7
 800326a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	00f42400 	.word	0x00f42400

08003278 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e28d      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8083 	beq.w	800339e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003298:	4b94      	ldr	r3, [pc, #592]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d019      	beq.n	80032d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032a4:	4b91      	ldr	r3, [pc, #580]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032b0:	4b8e      	ldr	r3, [pc, #568]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032bc:	d00c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032be:	4b8b      	ldr	r3, [pc, #556]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d112      	bne.n	80032f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ca:	4b88      	ldr	r3, [pc, #544]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	4b84      	ldr	r3, [pc, #528]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d05b      	beq.n	800339c <HAL_RCC_OscConfig+0x124>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d157      	bne.n	800339c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e25a      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x90>
 80032fa:	4b7c      	ldr	r3, [pc, #496]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7b      	ldr	r2, [pc, #492]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xcc>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0xb4>
 8003312:	4b76      	ldr	r3, [pc, #472]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a75      	ldr	r2, [pc, #468]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b73      	ldr	r3, [pc, #460]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a72      	ldr	r2, [pc, #456]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xcc>
 800332c:	4b6f      	ldr	r3, [pc, #444]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6e      	ldr	r2, [pc, #440]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b6c      	ldr	r3, [pc, #432]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6b      	ldr	r2, [pc, #428]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7ff f84e 	bl	80023ec <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003354:	f7ff f84a 	bl	80023ec <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	@ 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e21f      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b61      	ldr	r3, [pc, #388]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xdc>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7ff f83a 	bl	80023ec <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7ff f836 	bl	80023ec <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e20b      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	4b57      	ldr	r3, [pc, #348]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x104>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d06f      	beq.n	800348a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033aa:	4b50      	ldr	r3, [pc, #320]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d017      	beq.n	80033e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033b6:	4b4d      	ldr	r3, [pc, #308]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d105      	bne.n	80033ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033c2:	4b4a      	ldr	r3, [pc, #296]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b47      	ldr	r3, [pc, #284]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d11c      	bne.n	8003414 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033da:	4b44      	ldr	r3, [pc, #272]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	4b41      	ldr	r3, [pc, #260]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_RCC_OscConfig+0x186>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e1d3      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b3b      	ldr	r3, [pc, #236]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4937      	ldr	r1, [pc, #220]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	e03a      	b.n	800348a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d020      	beq.n	800345e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341c:	4b34      	ldr	r3, [pc, #208]	@ (80034f0 <HAL_RCC_OscConfig+0x278>)
 800341e:	2201      	movs	r2, #1
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe ffe3 	bl	80023ec <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800342a:	f7fe ffdf 	bl	80023ec <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1b4      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	4b2b      	ldr	r3, [pc, #172]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003448:	4b28      	ldr	r3, [pc, #160]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4925      	ldr	r1, [pc, #148]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	e015      	b.n	800348a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345e:	4b24      	ldr	r3, [pc, #144]	@ (80034f0 <HAL_RCC_OscConfig+0x278>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe ffc2 	bl	80023ec <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800346c:	f7fe ffbe 	bl	80023ec <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e193      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d036      	beq.n	8003504 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349e:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <HAL_RCC_OscConfig+0x27c>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe ffa2 	bl	80023ec <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ac:	f7fe ff9e 	bl	80023ec <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e173      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_RCC_OscConfig+0x274>)
 80034c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x234>
 80034ca:	e01b      	b.n	8003504 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034cc:	4b09      	ldr	r3, [pc, #36]	@ (80034f4 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d2:	f7fe ff8b 	bl	80023ec <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	e00e      	b.n	80034f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034da:	f7fe ff87 	bl	80023ec <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d907      	bls.n	80034f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e15c      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
 80034ec:	40023800 	.word	0x40023800
 80034f0:	42470000 	.word	0x42470000
 80034f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80034fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ea      	bne.n	80034da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8097 	beq.w	8003640 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003512:	2300      	movs	r3, #0
 8003514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003516:	4b83      	ldr	r3, [pc, #524]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b7f      	ldr	r3, [pc, #508]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	4a7e      	ldr	r2, [pc, #504]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	@ 0x40
 8003532:	4b7c      	ldr	r3, [pc, #496]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b79      	ldr	r3, [pc, #484]	@ (8003728 <HAL_RCC_OscConfig+0x4b0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b76      	ldr	r3, [pc, #472]	@ (8003728 <HAL_RCC_OscConfig+0x4b0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a75      	ldr	r2, [pc, #468]	@ (8003728 <HAL_RCC_OscConfig+0x4b0>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fe ff47 	bl	80023ec <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fe ff43 	bl	80023ec <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e118      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b6c      	ldr	r3, [pc, #432]	@ (8003728 <HAL_RCC_OscConfig+0x4b0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x31e>
 8003588:	4b66      	ldr	r3, [pc, #408]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358c:	4a65      	ldr	r2, [pc, #404]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	@ 0x70
 8003594:	e01c      	b.n	80035d0 <HAL_RCC_OscConfig+0x358>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x340>
 800359e:	4b61      	ldr	r3, [pc, #388]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a2:	4a60      	ldr	r2, [pc, #384]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	f043 0304 	orr.w	r3, r3, #4
 80035a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035aa:	4b5e      	ldr	r3, [pc, #376]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0x358>
 80035b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035bc:	4a59      	ldr	r2, [pc, #356]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c4:	4b57      	ldr	r3, [pc, #348]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c8:	4a56      	ldr	r2, [pc, #344]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80035ca:	f023 0304 	bic.w	r3, r3, #4
 80035ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d015      	beq.n	8003604 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe ff08 	bl	80023ec <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035de:	e00a      	b.n	80035f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e0:	f7fe ff04 	bl	80023ec <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0d7      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ee      	beq.n	80035e0 <HAL_RCC_OscConfig+0x368>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fe fef2 	bl	80023ec <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe feee 	bl	80023ec <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0c1      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	4b40      	ldr	r3, [pc, #256]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ee      	bne.n	800360c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	4a3a      	ldr	r2, [pc, #232]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 800363a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800363e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80ad 	beq.w	80037a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800364a:	4b36      	ldr	r3, [pc, #216]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b08      	cmp	r3, #8
 8003654:	d060      	beq.n	8003718 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d145      	bne.n	80036ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365e:	4b33      	ldr	r3, [pc, #204]	@ (800372c <HAL_RCC_OscConfig+0x4b4>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fec2 	bl	80023ec <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe febe 	bl	80023ec <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e093      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	4b29      	ldr	r3, [pc, #164]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	019b      	lsls	r3, r3, #6
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	3b01      	subs	r3, #1
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b4:	071b      	lsls	r3, r3, #28
 80036b6:	491b      	ldr	r1, [pc, #108]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036bc:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_RCC_OscConfig+0x4b4>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fe fe93 	bl	80023ec <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ca:	f7fe fe8f 	bl	80023ec <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e064      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036dc:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x452>
 80036e8:	e05c      	b.n	80037a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b10      	ldr	r3, [pc, #64]	@ (800372c <HAL_RCC_OscConfig+0x4b4>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe fe7c 	bl	80023ec <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe fe78 	bl	80023ec <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e04d      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_RCC_OscConfig+0x4ac>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x480>
 8003716:	e045      	b.n	80037a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d107      	bne.n	8003730 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e040      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
 8003724:	40023800 	.word	0x40023800
 8003728:	40007000 	.word	0x40007000
 800372c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003730:	4b1f      	ldr	r3, [pc, #124]	@ (80037b0 <HAL_RCC_OscConfig+0x538>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d030      	beq.n	80037a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d129      	bne.n	80037a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d122      	bne.n	80037a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003760:	4013      	ands	r3, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003768:	4293      	cmp	r3, r2
 800376a:	d119      	bne.n	80037a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	3b01      	subs	r3, #1
 800377a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d10f      	bne.n	80037a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800

080037b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07b      	b.n	80038be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d6:	d009      	beq.n	80037ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
 80037de:	e005      	b.n	80037ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fae4 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003822:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003870:	ea42 0103 	orr.w	r1, r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	f003 0104 	and.w	r1, r3, #4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	f003 0210 	and.w	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e01a      	b.n	800390e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ee:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7fd fab7 	bl	8000e64 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b088      	sub	sp, #32
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_SPI_Transmit+0x22>
 8003934:	2302      	movs	r3, #2
 8003936:	e12d      	b.n	8003b94 <HAL_SPI_Transmit+0x27e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003940:	f7fe fd54 	bl	80023ec <HAL_GetTick>
 8003944:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d002      	beq.n	800395c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003956:	2302      	movs	r3, #2
 8003958:	77fb      	strb	r3, [r7, #31]
    goto error;
 800395a:	e116      	b.n	8003b8a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_SPI_Transmit+0x52>
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800396c:	e10d      	b.n	8003b8a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2203      	movs	r2, #3
 8003972:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	88fa      	ldrh	r2, [r7, #6]
 8003986:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b4:	d10f      	bne.n	80039d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e0:	2b40      	cmp	r3, #64	@ 0x40
 80039e2:	d007      	beq.n	80039f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039fc:	d14f      	bne.n	8003a9e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_SPI_Transmit+0xf6>
 8003a06:	8afb      	ldrh	r3, [r7, #22]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d142      	bne.n	8003a92 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a30:	e02f      	b.n	8003a92 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d112      	bne.n	8003a66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	881a      	ldrh	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	1c9a      	adds	r2, r3, #2
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a64:	e015      	b.n	8003a92 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a66:	f7fe fcc1 	bl	80023ec <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d803      	bhi.n	8003a7e <HAL_SPI_Transmit+0x168>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d102      	bne.n	8003a84 <HAL_SPI_Transmit+0x16e>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d106      	bne.n	8003a92 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003a90:	e07b      	b.n	8003b8a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ca      	bne.n	8003a32 <HAL_SPI_Transmit+0x11c>
 8003a9c:	e050      	b.n	8003b40 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_SPI_Transmit+0x196>
 8003aa6:	8afb      	ldrh	r3, [r7, #22]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d144      	bne.n	8003b36 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ad2:	e030      	b.n	8003b36 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d113      	bne.n	8003b0a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b08:	e015      	b.n	8003b36 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b0a:	f7fe fc6f 	bl	80023ec <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d803      	bhi.n	8003b22 <HAL_SPI_Transmit+0x20c>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d102      	bne.n	8003b28 <HAL_SPI_Transmit+0x212>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b34:	e029      	b.n	8003b8a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1c9      	bne.n	8003ad4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	6839      	ldr	r1, [r7, #0]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fa6f 	bl	8004028 <SPI_EndRxTxTransaction>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e003      	b.n	8003b8a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3720      	adds	r7, #32
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08c      	sub	sp, #48	@ 0x30
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003baa:	2301      	movs	r3, #1
 8003bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x26>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e198      	b.n	8003ef4 <HAL_SPI_TransmitReceive+0x358>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bca:	f7fe fc0f 	bl	80023ec <HAL_GetTick>
 8003bce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003be4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d00f      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x70>
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bf2:	d107      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x68>
 8003bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d003      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c0a:	e16d      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x82>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x82>
 8003c18:	887b      	ldrh	r3, [r7, #2]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003c24:	e160      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d003      	beq.n	8003c3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2205      	movs	r2, #5
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	887a      	ldrh	r2, [r7, #2]
 8003c4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	887a      	ldrh	r2, [r7, #2]
 8003c62:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7a:	2b40      	cmp	r3, #64	@ 0x40
 8003c7c:	d007      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c96:	d17c      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0x10a>
 8003ca0:	8b7b      	ldrh	r3, [r7, #26]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d16a      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	881a      	ldrh	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	1c9a      	adds	r2, r3, #2
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cca:	e057      	b.n	8003d7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d11b      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x176>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d016      	beq.n	8003d12 <HAL_SPI_TransmitReceive+0x176>
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d113      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d119      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x1b8>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d014      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d34:	b292      	uxth	r2, r2
 8003d36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d50:	2301      	movs	r3, #1
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d54:	f7fe fb4a 	bl	80023ec <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d80b      	bhi.n	8003d7c <HAL_SPI_TransmitReceive+0x1e0>
 8003d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d007      	beq.n	8003d7c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003d7a:	e0b5      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1a2      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x130>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d19d      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x130>
 8003d90:	e080      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_SPI_TransmitReceive+0x204>
 8003d9a:	8b7b      	ldrh	r3, [r7, #26]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d16f      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc6:	e05b      	b.n	8003e80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d11c      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x274>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d017      	beq.n	8003e10 <HAL_SPI_TransmitReceive+0x274>
 8003de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d114      	bne.n	8003e10 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	7812      	ldrb	r2, [r2, #0]
 8003df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d119      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x2b6>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d014      	beq.n	8003e52 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e52:	f7fe facb 	bl	80023ec <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d803      	bhi.n	8003e6a <HAL_SPI_TransmitReceive+0x2ce>
 8003e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d102      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x2d4>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d107      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003e7e:	e033      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d19e      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x22c>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d199      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f8c5 	bl	8004028 <SPI_EndRxTxTransaction>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003eb0:	e01a      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ede:	e003      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003ef0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3730      	adds	r7, #48	@ 0x30
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f0a:	b2db      	uxtb	r3, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f28:	f7fe fa60 	bl	80023ec <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f38:	f7fe fa58 	bl	80023ec <HAL_GetTick>
 8003f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	015b      	lsls	r3, r3, #5
 8003f44:	0d1b      	lsrs	r3, r3, #20
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4e:	e054      	b.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d050      	beq.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f58:	f7fe fa48 	bl	80023ec <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d902      	bls.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d13d      	bne.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f86:	d111      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f90:	d004      	beq.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f9a:	d107      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb4:	d10f      	bne.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e017      	b.n	800401a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d19b      	bne.n	8003f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000134 	.word	0x20000134

08004028 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2201      	movs	r2, #1
 800403c:	2102      	movs	r1, #2
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff ff6a 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e032      	b.n	80040c0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800405a:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <SPI_EndRxTxTransaction+0xa0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <SPI_EndRxTxTransaction+0xa4>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	0d5b      	lsrs	r3, r3, #21
 8004066:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004078:	d112      	bne.n	80040a0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	2180      	movs	r1, #128	@ 0x80
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7ff ff47 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d016      	beq.n	80040be <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e00f      	b.n	80040c0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b6:	2b80      	cmp	r3, #128	@ 0x80
 80040b8:	d0f2      	beq.n	80040a0 <SPI_EndRxTxTransaction+0x78>
 80040ba:	e000      	b.n	80040be <SPI_EndRxTxTransaction+0x96>
        break;
 80040bc:	bf00      	nop
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000134 	.word	0x20000134
 80040cc:	165e9f81 	.word	0x165e9f81

080040d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e042      	b.n	8004168 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc fed2 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	@ 0x24
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f973 	bl	8004400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b20      	cmp	r3, #32
 800418e:	d175      	bne.n	800427c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_UART_Transmit+0x2c>
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e06e      	b.n	800427e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2221      	movs	r2, #33	@ 0x21
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ae:	f7fe f91d 	bl	80023ec <HAL_GetTick>
 80041b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c8:	d108      	bne.n	80041dc <HAL_UART_Transmit+0x6c>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e003      	b.n	80041e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041e4:	e02e      	b.n	8004244 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	2180      	movs	r1, #128	@ 0x80
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f848 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e03a      	b.n	800427e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3302      	adds	r3, #2
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e007      	b.n	8004236 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3301      	adds	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1cb      	bne.n	80041e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2140      	movs	r1, #64	@ 0x40
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f814 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e006      	b.n	800427e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004296:	e03b      	b.n	8004310 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d037      	beq.n	8004310 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a0:	f7fe f8a4 	bl	80023ec <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	6a3a      	ldr	r2, [r7, #32]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e03a      	b.n	8004330 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d023      	beq.n	8004310 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b80      	cmp	r3, #128	@ 0x80
 80042cc:	d020      	beq.n	8004310 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b40      	cmp	r3, #64	@ 0x40
 80042d2:	d01d      	beq.n	8004310 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d116      	bne.n	8004310 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f81d 	bl	8004338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2208      	movs	r2, #8
 8004302:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e00f      	b.n	8004330 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	429a      	cmp	r2, r3
 800431e:	bf0c      	ite	eq
 8004320:	2301      	moveq	r3, #1
 8004322:	2300      	movne	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	429a      	cmp	r2, r3
 800432c:	d0b4      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004338:	b480      	push	{r7}
 800433a:	b095      	sub	sp, #84	@ 0x54
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004360:	643a      	str	r2, [r7, #64]	@ 0x40
 8004362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004366:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e5      	bne.n	8004340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3314      	adds	r3, #20
 800437a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	61fb      	str	r3, [r7, #28]
   return(result);
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3314      	adds	r3, #20
 8004392:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004394:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800439a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e5      	bne.n	8004374 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d119      	bne.n	80043e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f023 0310 	bic.w	r3, r3, #16
 80043c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043d0:	61ba      	str	r2, [r7, #24]
 80043d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6979      	ldr	r1, [r7, #20]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	613b      	str	r3, [r7, #16]
   return(result);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e5      	bne.n	80043b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043f2:	bf00      	nop
 80043f4:	3754      	adds	r7, #84	@ 0x54
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b0c0      	sub	sp, #256	@ 0x100
 8004406:	af00      	add	r7, sp, #0
 8004408:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	68d9      	ldr	r1, [r3, #12]
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	ea40 0301 	orr.w	r3, r0, r1
 8004428:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	431a      	orrs	r2, r3
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	431a      	orrs	r2, r3
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004458:	f021 010c 	bic.w	r1, r1, #12
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004466:	430b      	orrs	r3, r1
 8004468:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447a:	6999      	ldr	r1, [r3, #24]
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	ea40 0301 	orr.w	r3, r0, r1
 8004486:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b8f      	ldr	r3, [pc, #572]	@ (80046cc <UART_SetConfig+0x2cc>)
 8004490:	429a      	cmp	r2, r3
 8004492:	d005      	beq.n	80044a0 <UART_SetConfig+0xa0>
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4b8d      	ldr	r3, [pc, #564]	@ (80046d0 <UART_SetConfig+0x2d0>)
 800449c:	429a      	cmp	r2, r3
 800449e:	d104      	bne.n	80044aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044a0:	f7fe fca6 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 80044a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044a8:	e003      	b.n	80044b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044aa:	f7fe fc8d 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 80044ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044bc:	f040 810c 	bne.w	80046d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044d2:	4622      	mov	r2, r4
 80044d4:	462b      	mov	r3, r5
 80044d6:	1891      	adds	r1, r2, r2
 80044d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044da:	415b      	adcs	r3, r3
 80044dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044e2:	4621      	mov	r1, r4
 80044e4:	eb12 0801 	adds.w	r8, r2, r1
 80044e8:	4629      	mov	r1, r5
 80044ea:	eb43 0901 	adc.w	r9, r3, r1
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004502:	4690      	mov	r8, r2
 8004504:	4699      	mov	r9, r3
 8004506:	4623      	mov	r3, r4
 8004508:	eb18 0303 	adds.w	r3, r8, r3
 800450c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004510:	462b      	mov	r3, r5
 8004512:	eb49 0303 	adc.w	r3, r9, r3
 8004516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004526:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800452a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800452e:	460b      	mov	r3, r1
 8004530:	18db      	adds	r3, r3, r3
 8004532:	653b      	str	r3, [r7, #80]	@ 0x50
 8004534:	4613      	mov	r3, r2
 8004536:	eb42 0303 	adc.w	r3, r2, r3
 800453a:	657b      	str	r3, [r7, #84]	@ 0x54
 800453c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004540:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004544:	f7fb feb4 	bl	80002b0 <__aeabi_uldivmod>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4b61      	ldr	r3, [pc, #388]	@ (80046d4 <UART_SetConfig+0x2d4>)
 800454e:	fba3 2302 	umull	r2, r3, r3, r2
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	011c      	lsls	r4, r3, #4
 8004556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800455a:	2200      	movs	r2, #0
 800455c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004560:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004564:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004568:	4642      	mov	r2, r8
 800456a:	464b      	mov	r3, r9
 800456c:	1891      	adds	r1, r2, r2
 800456e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004570:	415b      	adcs	r3, r3
 8004572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004574:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004578:	4641      	mov	r1, r8
 800457a:	eb12 0a01 	adds.w	sl, r2, r1
 800457e:	4649      	mov	r1, r9
 8004580:	eb43 0b01 	adc.w	fp, r3, r1
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004590:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004594:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004598:	4692      	mov	sl, r2
 800459a:	469b      	mov	fp, r3
 800459c:	4643      	mov	r3, r8
 800459e:	eb1a 0303 	adds.w	r3, sl, r3
 80045a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045a6:	464b      	mov	r3, r9
 80045a8:	eb4b 0303 	adc.w	r3, fp, r3
 80045ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045c4:	460b      	mov	r3, r1
 80045c6:	18db      	adds	r3, r3, r3
 80045c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ca:	4613      	mov	r3, r2
 80045cc:	eb42 0303 	adc.w	r3, r2, r3
 80045d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045da:	f7fb fe69 	bl	80002b0 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4611      	mov	r1, r2
 80045e4:	4b3b      	ldr	r3, [pc, #236]	@ (80046d4 <UART_SetConfig+0x2d4>)
 80045e6:	fba3 2301 	umull	r2, r3, r3, r1
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2264      	movs	r2, #100	@ 0x64
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	1acb      	subs	r3, r1, r3
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045fa:	4b36      	ldr	r3, [pc, #216]	@ (80046d4 <UART_SetConfig+0x2d4>)
 80045fc:	fba3 2302 	umull	r2, r3, r3, r2
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004608:	441c      	add	r4, r3
 800460a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800460e:	2200      	movs	r2, #0
 8004610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004614:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004618:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800461c:	4642      	mov	r2, r8
 800461e:	464b      	mov	r3, r9
 8004620:	1891      	adds	r1, r2, r2
 8004622:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004624:	415b      	adcs	r3, r3
 8004626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004628:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800462c:	4641      	mov	r1, r8
 800462e:	1851      	adds	r1, r2, r1
 8004630:	6339      	str	r1, [r7, #48]	@ 0x30
 8004632:	4649      	mov	r1, r9
 8004634:	414b      	adcs	r3, r1
 8004636:	637b      	str	r3, [r7, #52]	@ 0x34
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004644:	4659      	mov	r1, fp
 8004646:	00cb      	lsls	r3, r1, #3
 8004648:	4651      	mov	r1, sl
 800464a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800464e:	4651      	mov	r1, sl
 8004650:	00ca      	lsls	r2, r1, #3
 8004652:	4610      	mov	r0, r2
 8004654:	4619      	mov	r1, r3
 8004656:	4603      	mov	r3, r0
 8004658:	4642      	mov	r2, r8
 800465a:	189b      	adds	r3, r3, r2
 800465c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004660:	464b      	mov	r3, r9
 8004662:	460a      	mov	r2, r1
 8004664:	eb42 0303 	adc.w	r3, r2, r3
 8004668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004678:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800467c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004680:	460b      	mov	r3, r1
 8004682:	18db      	adds	r3, r3, r3
 8004684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004686:	4613      	mov	r3, r2
 8004688:	eb42 0303 	adc.w	r3, r2, r3
 800468c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800468e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004692:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004696:	f7fb fe0b 	bl	80002b0 <__aeabi_uldivmod>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <UART_SetConfig+0x2d4>)
 80046a0:	fba3 1302 	umull	r1, r3, r3, r2
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	2164      	movs	r1, #100	@ 0x64
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	3332      	adds	r3, #50	@ 0x32
 80046b2:	4a08      	ldr	r2, [pc, #32]	@ (80046d4 <UART_SetConfig+0x2d4>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	f003 0207 	and.w	r2, r3, #7
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4422      	add	r2, r4
 80046c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046c8:	e106      	b.n	80048d8 <UART_SetConfig+0x4d8>
 80046ca:	bf00      	nop
 80046cc:	40011000 	.word	0x40011000
 80046d0:	40011400 	.word	0x40011400
 80046d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046dc:	2200      	movs	r2, #0
 80046de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046ea:	4642      	mov	r2, r8
 80046ec:	464b      	mov	r3, r9
 80046ee:	1891      	adds	r1, r2, r2
 80046f0:	6239      	str	r1, [r7, #32]
 80046f2:	415b      	adcs	r3, r3
 80046f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046fa:	4641      	mov	r1, r8
 80046fc:	1854      	adds	r4, r2, r1
 80046fe:	4649      	mov	r1, r9
 8004700:	eb43 0501 	adc.w	r5, r3, r1
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	00eb      	lsls	r3, r5, #3
 800470e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004712:	00e2      	lsls	r2, r4, #3
 8004714:	4614      	mov	r4, r2
 8004716:	461d      	mov	r5, r3
 8004718:	4643      	mov	r3, r8
 800471a:	18e3      	adds	r3, r4, r3
 800471c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004720:	464b      	mov	r3, r9
 8004722:	eb45 0303 	adc.w	r3, r5, r3
 8004726:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800472a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004736:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004746:	4629      	mov	r1, r5
 8004748:	008b      	lsls	r3, r1, #2
 800474a:	4621      	mov	r1, r4
 800474c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004750:	4621      	mov	r1, r4
 8004752:	008a      	lsls	r2, r1, #2
 8004754:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004758:	f7fb fdaa 	bl	80002b0 <__aeabi_uldivmod>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4b60      	ldr	r3, [pc, #384]	@ (80048e4 <UART_SetConfig+0x4e4>)
 8004762:	fba3 2302 	umull	r2, r3, r3, r2
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	011c      	lsls	r4, r3, #4
 800476a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004774:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004778:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	61b9      	str	r1, [r7, #24]
 8004784:	415b      	adcs	r3, r3
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6139      	str	r1, [r7, #16]
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047c0:	464b      	mov	r3, r9
 80047c2:	460a      	mov	r2, r1
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047e4:	4649      	mov	r1, r9
 80047e6:	008b      	lsls	r3, r1, #2
 80047e8:	4641      	mov	r1, r8
 80047ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ee:	4641      	mov	r1, r8
 80047f0:	008a      	lsls	r2, r1, #2
 80047f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047f6:	f7fb fd5b 	bl	80002b0 <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	4b38      	ldr	r3, [pc, #224]	@ (80048e4 <UART_SetConfig+0x4e4>)
 8004802:	fba3 2301 	umull	r2, r3, r3, r1
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2264      	movs	r2, #100	@ 0x64
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	1acb      	subs	r3, r1, r3
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	3332      	adds	r3, #50	@ 0x32
 8004814:	4a33      	ldr	r2, [pc, #204]	@ (80048e4 <UART_SetConfig+0x4e4>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004820:	441c      	add	r4, r3
 8004822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004826:	2200      	movs	r2, #0
 8004828:	673b      	str	r3, [r7, #112]	@ 0x70
 800482a:	677a      	str	r2, [r7, #116]	@ 0x74
 800482c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004830:	4642      	mov	r2, r8
 8004832:	464b      	mov	r3, r9
 8004834:	1891      	adds	r1, r2, r2
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	415b      	adcs	r3, r3
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004840:	4641      	mov	r1, r8
 8004842:	1851      	adds	r1, r2, r1
 8004844:	6039      	str	r1, [r7, #0]
 8004846:	4649      	mov	r1, r9
 8004848:	414b      	adcs	r3, r1
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004858:	4659      	mov	r1, fp
 800485a:	00cb      	lsls	r3, r1, #3
 800485c:	4651      	mov	r1, sl
 800485e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004862:	4651      	mov	r1, sl
 8004864:	00ca      	lsls	r2, r1, #3
 8004866:	4610      	mov	r0, r2
 8004868:	4619      	mov	r1, r3
 800486a:	4603      	mov	r3, r0
 800486c:	4642      	mov	r2, r8
 800486e:	189b      	adds	r3, r3, r2
 8004870:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004872:	464b      	mov	r3, r9
 8004874:	460a      	mov	r2, r1
 8004876:	eb42 0303 	adc.w	r3, r2, r3
 800487a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	663b      	str	r3, [r7, #96]	@ 0x60
 8004886:	667a      	str	r2, [r7, #100]	@ 0x64
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004894:	4649      	mov	r1, r9
 8004896:	008b      	lsls	r3, r1, #2
 8004898:	4641      	mov	r1, r8
 800489a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800489e:	4641      	mov	r1, r8
 80048a0:	008a      	lsls	r2, r1, #2
 80048a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048a6:	f7fb fd03 	bl	80002b0 <__aeabi_uldivmod>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <UART_SetConfig+0x4e4>)
 80048b0:	fba3 1302 	umull	r1, r3, r3, r2
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	2164      	movs	r1, #100	@ 0x64
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	3332      	adds	r3, #50	@ 0x32
 80048c2:	4a08      	ldr	r2, [pc, #32]	@ (80048e4 <UART_SetConfig+0x4e4>)
 80048c4:	fba2 2303 	umull	r2, r3, r2, r3
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	f003 020f 	and.w	r2, r3, #15
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4422      	add	r2, r4
 80048d6:	609a      	str	r2, [r3, #8]
}
 80048d8:	bf00      	nop
 80048da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048de:	46bd      	mov	sp, r7
 80048e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e4:	51eb851f 	.word	0x51eb851f

080048e8 <std>:
 80048e8:	2300      	movs	r3, #0
 80048ea:	b510      	push	{r4, lr}
 80048ec:	4604      	mov	r4, r0
 80048ee:	e9c0 3300 	strd	r3, r3, [r0]
 80048f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048f6:	6083      	str	r3, [r0, #8]
 80048f8:	8181      	strh	r1, [r0, #12]
 80048fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80048fc:	81c2      	strh	r2, [r0, #14]
 80048fe:	6183      	str	r3, [r0, #24]
 8004900:	4619      	mov	r1, r3
 8004902:	2208      	movs	r2, #8
 8004904:	305c      	adds	r0, #92	@ 0x5c
 8004906:	f000 f906 	bl	8004b16 <memset>
 800490a:	4b0d      	ldr	r3, [pc, #52]	@ (8004940 <std+0x58>)
 800490c:	6263      	str	r3, [r4, #36]	@ 0x24
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <std+0x5c>)
 8004910:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004912:	4b0d      	ldr	r3, [pc, #52]	@ (8004948 <std+0x60>)
 8004914:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <std+0x64>)
 8004918:	6323      	str	r3, [r4, #48]	@ 0x30
 800491a:	4b0d      	ldr	r3, [pc, #52]	@ (8004950 <std+0x68>)
 800491c:	6224      	str	r4, [r4, #32]
 800491e:	429c      	cmp	r4, r3
 8004920:	d006      	beq.n	8004930 <std+0x48>
 8004922:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004926:	4294      	cmp	r4, r2
 8004928:	d002      	beq.n	8004930 <std+0x48>
 800492a:	33d0      	adds	r3, #208	@ 0xd0
 800492c:	429c      	cmp	r4, r3
 800492e:	d105      	bne.n	800493c <std+0x54>
 8004930:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004938:	f000 b966 	b.w	8004c08 <__retarget_lock_init_recursive>
 800493c:	bd10      	pop	{r4, pc}
 800493e:	bf00      	nop
 8004940:	08004a91 	.word	0x08004a91
 8004944:	08004ab3 	.word	0x08004ab3
 8004948:	08004aeb 	.word	0x08004aeb
 800494c:	08004b0f 	.word	0x08004b0f
 8004950:	20000300 	.word	0x20000300

08004954 <stdio_exit_handler>:
 8004954:	4a02      	ldr	r2, [pc, #8]	@ (8004960 <stdio_exit_handler+0xc>)
 8004956:	4903      	ldr	r1, [pc, #12]	@ (8004964 <stdio_exit_handler+0x10>)
 8004958:	4803      	ldr	r0, [pc, #12]	@ (8004968 <stdio_exit_handler+0x14>)
 800495a:	f000 b869 	b.w	8004a30 <_fwalk_sglue>
 800495e:	bf00      	nop
 8004960:	20000140 	.word	0x20000140
 8004964:	080054a9 	.word	0x080054a9
 8004968:	20000150 	.word	0x20000150

0800496c <cleanup_stdio>:
 800496c:	6841      	ldr	r1, [r0, #4]
 800496e:	4b0c      	ldr	r3, [pc, #48]	@ (80049a0 <cleanup_stdio+0x34>)
 8004970:	4299      	cmp	r1, r3
 8004972:	b510      	push	{r4, lr}
 8004974:	4604      	mov	r4, r0
 8004976:	d001      	beq.n	800497c <cleanup_stdio+0x10>
 8004978:	f000 fd96 	bl	80054a8 <_fflush_r>
 800497c:	68a1      	ldr	r1, [r4, #8]
 800497e:	4b09      	ldr	r3, [pc, #36]	@ (80049a4 <cleanup_stdio+0x38>)
 8004980:	4299      	cmp	r1, r3
 8004982:	d002      	beq.n	800498a <cleanup_stdio+0x1e>
 8004984:	4620      	mov	r0, r4
 8004986:	f000 fd8f 	bl	80054a8 <_fflush_r>
 800498a:	68e1      	ldr	r1, [r4, #12]
 800498c:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <cleanup_stdio+0x3c>)
 800498e:	4299      	cmp	r1, r3
 8004990:	d004      	beq.n	800499c <cleanup_stdio+0x30>
 8004992:	4620      	mov	r0, r4
 8004994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004998:	f000 bd86 	b.w	80054a8 <_fflush_r>
 800499c:	bd10      	pop	{r4, pc}
 800499e:	bf00      	nop
 80049a0:	20000300 	.word	0x20000300
 80049a4:	20000368 	.word	0x20000368
 80049a8:	200003d0 	.word	0x200003d0

080049ac <global_stdio_init.part.0>:
 80049ac:	b510      	push	{r4, lr}
 80049ae:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <global_stdio_init.part.0+0x30>)
 80049b0:	4c0b      	ldr	r4, [pc, #44]	@ (80049e0 <global_stdio_init.part.0+0x34>)
 80049b2:	4a0c      	ldr	r2, [pc, #48]	@ (80049e4 <global_stdio_init.part.0+0x38>)
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	4620      	mov	r0, r4
 80049b8:	2200      	movs	r2, #0
 80049ba:	2104      	movs	r1, #4
 80049bc:	f7ff ff94 	bl	80048e8 <std>
 80049c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049c4:	2201      	movs	r2, #1
 80049c6:	2109      	movs	r1, #9
 80049c8:	f7ff ff8e 	bl	80048e8 <std>
 80049cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049d0:	2202      	movs	r2, #2
 80049d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d6:	2112      	movs	r1, #18
 80049d8:	f7ff bf86 	b.w	80048e8 <std>
 80049dc:	20000438 	.word	0x20000438
 80049e0:	20000300 	.word	0x20000300
 80049e4:	08004955 	.word	0x08004955

080049e8 <__sfp_lock_acquire>:
 80049e8:	4801      	ldr	r0, [pc, #4]	@ (80049f0 <__sfp_lock_acquire+0x8>)
 80049ea:	f000 b90e 	b.w	8004c0a <__retarget_lock_acquire_recursive>
 80049ee:	bf00      	nop
 80049f0:	20000441 	.word	0x20000441

080049f4 <__sfp_lock_release>:
 80049f4:	4801      	ldr	r0, [pc, #4]	@ (80049fc <__sfp_lock_release+0x8>)
 80049f6:	f000 b909 	b.w	8004c0c <__retarget_lock_release_recursive>
 80049fa:	bf00      	nop
 80049fc:	20000441 	.word	0x20000441

08004a00 <__sinit>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	4604      	mov	r4, r0
 8004a04:	f7ff fff0 	bl	80049e8 <__sfp_lock_acquire>
 8004a08:	6a23      	ldr	r3, [r4, #32]
 8004a0a:	b11b      	cbz	r3, 8004a14 <__sinit+0x14>
 8004a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a10:	f7ff bff0 	b.w	80049f4 <__sfp_lock_release>
 8004a14:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <__sinit+0x28>)
 8004a16:	6223      	str	r3, [r4, #32]
 8004a18:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <__sinit+0x2c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f5      	bne.n	8004a0c <__sinit+0xc>
 8004a20:	f7ff ffc4 	bl	80049ac <global_stdio_init.part.0>
 8004a24:	e7f2      	b.n	8004a0c <__sinit+0xc>
 8004a26:	bf00      	nop
 8004a28:	0800496d 	.word	0x0800496d
 8004a2c:	20000438 	.word	0x20000438

08004a30 <_fwalk_sglue>:
 8004a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a34:	4607      	mov	r7, r0
 8004a36:	4688      	mov	r8, r1
 8004a38:	4614      	mov	r4, r2
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a40:	f1b9 0901 	subs.w	r9, r9, #1
 8004a44:	d505      	bpl.n	8004a52 <_fwalk_sglue+0x22>
 8004a46:	6824      	ldr	r4, [r4, #0]
 8004a48:	2c00      	cmp	r4, #0
 8004a4a:	d1f7      	bne.n	8004a3c <_fwalk_sglue+0xc>
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a52:	89ab      	ldrh	r3, [r5, #12]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d907      	bls.n	8004a68 <_fwalk_sglue+0x38>
 8004a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	d003      	beq.n	8004a68 <_fwalk_sglue+0x38>
 8004a60:	4629      	mov	r1, r5
 8004a62:	4638      	mov	r0, r7
 8004a64:	47c0      	blx	r8
 8004a66:	4306      	orrs	r6, r0
 8004a68:	3568      	adds	r5, #104	@ 0x68
 8004a6a:	e7e9      	b.n	8004a40 <_fwalk_sglue+0x10>

08004a6c <iprintf>:
 8004a6c:	b40f      	push	{r0, r1, r2, r3}
 8004a6e:	b507      	push	{r0, r1, r2, lr}
 8004a70:	4906      	ldr	r1, [pc, #24]	@ (8004a8c <iprintf+0x20>)
 8004a72:	ab04      	add	r3, sp, #16
 8004a74:	6808      	ldr	r0, [r1, #0]
 8004a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a7a:	6881      	ldr	r1, [r0, #8]
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	f000 f9e9 	bl	8004e54 <_vfiprintf_r>
 8004a82:	b003      	add	sp, #12
 8004a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a88:	b004      	add	sp, #16
 8004a8a:	4770      	bx	lr
 8004a8c:	2000014c 	.word	0x2000014c

08004a90 <__sread>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	460c      	mov	r4, r1
 8004a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a98:	f000 f868 	bl	8004b6c <_read_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	bfab      	itete	ge
 8004aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8004aa4:	181b      	addge	r3, r3, r0
 8004aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004aaa:	bfac      	ite	ge
 8004aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004aae:	81a3      	strhlt	r3, [r4, #12]
 8004ab0:	bd10      	pop	{r4, pc}

08004ab2 <__swrite>:
 8004ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab6:	461f      	mov	r7, r3
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	05db      	lsls	r3, r3, #23
 8004abc:	4605      	mov	r5, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	d505      	bpl.n	8004ad0 <__swrite+0x1e>
 8004ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac8:	2302      	movs	r3, #2
 8004aca:	2200      	movs	r2, #0
 8004acc:	f000 f83c 	bl	8004b48 <_lseek_r>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	4632      	mov	r2, r6
 8004ade:	463b      	mov	r3, r7
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae6:	f000 b853 	b.w	8004b90 <_write_r>

08004aea <__sseek>:
 8004aea:	b510      	push	{r4, lr}
 8004aec:	460c      	mov	r4, r1
 8004aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af2:	f000 f829 	bl	8004b48 <_lseek_r>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	bf15      	itete	ne
 8004afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b06:	81a3      	strheq	r3, [r4, #12]
 8004b08:	bf18      	it	ne
 8004b0a:	81a3      	strhne	r3, [r4, #12]
 8004b0c:	bd10      	pop	{r4, pc}

08004b0e <__sclose>:
 8004b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b12:	f000 b809 	b.w	8004b28 <_close_r>

08004b16 <memset>:
 8004b16:	4402      	add	r2, r0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d100      	bne.n	8004b20 <memset+0xa>
 8004b1e:	4770      	bx	lr
 8004b20:	f803 1b01 	strb.w	r1, [r3], #1
 8004b24:	e7f9      	b.n	8004b1a <memset+0x4>
	...

08004b28 <_close_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d06      	ldr	r5, [pc, #24]	@ (8004b44 <_close_r+0x1c>)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	602b      	str	r3, [r5, #0]
 8004b34:	f7fc fba3 	bl	800127e <_close>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d102      	bne.n	8004b42 <_close_r+0x1a>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	b103      	cbz	r3, 8004b42 <_close_r+0x1a>
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	2000043c 	.word	0x2000043c

08004b48 <_lseek_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	4d07      	ldr	r5, [pc, #28]	@ (8004b68 <_lseek_r+0x20>)
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	4608      	mov	r0, r1
 8004b50:	4611      	mov	r1, r2
 8004b52:	2200      	movs	r2, #0
 8004b54:	602a      	str	r2, [r5, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f7fc fbb8 	bl	80012cc <_lseek>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_lseek_r+0x1e>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_lseek_r+0x1e>
 8004b64:	6023      	str	r3, [r4, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	2000043c 	.word	0x2000043c

08004b6c <_read_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4d07      	ldr	r5, [pc, #28]	@ (8004b8c <_read_r+0x20>)
 8004b70:	4604      	mov	r4, r0
 8004b72:	4608      	mov	r0, r1
 8004b74:	4611      	mov	r1, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	602a      	str	r2, [r5, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f7fc fb62 	bl	8001244 <_read>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_read_r+0x1e>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_read_r+0x1e>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	2000043c 	.word	0x2000043c

08004b90 <_write_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4d07      	ldr	r5, [pc, #28]	@ (8004bb0 <_write_r+0x20>)
 8004b94:	4604      	mov	r4, r0
 8004b96:	4608      	mov	r0, r1
 8004b98:	4611      	mov	r1, r2
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	602a      	str	r2, [r5, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f7fc f8d6 	bl	8000d50 <_write>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_write_r+0x1e>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_write_r+0x1e>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	2000043c 	.word	0x2000043c

08004bb4 <__errno>:
 8004bb4:	4b01      	ldr	r3, [pc, #4]	@ (8004bbc <__errno+0x8>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	2000014c 	.word	0x2000014c

08004bc0 <__libc_init_array>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8004bf8 <__libc_init_array+0x38>)
 8004bc4:	4c0d      	ldr	r4, [pc, #52]	@ (8004bfc <__libc_init_array+0x3c>)
 8004bc6:	1b64      	subs	r4, r4, r5
 8004bc8:	10a4      	asrs	r4, r4, #2
 8004bca:	2600      	movs	r6, #0
 8004bcc:	42a6      	cmp	r6, r4
 8004bce:	d109      	bne.n	8004be4 <__libc_init_array+0x24>
 8004bd0:	4d0b      	ldr	r5, [pc, #44]	@ (8004c00 <__libc_init_array+0x40>)
 8004bd2:	4c0c      	ldr	r4, [pc, #48]	@ (8004c04 <__libc_init_array+0x44>)
 8004bd4:	f000 fdb8 	bl	8005748 <_init>
 8004bd8:	1b64      	subs	r4, r4, r5
 8004bda:	10a4      	asrs	r4, r4, #2
 8004bdc:	2600      	movs	r6, #0
 8004bde:	42a6      	cmp	r6, r4
 8004be0:	d105      	bne.n	8004bee <__libc_init_array+0x2e>
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be8:	4798      	blx	r3
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7ee      	b.n	8004bcc <__libc_init_array+0xc>
 8004bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf2:	4798      	blx	r3
 8004bf4:	3601      	adds	r6, #1
 8004bf6:	e7f2      	b.n	8004bde <__libc_init_array+0x1e>
 8004bf8:	080057c8 	.word	0x080057c8
 8004bfc:	080057c8 	.word	0x080057c8
 8004c00:	080057c8 	.word	0x080057c8
 8004c04:	080057cc 	.word	0x080057cc

08004c08 <__retarget_lock_init_recursive>:
 8004c08:	4770      	bx	lr

08004c0a <__retarget_lock_acquire_recursive>:
 8004c0a:	4770      	bx	lr

08004c0c <__retarget_lock_release_recursive>:
 8004c0c:	4770      	bx	lr
	...

08004c10 <_free_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4605      	mov	r5, r0
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d041      	beq.n	8004c9c <_free_r+0x8c>
 8004c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1c:	1f0c      	subs	r4, r1, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	18e4      	addlt	r4, r4, r3
 8004c24:	f000 f8e0 	bl	8004de8 <__malloc_lock>
 8004c28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <_free_r+0x90>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	b933      	cbnz	r3, 8004c3c <_free_r+0x2c>
 8004c2e:	6063      	str	r3, [r4, #4]
 8004c30:	6014      	str	r4, [r2, #0]
 8004c32:	4628      	mov	r0, r5
 8004c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c38:	f000 b8dc 	b.w	8004df4 <__malloc_unlock>
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	d908      	bls.n	8004c52 <_free_r+0x42>
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	1821      	adds	r1, r4, r0
 8004c44:	428b      	cmp	r3, r1
 8004c46:	bf01      	itttt	eq
 8004c48:	6819      	ldreq	r1, [r3, #0]
 8004c4a:	685b      	ldreq	r3, [r3, #4]
 8004c4c:	1809      	addeq	r1, r1, r0
 8004c4e:	6021      	streq	r1, [r4, #0]
 8004c50:	e7ed      	b.n	8004c2e <_free_r+0x1e>
 8004c52:	461a      	mov	r2, r3
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	b10b      	cbz	r3, 8004c5c <_free_r+0x4c>
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	d9fa      	bls.n	8004c52 <_free_r+0x42>
 8004c5c:	6811      	ldr	r1, [r2, #0]
 8004c5e:	1850      	adds	r0, r2, r1
 8004c60:	42a0      	cmp	r0, r4
 8004c62:	d10b      	bne.n	8004c7c <_free_r+0x6c>
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	4401      	add	r1, r0
 8004c68:	1850      	adds	r0, r2, r1
 8004c6a:	4283      	cmp	r3, r0
 8004c6c:	6011      	str	r1, [r2, #0]
 8004c6e:	d1e0      	bne.n	8004c32 <_free_r+0x22>
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	6053      	str	r3, [r2, #4]
 8004c76:	4408      	add	r0, r1
 8004c78:	6010      	str	r0, [r2, #0]
 8004c7a:	e7da      	b.n	8004c32 <_free_r+0x22>
 8004c7c:	d902      	bls.n	8004c84 <_free_r+0x74>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	602b      	str	r3, [r5, #0]
 8004c82:	e7d6      	b.n	8004c32 <_free_r+0x22>
 8004c84:	6820      	ldr	r0, [r4, #0]
 8004c86:	1821      	adds	r1, r4, r0
 8004c88:	428b      	cmp	r3, r1
 8004c8a:	bf04      	itt	eq
 8004c8c:	6819      	ldreq	r1, [r3, #0]
 8004c8e:	685b      	ldreq	r3, [r3, #4]
 8004c90:	6063      	str	r3, [r4, #4]
 8004c92:	bf04      	itt	eq
 8004c94:	1809      	addeq	r1, r1, r0
 8004c96:	6021      	streq	r1, [r4, #0]
 8004c98:	6054      	str	r4, [r2, #4]
 8004c9a:	e7ca      	b.n	8004c32 <_free_r+0x22>
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000448 	.word	0x20000448

08004ca4 <sbrk_aligned>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	4e0f      	ldr	r6, [pc, #60]	@ (8004ce4 <sbrk_aligned+0x40>)
 8004ca8:	460c      	mov	r4, r1
 8004caa:	6831      	ldr	r1, [r6, #0]
 8004cac:	4605      	mov	r5, r0
 8004cae:	b911      	cbnz	r1, 8004cb6 <sbrk_aligned+0x12>
 8004cb0:	f000 fcb6 	bl	8005620 <_sbrk_r>
 8004cb4:	6030      	str	r0, [r6, #0]
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 fcb1 	bl	8005620 <_sbrk_r>
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	d103      	bne.n	8004cca <sbrk_aligned+0x26>
 8004cc2:	f04f 34ff 	mov.w	r4, #4294967295
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	bd70      	pop	{r4, r5, r6, pc}
 8004cca:	1cc4      	adds	r4, r0, #3
 8004ccc:	f024 0403 	bic.w	r4, r4, #3
 8004cd0:	42a0      	cmp	r0, r4
 8004cd2:	d0f8      	beq.n	8004cc6 <sbrk_aligned+0x22>
 8004cd4:	1a21      	subs	r1, r4, r0
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 fca2 	bl	8005620 <_sbrk_r>
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d1f2      	bne.n	8004cc6 <sbrk_aligned+0x22>
 8004ce0:	e7ef      	b.n	8004cc2 <sbrk_aligned+0x1e>
 8004ce2:	bf00      	nop
 8004ce4:	20000444 	.word	0x20000444

08004ce8 <_malloc_r>:
 8004ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cec:	1ccd      	adds	r5, r1, #3
 8004cee:	f025 0503 	bic.w	r5, r5, #3
 8004cf2:	3508      	adds	r5, #8
 8004cf4:	2d0c      	cmp	r5, #12
 8004cf6:	bf38      	it	cc
 8004cf8:	250c      	movcc	r5, #12
 8004cfa:	2d00      	cmp	r5, #0
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	db01      	blt.n	8004d04 <_malloc_r+0x1c>
 8004d00:	42a9      	cmp	r1, r5
 8004d02:	d904      	bls.n	8004d0e <_malloc_r+0x26>
 8004d04:	230c      	movs	r3, #12
 8004d06:	6033      	str	r3, [r6, #0]
 8004d08:	2000      	movs	r0, #0
 8004d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004de4 <_malloc_r+0xfc>
 8004d12:	f000 f869 	bl	8004de8 <__malloc_lock>
 8004d16:	f8d8 3000 	ldr.w	r3, [r8]
 8004d1a:	461c      	mov	r4, r3
 8004d1c:	bb44      	cbnz	r4, 8004d70 <_malloc_r+0x88>
 8004d1e:	4629      	mov	r1, r5
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff ffbf 	bl	8004ca4 <sbrk_aligned>
 8004d26:	1c43      	adds	r3, r0, #1
 8004d28:	4604      	mov	r4, r0
 8004d2a:	d158      	bne.n	8004dde <_malloc_r+0xf6>
 8004d2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d30:	4627      	mov	r7, r4
 8004d32:	2f00      	cmp	r7, #0
 8004d34:	d143      	bne.n	8004dbe <_malloc_r+0xd6>
 8004d36:	2c00      	cmp	r4, #0
 8004d38:	d04b      	beq.n	8004dd2 <_malloc_r+0xea>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	4639      	mov	r1, r7
 8004d3e:	4630      	mov	r0, r6
 8004d40:	eb04 0903 	add.w	r9, r4, r3
 8004d44:	f000 fc6c 	bl	8005620 <_sbrk_r>
 8004d48:	4581      	cmp	r9, r0
 8004d4a:	d142      	bne.n	8004dd2 <_malloc_r+0xea>
 8004d4c:	6821      	ldr	r1, [r4, #0]
 8004d4e:	1a6d      	subs	r5, r5, r1
 8004d50:	4629      	mov	r1, r5
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7ff ffa6 	bl	8004ca4 <sbrk_aligned>
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d03a      	beq.n	8004dd2 <_malloc_r+0xea>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	442b      	add	r3, r5
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	f8d8 3000 	ldr.w	r3, [r8]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	bb62      	cbnz	r2, 8004dc4 <_malloc_r+0xdc>
 8004d6a:	f8c8 7000 	str.w	r7, [r8]
 8004d6e:	e00f      	b.n	8004d90 <_malloc_r+0xa8>
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	1b52      	subs	r2, r2, r5
 8004d74:	d420      	bmi.n	8004db8 <_malloc_r+0xd0>
 8004d76:	2a0b      	cmp	r2, #11
 8004d78:	d917      	bls.n	8004daa <_malloc_r+0xc2>
 8004d7a:	1961      	adds	r1, r4, r5
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	6025      	str	r5, [r4, #0]
 8004d80:	bf18      	it	ne
 8004d82:	6059      	strne	r1, [r3, #4]
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	bf08      	it	eq
 8004d88:	f8c8 1000 	streq.w	r1, [r8]
 8004d8c:	5162      	str	r2, [r4, r5]
 8004d8e:	604b      	str	r3, [r1, #4]
 8004d90:	4630      	mov	r0, r6
 8004d92:	f000 f82f 	bl	8004df4 <__malloc_unlock>
 8004d96:	f104 000b 	add.w	r0, r4, #11
 8004d9a:	1d23      	adds	r3, r4, #4
 8004d9c:	f020 0007 	bic.w	r0, r0, #7
 8004da0:	1ac2      	subs	r2, r0, r3
 8004da2:	bf1c      	itt	ne
 8004da4:	1a1b      	subne	r3, r3, r0
 8004da6:	50a3      	strne	r3, [r4, r2]
 8004da8:	e7af      	b.n	8004d0a <_malloc_r+0x22>
 8004daa:	6862      	ldr	r2, [r4, #4]
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	bf0c      	ite	eq
 8004db0:	f8c8 2000 	streq.w	r2, [r8]
 8004db4:	605a      	strne	r2, [r3, #4]
 8004db6:	e7eb      	b.n	8004d90 <_malloc_r+0xa8>
 8004db8:	4623      	mov	r3, r4
 8004dba:	6864      	ldr	r4, [r4, #4]
 8004dbc:	e7ae      	b.n	8004d1c <_malloc_r+0x34>
 8004dbe:	463c      	mov	r4, r7
 8004dc0:	687f      	ldr	r7, [r7, #4]
 8004dc2:	e7b6      	b.n	8004d32 <_malloc_r+0x4a>
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	d1fb      	bne.n	8004dc4 <_malloc_r+0xdc>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6053      	str	r3, [r2, #4]
 8004dd0:	e7de      	b.n	8004d90 <_malloc_r+0xa8>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	6033      	str	r3, [r6, #0]
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f000 f80c 	bl	8004df4 <__malloc_unlock>
 8004ddc:	e794      	b.n	8004d08 <_malloc_r+0x20>
 8004dde:	6005      	str	r5, [r0, #0]
 8004de0:	e7d6      	b.n	8004d90 <_malloc_r+0xa8>
 8004de2:	bf00      	nop
 8004de4:	20000448 	.word	0x20000448

08004de8 <__malloc_lock>:
 8004de8:	4801      	ldr	r0, [pc, #4]	@ (8004df0 <__malloc_lock+0x8>)
 8004dea:	f7ff bf0e 	b.w	8004c0a <__retarget_lock_acquire_recursive>
 8004dee:	bf00      	nop
 8004df0:	20000440 	.word	0x20000440

08004df4 <__malloc_unlock>:
 8004df4:	4801      	ldr	r0, [pc, #4]	@ (8004dfc <__malloc_unlock+0x8>)
 8004df6:	f7ff bf09 	b.w	8004c0c <__retarget_lock_release_recursive>
 8004dfa:	bf00      	nop
 8004dfc:	20000440 	.word	0x20000440

08004e00 <__sfputc_r>:
 8004e00:	6893      	ldr	r3, [r2, #8]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	b410      	push	{r4}
 8004e08:	6093      	str	r3, [r2, #8]
 8004e0a:	da08      	bge.n	8004e1e <__sfputc_r+0x1e>
 8004e0c:	6994      	ldr	r4, [r2, #24]
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	db01      	blt.n	8004e16 <__sfputc_r+0x16>
 8004e12:	290a      	cmp	r1, #10
 8004e14:	d103      	bne.n	8004e1e <__sfputc_r+0x1e>
 8004e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e1a:	f000 bb6d 	b.w	80054f8 <__swbuf_r>
 8004e1e:	6813      	ldr	r3, [r2, #0]
 8004e20:	1c58      	adds	r0, r3, #1
 8004e22:	6010      	str	r0, [r2, #0]
 8004e24:	7019      	strb	r1, [r3, #0]
 8004e26:	4608      	mov	r0, r1
 8004e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <__sfputs_r>:
 8004e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e30:	4606      	mov	r6, r0
 8004e32:	460f      	mov	r7, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	18d5      	adds	r5, r2, r3
 8004e38:	42ac      	cmp	r4, r5
 8004e3a:	d101      	bne.n	8004e40 <__sfputs_r+0x12>
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	e007      	b.n	8004e50 <__sfputs_r+0x22>
 8004e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e44:	463a      	mov	r2, r7
 8004e46:	4630      	mov	r0, r6
 8004e48:	f7ff ffda 	bl	8004e00 <__sfputc_r>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d1f3      	bne.n	8004e38 <__sfputs_r+0xa>
 8004e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e54 <_vfiprintf_r>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	460d      	mov	r5, r1
 8004e5a:	b09d      	sub	sp, #116	@ 0x74
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	4698      	mov	r8, r3
 8004e60:	4606      	mov	r6, r0
 8004e62:	b118      	cbz	r0, 8004e6c <_vfiprintf_r+0x18>
 8004e64:	6a03      	ldr	r3, [r0, #32]
 8004e66:	b90b      	cbnz	r3, 8004e6c <_vfiprintf_r+0x18>
 8004e68:	f7ff fdca 	bl	8004a00 <__sinit>
 8004e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e6e:	07d9      	lsls	r1, r3, #31
 8004e70:	d405      	bmi.n	8004e7e <_vfiprintf_r+0x2a>
 8004e72:	89ab      	ldrh	r3, [r5, #12]
 8004e74:	059a      	lsls	r2, r3, #22
 8004e76:	d402      	bmi.n	8004e7e <_vfiprintf_r+0x2a>
 8004e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e7a:	f7ff fec6 	bl	8004c0a <__retarget_lock_acquire_recursive>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	d501      	bpl.n	8004e88 <_vfiprintf_r+0x34>
 8004e84:	692b      	ldr	r3, [r5, #16]
 8004e86:	b99b      	cbnz	r3, 8004eb0 <_vfiprintf_r+0x5c>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f000 fb72 	bl	8005574 <__swsetup_r>
 8004e90:	b170      	cbz	r0, 8004eb0 <_vfiprintf_r+0x5c>
 8004e92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e94:	07dc      	lsls	r4, r3, #31
 8004e96:	d504      	bpl.n	8004ea2 <_vfiprintf_r+0x4e>
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	b01d      	add	sp, #116	@ 0x74
 8004e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea2:	89ab      	ldrh	r3, [r5, #12]
 8004ea4:	0598      	lsls	r0, r3, #22
 8004ea6:	d4f7      	bmi.n	8004e98 <_vfiprintf_r+0x44>
 8004ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004eaa:	f7ff feaf 	bl	8004c0c <__retarget_lock_release_recursive>
 8004eae:	e7f3      	b.n	8004e98 <_vfiprintf_r+0x44>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ebe:	2330      	movs	r3, #48	@ 0x30
 8004ec0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005070 <_vfiprintf_r+0x21c>
 8004ec4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ec8:	f04f 0901 	mov.w	r9, #1
 8004ecc:	4623      	mov	r3, r4
 8004ece:	469a      	mov	sl, r3
 8004ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ed4:	b10a      	cbz	r2, 8004eda <_vfiprintf_r+0x86>
 8004ed6:	2a25      	cmp	r2, #37	@ 0x25
 8004ed8:	d1f9      	bne.n	8004ece <_vfiprintf_r+0x7a>
 8004eda:	ebba 0b04 	subs.w	fp, sl, r4
 8004ede:	d00b      	beq.n	8004ef8 <_vfiprintf_r+0xa4>
 8004ee0:	465b      	mov	r3, fp
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f7ff ffa1 	bl	8004e2e <__sfputs_r>
 8004eec:	3001      	adds	r0, #1
 8004eee:	f000 80a7 	beq.w	8005040 <_vfiprintf_r+0x1ec>
 8004ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ef4:	445a      	add	r2, fp
 8004ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 809f 	beq.w	8005040 <_vfiprintf_r+0x1ec>
 8004f02:	2300      	movs	r3, #0
 8004f04:	f04f 32ff 	mov.w	r2, #4294967295
 8004f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f0c:	f10a 0a01 	add.w	sl, sl, #1
 8004f10:	9304      	str	r3, [sp, #16]
 8004f12:	9307      	str	r3, [sp, #28]
 8004f14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f18:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f1a:	4654      	mov	r4, sl
 8004f1c:	2205      	movs	r2, #5
 8004f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f22:	4853      	ldr	r0, [pc, #332]	@ (8005070 <_vfiprintf_r+0x21c>)
 8004f24:	f7fb f974 	bl	8000210 <memchr>
 8004f28:	9a04      	ldr	r2, [sp, #16]
 8004f2a:	b9d8      	cbnz	r0, 8004f64 <_vfiprintf_r+0x110>
 8004f2c:	06d1      	lsls	r1, r2, #27
 8004f2e:	bf44      	itt	mi
 8004f30:	2320      	movmi	r3, #32
 8004f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f36:	0713      	lsls	r3, r2, #28
 8004f38:	bf44      	itt	mi
 8004f3a:	232b      	movmi	r3, #43	@ 0x2b
 8004f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f40:	f89a 3000 	ldrb.w	r3, [sl]
 8004f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f46:	d015      	beq.n	8004f74 <_vfiprintf_r+0x120>
 8004f48:	9a07      	ldr	r2, [sp, #28]
 8004f4a:	4654      	mov	r4, sl
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f04f 0c0a 	mov.w	ip, #10
 8004f52:	4621      	mov	r1, r4
 8004f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f58:	3b30      	subs	r3, #48	@ 0x30
 8004f5a:	2b09      	cmp	r3, #9
 8004f5c:	d94b      	bls.n	8004ff6 <_vfiprintf_r+0x1a2>
 8004f5e:	b1b0      	cbz	r0, 8004f8e <_vfiprintf_r+0x13a>
 8004f60:	9207      	str	r2, [sp, #28]
 8004f62:	e014      	b.n	8004f8e <_vfiprintf_r+0x13a>
 8004f64:	eba0 0308 	sub.w	r3, r0, r8
 8004f68:	fa09 f303 	lsl.w	r3, r9, r3
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	9304      	str	r3, [sp, #16]
 8004f70:	46a2      	mov	sl, r4
 8004f72:	e7d2      	b.n	8004f1a <_vfiprintf_r+0xc6>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	1d19      	adds	r1, r3, #4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	9103      	str	r1, [sp, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bfbb      	ittet	lt
 8004f80:	425b      	neglt	r3, r3
 8004f82:	f042 0202 	orrlt.w	r2, r2, #2
 8004f86:	9307      	strge	r3, [sp, #28]
 8004f88:	9307      	strlt	r3, [sp, #28]
 8004f8a:	bfb8      	it	lt
 8004f8c:	9204      	strlt	r2, [sp, #16]
 8004f8e:	7823      	ldrb	r3, [r4, #0]
 8004f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f92:	d10a      	bne.n	8004faa <_vfiprintf_r+0x156>
 8004f94:	7863      	ldrb	r3, [r4, #1]
 8004f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f98:	d132      	bne.n	8005000 <_vfiprintf_r+0x1ac>
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	1d1a      	adds	r2, r3, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	9203      	str	r2, [sp, #12]
 8004fa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fa6:	3402      	adds	r4, #2
 8004fa8:	9305      	str	r3, [sp, #20]
 8004faa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005080 <_vfiprintf_r+0x22c>
 8004fae:	7821      	ldrb	r1, [r4, #0]
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	f7fb f92c 	bl	8000210 <memchr>
 8004fb8:	b138      	cbz	r0, 8004fca <_vfiprintf_r+0x176>
 8004fba:	9b04      	ldr	r3, [sp, #16]
 8004fbc:	eba0 000a 	sub.w	r0, r0, sl
 8004fc0:	2240      	movs	r2, #64	@ 0x40
 8004fc2:	4082      	lsls	r2, r0
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	3401      	adds	r4, #1
 8004fc8:	9304      	str	r3, [sp, #16]
 8004fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fce:	4829      	ldr	r0, [pc, #164]	@ (8005074 <_vfiprintf_r+0x220>)
 8004fd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fd4:	2206      	movs	r2, #6
 8004fd6:	f7fb f91b 	bl	8000210 <memchr>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d03f      	beq.n	800505e <_vfiprintf_r+0x20a>
 8004fde:	4b26      	ldr	r3, [pc, #152]	@ (8005078 <_vfiprintf_r+0x224>)
 8004fe0:	bb1b      	cbnz	r3, 800502a <_vfiprintf_r+0x1d6>
 8004fe2:	9b03      	ldr	r3, [sp, #12]
 8004fe4:	3307      	adds	r3, #7
 8004fe6:	f023 0307 	bic.w	r3, r3, #7
 8004fea:	3308      	adds	r3, #8
 8004fec:	9303      	str	r3, [sp, #12]
 8004fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ff0:	443b      	add	r3, r7
 8004ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ff4:	e76a      	b.n	8004ecc <_vfiprintf_r+0x78>
 8004ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	e7a8      	b.n	8004f52 <_vfiprintf_r+0xfe>
 8005000:	2300      	movs	r3, #0
 8005002:	3401      	adds	r4, #1
 8005004:	9305      	str	r3, [sp, #20]
 8005006:	4619      	mov	r1, r3
 8005008:	f04f 0c0a 	mov.w	ip, #10
 800500c:	4620      	mov	r0, r4
 800500e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005012:	3a30      	subs	r2, #48	@ 0x30
 8005014:	2a09      	cmp	r2, #9
 8005016:	d903      	bls.n	8005020 <_vfiprintf_r+0x1cc>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0c6      	beq.n	8004faa <_vfiprintf_r+0x156>
 800501c:	9105      	str	r1, [sp, #20]
 800501e:	e7c4      	b.n	8004faa <_vfiprintf_r+0x156>
 8005020:	fb0c 2101 	mla	r1, ip, r1, r2
 8005024:	4604      	mov	r4, r0
 8005026:	2301      	movs	r3, #1
 8005028:	e7f0      	b.n	800500c <_vfiprintf_r+0x1b8>
 800502a:	ab03      	add	r3, sp, #12
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	462a      	mov	r2, r5
 8005030:	4b12      	ldr	r3, [pc, #72]	@ (800507c <_vfiprintf_r+0x228>)
 8005032:	a904      	add	r1, sp, #16
 8005034:	4630      	mov	r0, r6
 8005036:	f3af 8000 	nop.w
 800503a:	4607      	mov	r7, r0
 800503c:	1c78      	adds	r0, r7, #1
 800503e:	d1d6      	bne.n	8004fee <_vfiprintf_r+0x19a>
 8005040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005042:	07d9      	lsls	r1, r3, #31
 8005044:	d405      	bmi.n	8005052 <_vfiprintf_r+0x1fe>
 8005046:	89ab      	ldrh	r3, [r5, #12]
 8005048:	059a      	lsls	r2, r3, #22
 800504a:	d402      	bmi.n	8005052 <_vfiprintf_r+0x1fe>
 800504c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800504e:	f7ff fddd 	bl	8004c0c <__retarget_lock_release_recursive>
 8005052:	89ab      	ldrh	r3, [r5, #12]
 8005054:	065b      	lsls	r3, r3, #25
 8005056:	f53f af1f 	bmi.w	8004e98 <_vfiprintf_r+0x44>
 800505a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800505c:	e71e      	b.n	8004e9c <_vfiprintf_r+0x48>
 800505e:	ab03      	add	r3, sp, #12
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	462a      	mov	r2, r5
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <_vfiprintf_r+0x228>)
 8005066:	a904      	add	r1, sp, #16
 8005068:	4630      	mov	r0, r6
 800506a:	f000 f879 	bl	8005160 <_printf_i>
 800506e:	e7e4      	b.n	800503a <_vfiprintf_r+0x1e6>
 8005070:	0800578c 	.word	0x0800578c
 8005074:	08005796 	.word	0x08005796
 8005078:	00000000 	.word	0x00000000
 800507c:	08004e2f 	.word	0x08004e2f
 8005080:	08005792 	.word	0x08005792

08005084 <_printf_common>:
 8005084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	4616      	mov	r6, r2
 800508a:	4698      	mov	r8, r3
 800508c:	688a      	ldr	r2, [r1, #8]
 800508e:	690b      	ldr	r3, [r1, #16]
 8005090:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005094:	4293      	cmp	r3, r2
 8005096:	bfb8      	it	lt
 8005098:	4613      	movlt	r3, r2
 800509a:	6033      	str	r3, [r6, #0]
 800509c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050a0:	4607      	mov	r7, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	b10a      	cbz	r2, 80050aa <_printf_common+0x26>
 80050a6:	3301      	adds	r3, #1
 80050a8:	6033      	str	r3, [r6, #0]
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	0699      	lsls	r1, r3, #26
 80050ae:	bf42      	ittt	mi
 80050b0:	6833      	ldrmi	r3, [r6, #0]
 80050b2:	3302      	addmi	r3, #2
 80050b4:	6033      	strmi	r3, [r6, #0]
 80050b6:	6825      	ldr	r5, [r4, #0]
 80050b8:	f015 0506 	ands.w	r5, r5, #6
 80050bc:	d106      	bne.n	80050cc <_printf_common+0x48>
 80050be:	f104 0a19 	add.w	sl, r4, #25
 80050c2:	68e3      	ldr	r3, [r4, #12]
 80050c4:	6832      	ldr	r2, [r6, #0]
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	42ab      	cmp	r3, r5
 80050ca:	dc26      	bgt.n	800511a <_printf_common+0x96>
 80050cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050d0:	6822      	ldr	r2, [r4, #0]
 80050d2:	3b00      	subs	r3, #0
 80050d4:	bf18      	it	ne
 80050d6:	2301      	movne	r3, #1
 80050d8:	0692      	lsls	r2, r2, #26
 80050da:	d42b      	bmi.n	8005134 <_printf_common+0xb0>
 80050dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050e0:	4641      	mov	r1, r8
 80050e2:	4638      	mov	r0, r7
 80050e4:	47c8      	blx	r9
 80050e6:	3001      	adds	r0, #1
 80050e8:	d01e      	beq.n	8005128 <_printf_common+0xa4>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	6922      	ldr	r2, [r4, #16]
 80050ee:	f003 0306 	and.w	r3, r3, #6
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	bf02      	ittt	eq
 80050f6:	68e5      	ldreq	r5, [r4, #12]
 80050f8:	6833      	ldreq	r3, [r6, #0]
 80050fa:	1aed      	subeq	r5, r5, r3
 80050fc:	68a3      	ldr	r3, [r4, #8]
 80050fe:	bf0c      	ite	eq
 8005100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005104:	2500      	movne	r5, #0
 8005106:	4293      	cmp	r3, r2
 8005108:	bfc4      	itt	gt
 800510a:	1a9b      	subgt	r3, r3, r2
 800510c:	18ed      	addgt	r5, r5, r3
 800510e:	2600      	movs	r6, #0
 8005110:	341a      	adds	r4, #26
 8005112:	42b5      	cmp	r5, r6
 8005114:	d11a      	bne.n	800514c <_printf_common+0xc8>
 8005116:	2000      	movs	r0, #0
 8005118:	e008      	b.n	800512c <_printf_common+0xa8>
 800511a:	2301      	movs	r3, #1
 800511c:	4652      	mov	r2, sl
 800511e:	4641      	mov	r1, r8
 8005120:	4638      	mov	r0, r7
 8005122:	47c8      	blx	r9
 8005124:	3001      	adds	r0, #1
 8005126:	d103      	bne.n	8005130 <_printf_common+0xac>
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005130:	3501      	adds	r5, #1
 8005132:	e7c6      	b.n	80050c2 <_printf_common+0x3e>
 8005134:	18e1      	adds	r1, r4, r3
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	2030      	movs	r0, #48	@ 0x30
 800513a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800513e:	4422      	add	r2, r4
 8005140:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005144:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005148:	3302      	adds	r3, #2
 800514a:	e7c7      	b.n	80050dc <_printf_common+0x58>
 800514c:	2301      	movs	r3, #1
 800514e:	4622      	mov	r2, r4
 8005150:	4641      	mov	r1, r8
 8005152:	4638      	mov	r0, r7
 8005154:	47c8      	blx	r9
 8005156:	3001      	adds	r0, #1
 8005158:	d0e6      	beq.n	8005128 <_printf_common+0xa4>
 800515a:	3601      	adds	r6, #1
 800515c:	e7d9      	b.n	8005112 <_printf_common+0x8e>
	...

08005160 <_printf_i>:
 8005160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	7e0f      	ldrb	r7, [r1, #24]
 8005166:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005168:	2f78      	cmp	r7, #120	@ 0x78
 800516a:	4691      	mov	r9, r2
 800516c:	4680      	mov	r8, r0
 800516e:	460c      	mov	r4, r1
 8005170:	469a      	mov	sl, r3
 8005172:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005176:	d807      	bhi.n	8005188 <_printf_i+0x28>
 8005178:	2f62      	cmp	r7, #98	@ 0x62
 800517a:	d80a      	bhi.n	8005192 <_printf_i+0x32>
 800517c:	2f00      	cmp	r7, #0
 800517e:	f000 80d2 	beq.w	8005326 <_printf_i+0x1c6>
 8005182:	2f58      	cmp	r7, #88	@ 0x58
 8005184:	f000 80b9 	beq.w	80052fa <_printf_i+0x19a>
 8005188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800518c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005190:	e03a      	b.n	8005208 <_printf_i+0xa8>
 8005192:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005196:	2b15      	cmp	r3, #21
 8005198:	d8f6      	bhi.n	8005188 <_printf_i+0x28>
 800519a:	a101      	add	r1, pc, #4	@ (adr r1, 80051a0 <_printf_i+0x40>)
 800519c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051a0:	080051f9 	.word	0x080051f9
 80051a4:	0800520d 	.word	0x0800520d
 80051a8:	08005189 	.word	0x08005189
 80051ac:	08005189 	.word	0x08005189
 80051b0:	08005189 	.word	0x08005189
 80051b4:	08005189 	.word	0x08005189
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	08005189 	.word	0x08005189
 80051c0:	08005189 	.word	0x08005189
 80051c4:	08005189 	.word	0x08005189
 80051c8:	08005189 	.word	0x08005189
 80051cc:	0800530d 	.word	0x0800530d
 80051d0:	08005237 	.word	0x08005237
 80051d4:	080052c7 	.word	0x080052c7
 80051d8:	08005189 	.word	0x08005189
 80051dc:	08005189 	.word	0x08005189
 80051e0:	0800532f 	.word	0x0800532f
 80051e4:	08005189 	.word	0x08005189
 80051e8:	08005237 	.word	0x08005237
 80051ec:	08005189 	.word	0x08005189
 80051f0:	08005189 	.word	0x08005189
 80051f4:	080052cf 	.word	0x080052cf
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	1d1a      	adds	r2, r3, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6032      	str	r2, [r6, #0]
 8005200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005204:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005208:	2301      	movs	r3, #1
 800520a:	e09d      	b.n	8005348 <_printf_i+0x1e8>
 800520c:	6833      	ldr	r3, [r6, #0]
 800520e:	6820      	ldr	r0, [r4, #0]
 8005210:	1d19      	adds	r1, r3, #4
 8005212:	6031      	str	r1, [r6, #0]
 8005214:	0606      	lsls	r6, r0, #24
 8005216:	d501      	bpl.n	800521c <_printf_i+0xbc>
 8005218:	681d      	ldr	r5, [r3, #0]
 800521a:	e003      	b.n	8005224 <_printf_i+0xc4>
 800521c:	0645      	lsls	r5, r0, #25
 800521e:	d5fb      	bpl.n	8005218 <_printf_i+0xb8>
 8005220:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005224:	2d00      	cmp	r5, #0
 8005226:	da03      	bge.n	8005230 <_printf_i+0xd0>
 8005228:	232d      	movs	r3, #45	@ 0x2d
 800522a:	426d      	negs	r5, r5
 800522c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005230:	4859      	ldr	r0, [pc, #356]	@ (8005398 <_printf_i+0x238>)
 8005232:	230a      	movs	r3, #10
 8005234:	e011      	b.n	800525a <_printf_i+0xfa>
 8005236:	6821      	ldr	r1, [r4, #0]
 8005238:	6833      	ldr	r3, [r6, #0]
 800523a:	0608      	lsls	r0, r1, #24
 800523c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005240:	d402      	bmi.n	8005248 <_printf_i+0xe8>
 8005242:	0649      	lsls	r1, r1, #25
 8005244:	bf48      	it	mi
 8005246:	b2ad      	uxthmi	r5, r5
 8005248:	2f6f      	cmp	r7, #111	@ 0x6f
 800524a:	4853      	ldr	r0, [pc, #332]	@ (8005398 <_printf_i+0x238>)
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	bf14      	ite	ne
 8005250:	230a      	movne	r3, #10
 8005252:	2308      	moveq	r3, #8
 8005254:	2100      	movs	r1, #0
 8005256:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800525a:	6866      	ldr	r6, [r4, #4]
 800525c:	60a6      	str	r6, [r4, #8]
 800525e:	2e00      	cmp	r6, #0
 8005260:	bfa2      	ittt	ge
 8005262:	6821      	ldrge	r1, [r4, #0]
 8005264:	f021 0104 	bicge.w	r1, r1, #4
 8005268:	6021      	strge	r1, [r4, #0]
 800526a:	b90d      	cbnz	r5, 8005270 <_printf_i+0x110>
 800526c:	2e00      	cmp	r6, #0
 800526e:	d04b      	beq.n	8005308 <_printf_i+0x1a8>
 8005270:	4616      	mov	r6, r2
 8005272:	fbb5 f1f3 	udiv	r1, r5, r3
 8005276:	fb03 5711 	mls	r7, r3, r1, r5
 800527a:	5dc7      	ldrb	r7, [r0, r7]
 800527c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005280:	462f      	mov	r7, r5
 8005282:	42bb      	cmp	r3, r7
 8005284:	460d      	mov	r5, r1
 8005286:	d9f4      	bls.n	8005272 <_printf_i+0x112>
 8005288:	2b08      	cmp	r3, #8
 800528a:	d10b      	bne.n	80052a4 <_printf_i+0x144>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	07df      	lsls	r7, r3, #31
 8005290:	d508      	bpl.n	80052a4 <_printf_i+0x144>
 8005292:	6923      	ldr	r3, [r4, #16]
 8005294:	6861      	ldr	r1, [r4, #4]
 8005296:	4299      	cmp	r1, r3
 8005298:	bfde      	ittt	le
 800529a:	2330      	movle	r3, #48	@ 0x30
 800529c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052a4:	1b92      	subs	r2, r2, r6
 80052a6:	6122      	str	r2, [r4, #16]
 80052a8:	f8cd a000 	str.w	sl, [sp]
 80052ac:	464b      	mov	r3, r9
 80052ae:	aa03      	add	r2, sp, #12
 80052b0:	4621      	mov	r1, r4
 80052b2:	4640      	mov	r0, r8
 80052b4:	f7ff fee6 	bl	8005084 <_printf_common>
 80052b8:	3001      	adds	r0, #1
 80052ba:	d14a      	bne.n	8005352 <_printf_i+0x1f2>
 80052bc:	f04f 30ff 	mov.w	r0, #4294967295
 80052c0:	b004      	add	sp, #16
 80052c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	f043 0320 	orr.w	r3, r3, #32
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	4833      	ldr	r0, [pc, #204]	@ (800539c <_printf_i+0x23c>)
 80052d0:	2778      	movs	r7, #120	@ 0x78
 80052d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	6831      	ldr	r1, [r6, #0]
 80052da:	061f      	lsls	r7, r3, #24
 80052dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80052e0:	d402      	bmi.n	80052e8 <_printf_i+0x188>
 80052e2:	065f      	lsls	r7, r3, #25
 80052e4:	bf48      	it	mi
 80052e6:	b2ad      	uxthmi	r5, r5
 80052e8:	6031      	str	r1, [r6, #0]
 80052ea:	07d9      	lsls	r1, r3, #31
 80052ec:	bf44      	itt	mi
 80052ee:	f043 0320 	orrmi.w	r3, r3, #32
 80052f2:	6023      	strmi	r3, [r4, #0]
 80052f4:	b11d      	cbz	r5, 80052fe <_printf_i+0x19e>
 80052f6:	2310      	movs	r3, #16
 80052f8:	e7ac      	b.n	8005254 <_printf_i+0xf4>
 80052fa:	4827      	ldr	r0, [pc, #156]	@ (8005398 <_printf_i+0x238>)
 80052fc:	e7e9      	b.n	80052d2 <_printf_i+0x172>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f023 0320 	bic.w	r3, r3, #32
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	e7f6      	b.n	80052f6 <_printf_i+0x196>
 8005308:	4616      	mov	r6, r2
 800530a:	e7bd      	b.n	8005288 <_printf_i+0x128>
 800530c:	6833      	ldr	r3, [r6, #0]
 800530e:	6825      	ldr	r5, [r4, #0]
 8005310:	6961      	ldr	r1, [r4, #20]
 8005312:	1d18      	adds	r0, r3, #4
 8005314:	6030      	str	r0, [r6, #0]
 8005316:	062e      	lsls	r6, r5, #24
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	d501      	bpl.n	8005320 <_printf_i+0x1c0>
 800531c:	6019      	str	r1, [r3, #0]
 800531e:	e002      	b.n	8005326 <_printf_i+0x1c6>
 8005320:	0668      	lsls	r0, r5, #25
 8005322:	d5fb      	bpl.n	800531c <_printf_i+0x1bc>
 8005324:	8019      	strh	r1, [r3, #0]
 8005326:	2300      	movs	r3, #0
 8005328:	6123      	str	r3, [r4, #16]
 800532a:	4616      	mov	r6, r2
 800532c:	e7bc      	b.n	80052a8 <_printf_i+0x148>
 800532e:	6833      	ldr	r3, [r6, #0]
 8005330:	1d1a      	adds	r2, r3, #4
 8005332:	6032      	str	r2, [r6, #0]
 8005334:	681e      	ldr	r6, [r3, #0]
 8005336:	6862      	ldr	r2, [r4, #4]
 8005338:	2100      	movs	r1, #0
 800533a:	4630      	mov	r0, r6
 800533c:	f7fa ff68 	bl	8000210 <memchr>
 8005340:	b108      	cbz	r0, 8005346 <_printf_i+0x1e6>
 8005342:	1b80      	subs	r0, r0, r6
 8005344:	6060      	str	r0, [r4, #4]
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	6123      	str	r3, [r4, #16]
 800534a:	2300      	movs	r3, #0
 800534c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005350:	e7aa      	b.n	80052a8 <_printf_i+0x148>
 8005352:	6923      	ldr	r3, [r4, #16]
 8005354:	4632      	mov	r2, r6
 8005356:	4649      	mov	r1, r9
 8005358:	4640      	mov	r0, r8
 800535a:	47d0      	blx	sl
 800535c:	3001      	adds	r0, #1
 800535e:	d0ad      	beq.n	80052bc <_printf_i+0x15c>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	079b      	lsls	r3, r3, #30
 8005364:	d413      	bmi.n	800538e <_printf_i+0x22e>
 8005366:	68e0      	ldr	r0, [r4, #12]
 8005368:	9b03      	ldr	r3, [sp, #12]
 800536a:	4298      	cmp	r0, r3
 800536c:	bfb8      	it	lt
 800536e:	4618      	movlt	r0, r3
 8005370:	e7a6      	b.n	80052c0 <_printf_i+0x160>
 8005372:	2301      	movs	r3, #1
 8005374:	4632      	mov	r2, r6
 8005376:	4649      	mov	r1, r9
 8005378:	4640      	mov	r0, r8
 800537a:	47d0      	blx	sl
 800537c:	3001      	adds	r0, #1
 800537e:	d09d      	beq.n	80052bc <_printf_i+0x15c>
 8005380:	3501      	adds	r5, #1
 8005382:	68e3      	ldr	r3, [r4, #12]
 8005384:	9903      	ldr	r1, [sp, #12]
 8005386:	1a5b      	subs	r3, r3, r1
 8005388:	42ab      	cmp	r3, r5
 800538a:	dcf2      	bgt.n	8005372 <_printf_i+0x212>
 800538c:	e7eb      	b.n	8005366 <_printf_i+0x206>
 800538e:	2500      	movs	r5, #0
 8005390:	f104 0619 	add.w	r6, r4, #25
 8005394:	e7f5      	b.n	8005382 <_printf_i+0x222>
 8005396:	bf00      	nop
 8005398:	0800579d 	.word	0x0800579d
 800539c:	080057ae 	.word	0x080057ae

080053a0 <__sflush_r>:
 80053a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a8:	0716      	lsls	r6, r2, #28
 80053aa:	4605      	mov	r5, r0
 80053ac:	460c      	mov	r4, r1
 80053ae:	d454      	bmi.n	800545a <__sflush_r+0xba>
 80053b0:	684b      	ldr	r3, [r1, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	dc02      	bgt.n	80053bc <__sflush_r+0x1c>
 80053b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	dd48      	ble.n	800544e <__sflush_r+0xae>
 80053bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053be:	2e00      	cmp	r6, #0
 80053c0:	d045      	beq.n	800544e <__sflush_r+0xae>
 80053c2:	2300      	movs	r3, #0
 80053c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053c8:	682f      	ldr	r7, [r5, #0]
 80053ca:	6a21      	ldr	r1, [r4, #32]
 80053cc:	602b      	str	r3, [r5, #0]
 80053ce:	d030      	beq.n	8005432 <__sflush_r+0x92>
 80053d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	0759      	lsls	r1, r3, #29
 80053d6:	d505      	bpl.n	80053e4 <__sflush_r+0x44>
 80053d8:	6863      	ldr	r3, [r4, #4]
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053de:	b10b      	cbz	r3, 80053e4 <__sflush_r+0x44>
 80053e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053e2:	1ad2      	subs	r2, r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053e8:	6a21      	ldr	r1, [r4, #32]
 80053ea:	4628      	mov	r0, r5
 80053ec:	47b0      	blx	r6
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	d106      	bne.n	8005402 <__sflush_r+0x62>
 80053f4:	6829      	ldr	r1, [r5, #0]
 80053f6:	291d      	cmp	r1, #29
 80053f8:	d82b      	bhi.n	8005452 <__sflush_r+0xb2>
 80053fa:	4a2a      	ldr	r2, [pc, #168]	@ (80054a4 <__sflush_r+0x104>)
 80053fc:	410a      	asrs	r2, r1
 80053fe:	07d6      	lsls	r6, r2, #31
 8005400:	d427      	bmi.n	8005452 <__sflush_r+0xb2>
 8005402:	2200      	movs	r2, #0
 8005404:	6062      	str	r2, [r4, #4]
 8005406:	04d9      	lsls	r1, r3, #19
 8005408:	6922      	ldr	r2, [r4, #16]
 800540a:	6022      	str	r2, [r4, #0]
 800540c:	d504      	bpl.n	8005418 <__sflush_r+0x78>
 800540e:	1c42      	adds	r2, r0, #1
 8005410:	d101      	bne.n	8005416 <__sflush_r+0x76>
 8005412:	682b      	ldr	r3, [r5, #0]
 8005414:	b903      	cbnz	r3, 8005418 <__sflush_r+0x78>
 8005416:	6560      	str	r0, [r4, #84]	@ 0x54
 8005418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800541a:	602f      	str	r7, [r5, #0]
 800541c:	b1b9      	cbz	r1, 800544e <__sflush_r+0xae>
 800541e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005422:	4299      	cmp	r1, r3
 8005424:	d002      	beq.n	800542c <__sflush_r+0x8c>
 8005426:	4628      	mov	r0, r5
 8005428:	f7ff fbf2 	bl	8004c10 <_free_r>
 800542c:	2300      	movs	r3, #0
 800542e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005430:	e00d      	b.n	800544e <__sflush_r+0xae>
 8005432:	2301      	movs	r3, #1
 8005434:	4628      	mov	r0, r5
 8005436:	47b0      	blx	r6
 8005438:	4602      	mov	r2, r0
 800543a:	1c50      	adds	r0, r2, #1
 800543c:	d1c9      	bne.n	80053d2 <__sflush_r+0x32>
 800543e:	682b      	ldr	r3, [r5, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0c6      	beq.n	80053d2 <__sflush_r+0x32>
 8005444:	2b1d      	cmp	r3, #29
 8005446:	d001      	beq.n	800544c <__sflush_r+0xac>
 8005448:	2b16      	cmp	r3, #22
 800544a:	d11e      	bne.n	800548a <__sflush_r+0xea>
 800544c:	602f      	str	r7, [r5, #0]
 800544e:	2000      	movs	r0, #0
 8005450:	e022      	b.n	8005498 <__sflush_r+0xf8>
 8005452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005456:	b21b      	sxth	r3, r3
 8005458:	e01b      	b.n	8005492 <__sflush_r+0xf2>
 800545a:	690f      	ldr	r7, [r1, #16]
 800545c:	2f00      	cmp	r7, #0
 800545e:	d0f6      	beq.n	800544e <__sflush_r+0xae>
 8005460:	0793      	lsls	r3, r2, #30
 8005462:	680e      	ldr	r6, [r1, #0]
 8005464:	bf08      	it	eq
 8005466:	694b      	ldreq	r3, [r1, #20]
 8005468:	600f      	str	r7, [r1, #0]
 800546a:	bf18      	it	ne
 800546c:	2300      	movne	r3, #0
 800546e:	eba6 0807 	sub.w	r8, r6, r7
 8005472:	608b      	str	r3, [r1, #8]
 8005474:	f1b8 0f00 	cmp.w	r8, #0
 8005478:	dde9      	ble.n	800544e <__sflush_r+0xae>
 800547a:	6a21      	ldr	r1, [r4, #32]
 800547c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800547e:	4643      	mov	r3, r8
 8005480:	463a      	mov	r2, r7
 8005482:	4628      	mov	r0, r5
 8005484:	47b0      	blx	r6
 8005486:	2800      	cmp	r0, #0
 8005488:	dc08      	bgt.n	800549c <__sflush_r+0xfc>
 800548a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800548e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800549c:	4407      	add	r7, r0
 800549e:	eba8 0800 	sub.w	r8, r8, r0
 80054a2:	e7e7      	b.n	8005474 <__sflush_r+0xd4>
 80054a4:	dfbffffe 	.word	0xdfbffffe

080054a8 <_fflush_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	690b      	ldr	r3, [r1, #16]
 80054ac:	4605      	mov	r5, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	b913      	cbnz	r3, 80054b8 <_fflush_r+0x10>
 80054b2:	2500      	movs	r5, #0
 80054b4:	4628      	mov	r0, r5
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	b118      	cbz	r0, 80054c2 <_fflush_r+0x1a>
 80054ba:	6a03      	ldr	r3, [r0, #32]
 80054bc:	b90b      	cbnz	r3, 80054c2 <_fflush_r+0x1a>
 80054be:	f7ff fa9f 	bl	8004a00 <__sinit>
 80054c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f3      	beq.n	80054b2 <_fflush_r+0xa>
 80054ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054cc:	07d0      	lsls	r0, r2, #31
 80054ce:	d404      	bmi.n	80054da <_fflush_r+0x32>
 80054d0:	0599      	lsls	r1, r3, #22
 80054d2:	d402      	bmi.n	80054da <_fflush_r+0x32>
 80054d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054d6:	f7ff fb98 	bl	8004c0a <__retarget_lock_acquire_recursive>
 80054da:	4628      	mov	r0, r5
 80054dc:	4621      	mov	r1, r4
 80054de:	f7ff ff5f 	bl	80053a0 <__sflush_r>
 80054e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054e4:	07da      	lsls	r2, r3, #31
 80054e6:	4605      	mov	r5, r0
 80054e8:	d4e4      	bmi.n	80054b4 <_fflush_r+0xc>
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	059b      	lsls	r3, r3, #22
 80054ee:	d4e1      	bmi.n	80054b4 <_fflush_r+0xc>
 80054f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054f2:	f7ff fb8b 	bl	8004c0c <__retarget_lock_release_recursive>
 80054f6:	e7dd      	b.n	80054b4 <_fflush_r+0xc>

080054f8 <__swbuf_r>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	460e      	mov	r6, r1
 80054fc:	4614      	mov	r4, r2
 80054fe:	4605      	mov	r5, r0
 8005500:	b118      	cbz	r0, 800550a <__swbuf_r+0x12>
 8005502:	6a03      	ldr	r3, [r0, #32]
 8005504:	b90b      	cbnz	r3, 800550a <__swbuf_r+0x12>
 8005506:	f7ff fa7b 	bl	8004a00 <__sinit>
 800550a:	69a3      	ldr	r3, [r4, #24]
 800550c:	60a3      	str	r3, [r4, #8]
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	071a      	lsls	r2, r3, #28
 8005512:	d501      	bpl.n	8005518 <__swbuf_r+0x20>
 8005514:	6923      	ldr	r3, [r4, #16]
 8005516:	b943      	cbnz	r3, 800552a <__swbuf_r+0x32>
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f000 f82a 	bl	8005574 <__swsetup_r>
 8005520:	b118      	cbz	r0, 800552a <__swbuf_r+0x32>
 8005522:	f04f 37ff 	mov.w	r7, #4294967295
 8005526:	4638      	mov	r0, r7
 8005528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	6922      	ldr	r2, [r4, #16]
 800552e:	1a98      	subs	r0, r3, r2
 8005530:	6963      	ldr	r3, [r4, #20]
 8005532:	b2f6      	uxtb	r6, r6
 8005534:	4283      	cmp	r3, r0
 8005536:	4637      	mov	r7, r6
 8005538:	dc05      	bgt.n	8005546 <__swbuf_r+0x4e>
 800553a:	4621      	mov	r1, r4
 800553c:	4628      	mov	r0, r5
 800553e:	f7ff ffb3 	bl	80054a8 <_fflush_r>
 8005542:	2800      	cmp	r0, #0
 8005544:	d1ed      	bne.n	8005522 <__swbuf_r+0x2a>
 8005546:	68a3      	ldr	r3, [r4, #8]
 8005548:	3b01      	subs	r3, #1
 800554a:	60a3      	str	r3, [r4, #8]
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	701e      	strb	r6, [r3, #0]
 8005554:	6962      	ldr	r2, [r4, #20]
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	429a      	cmp	r2, r3
 800555a:	d004      	beq.n	8005566 <__swbuf_r+0x6e>
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	07db      	lsls	r3, r3, #31
 8005560:	d5e1      	bpl.n	8005526 <__swbuf_r+0x2e>
 8005562:	2e0a      	cmp	r6, #10
 8005564:	d1df      	bne.n	8005526 <__swbuf_r+0x2e>
 8005566:	4621      	mov	r1, r4
 8005568:	4628      	mov	r0, r5
 800556a:	f7ff ff9d 	bl	80054a8 <_fflush_r>
 800556e:	2800      	cmp	r0, #0
 8005570:	d0d9      	beq.n	8005526 <__swbuf_r+0x2e>
 8005572:	e7d6      	b.n	8005522 <__swbuf_r+0x2a>

08005574 <__swsetup_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4b29      	ldr	r3, [pc, #164]	@ (800561c <__swsetup_r+0xa8>)
 8005578:	4605      	mov	r5, r0
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	460c      	mov	r4, r1
 800557e:	b118      	cbz	r0, 8005588 <__swsetup_r+0x14>
 8005580:	6a03      	ldr	r3, [r0, #32]
 8005582:	b90b      	cbnz	r3, 8005588 <__swsetup_r+0x14>
 8005584:	f7ff fa3c 	bl	8004a00 <__sinit>
 8005588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558c:	0719      	lsls	r1, r3, #28
 800558e:	d422      	bmi.n	80055d6 <__swsetup_r+0x62>
 8005590:	06da      	lsls	r2, r3, #27
 8005592:	d407      	bmi.n	80055a4 <__swsetup_r+0x30>
 8005594:	2209      	movs	r2, #9
 8005596:	602a      	str	r2, [r5, #0]
 8005598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800559c:	81a3      	strh	r3, [r4, #12]
 800559e:	f04f 30ff 	mov.w	r0, #4294967295
 80055a2:	e033      	b.n	800560c <__swsetup_r+0x98>
 80055a4:	0758      	lsls	r0, r3, #29
 80055a6:	d512      	bpl.n	80055ce <__swsetup_r+0x5a>
 80055a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055aa:	b141      	cbz	r1, 80055be <__swsetup_r+0x4a>
 80055ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d002      	beq.n	80055ba <__swsetup_r+0x46>
 80055b4:	4628      	mov	r0, r5
 80055b6:	f7ff fb2b 	bl	8004c10 <_free_r>
 80055ba:	2300      	movs	r3, #0
 80055bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	2300      	movs	r3, #0
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f043 0308 	orr.w	r3, r3, #8
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	b94b      	cbnz	r3, 80055ee <__swsetup_r+0x7a>
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e4:	d003      	beq.n	80055ee <__swsetup_r+0x7a>
 80055e6:	4621      	mov	r1, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	f000 f84f 	bl	800568c <__smakebuf_r>
 80055ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f2:	f013 0201 	ands.w	r2, r3, #1
 80055f6:	d00a      	beq.n	800560e <__swsetup_r+0x9a>
 80055f8:	2200      	movs	r2, #0
 80055fa:	60a2      	str	r2, [r4, #8]
 80055fc:	6962      	ldr	r2, [r4, #20]
 80055fe:	4252      	negs	r2, r2
 8005600:	61a2      	str	r2, [r4, #24]
 8005602:	6922      	ldr	r2, [r4, #16]
 8005604:	b942      	cbnz	r2, 8005618 <__swsetup_r+0xa4>
 8005606:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800560a:	d1c5      	bne.n	8005598 <__swsetup_r+0x24>
 800560c:	bd38      	pop	{r3, r4, r5, pc}
 800560e:	0799      	lsls	r1, r3, #30
 8005610:	bf58      	it	pl
 8005612:	6962      	ldrpl	r2, [r4, #20]
 8005614:	60a2      	str	r2, [r4, #8]
 8005616:	e7f4      	b.n	8005602 <__swsetup_r+0x8e>
 8005618:	2000      	movs	r0, #0
 800561a:	e7f7      	b.n	800560c <__swsetup_r+0x98>
 800561c:	2000014c 	.word	0x2000014c

08005620 <_sbrk_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d06      	ldr	r5, [pc, #24]	@ (800563c <_sbrk_r+0x1c>)
 8005624:	2300      	movs	r3, #0
 8005626:	4604      	mov	r4, r0
 8005628:	4608      	mov	r0, r1
 800562a:	602b      	str	r3, [r5, #0]
 800562c:	f7fb fe5c 	bl	80012e8 <_sbrk>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_sbrk_r+0x1a>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	b103      	cbz	r3, 800563a <_sbrk_r+0x1a>
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	2000043c 	.word	0x2000043c

08005640 <__swhatbuf_r>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	460c      	mov	r4, r1
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	2900      	cmp	r1, #0
 800564a:	b096      	sub	sp, #88	@ 0x58
 800564c:	4615      	mov	r5, r2
 800564e:	461e      	mov	r6, r3
 8005650:	da0d      	bge.n	800566e <__swhatbuf_r+0x2e>
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005658:	f04f 0100 	mov.w	r1, #0
 800565c:	bf14      	ite	ne
 800565e:	2340      	movne	r3, #64	@ 0x40
 8005660:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005664:	2000      	movs	r0, #0
 8005666:	6031      	str	r1, [r6, #0]
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	b016      	add	sp, #88	@ 0x58
 800566c:	bd70      	pop	{r4, r5, r6, pc}
 800566e:	466a      	mov	r2, sp
 8005670:	f000 f848 	bl	8005704 <_fstat_r>
 8005674:	2800      	cmp	r0, #0
 8005676:	dbec      	blt.n	8005652 <__swhatbuf_r+0x12>
 8005678:	9901      	ldr	r1, [sp, #4]
 800567a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800567e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005682:	4259      	negs	r1, r3
 8005684:	4159      	adcs	r1, r3
 8005686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800568a:	e7eb      	b.n	8005664 <__swhatbuf_r+0x24>

0800568c <__smakebuf_r>:
 800568c:	898b      	ldrh	r3, [r1, #12]
 800568e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005690:	079d      	lsls	r5, r3, #30
 8005692:	4606      	mov	r6, r0
 8005694:	460c      	mov	r4, r1
 8005696:	d507      	bpl.n	80056a8 <__smakebuf_r+0x1c>
 8005698:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	2301      	movs	r3, #1
 80056a2:	6163      	str	r3, [r4, #20]
 80056a4:	b003      	add	sp, #12
 80056a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a8:	ab01      	add	r3, sp, #4
 80056aa:	466a      	mov	r2, sp
 80056ac:	f7ff ffc8 	bl	8005640 <__swhatbuf_r>
 80056b0:	9f00      	ldr	r7, [sp, #0]
 80056b2:	4605      	mov	r5, r0
 80056b4:	4639      	mov	r1, r7
 80056b6:	4630      	mov	r0, r6
 80056b8:	f7ff fb16 	bl	8004ce8 <_malloc_r>
 80056bc:	b948      	cbnz	r0, 80056d2 <__smakebuf_r+0x46>
 80056be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c2:	059a      	lsls	r2, r3, #22
 80056c4:	d4ee      	bmi.n	80056a4 <__smakebuf_r+0x18>
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	f043 0302 	orr.w	r3, r3, #2
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	e7e2      	b.n	8005698 <__smakebuf_r+0xc>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	6020      	str	r0, [r4, #0]
 80056d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056e2:	b15b      	cbz	r3, 80056fc <__smakebuf_r+0x70>
 80056e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056e8:	4630      	mov	r0, r6
 80056ea:	f000 f81d 	bl	8005728 <_isatty_r>
 80056ee:	b128      	cbz	r0, 80056fc <__smakebuf_r+0x70>
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	81a3      	strh	r3, [r4, #12]
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	431d      	orrs	r5, r3
 8005700:	81a5      	strh	r5, [r4, #12]
 8005702:	e7cf      	b.n	80056a4 <__smakebuf_r+0x18>

08005704 <_fstat_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4d07      	ldr	r5, [pc, #28]	@ (8005724 <_fstat_r+0x20>)
 8005708:	2300      	movs	r3, #0
 800570a:	4604      	mov	r4, r0
 800570c:	4608      	mov	r0, r1
 800570e:	4611      	mov	r1, r2
 8005710:	602b      	str	r3, [r5, #0]
 8005712:	f7fb fdc0 	bl	8001296 <_fstat>
 8005716:	1c43      	adds	r3, r0, #1
 8005718:	d102      	bne.n	8005720 <_fstat_r+0x1c>
 800571a:	682b      	ldr	r3, [r5, #0]
 800571c:	b103      	cbz	r3, 8005720 <_fstat_r+0x1c>
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	bd38      	pop	{r3, r4, r5, pc}
 8005722:	bf00      	nop
 8005724:	2000043c 	.word	0x2000043c

08005728 <_isatty_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4d06      	ldr	r5, [pc, #24]	@ (8005744 <_isatty_r+0x1c>)
 800572c:	2300      	movs	r3, #0
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	f7fb fdbf 	bl	80012b6 <_isatty>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_isatty_r+0x1a>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_isatty_r+0x1a>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	2000043c 	.word	0x2000043c

08005748 <_init>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr

08005754 <_fini>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr
