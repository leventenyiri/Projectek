
Persistence_of_vision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08009ab8  08009ab8  0000aab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e40  08009e40  0000b36c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e40  08009e40  0000ae40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e48  08009e48  0000b36c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e48  08009e48  0000ae48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e4c  08009e4c  0000ae4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000036c  20000000  08009e50  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  20000370  0800a1bc  0000b370  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  0800a1bc  0000b7b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b36c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc94  00000000  00000000  0000b39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339b  00000000  00000000  0002b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  0002e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000157d  00000000  00000000  0002ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ad6  00000000  00000000  00031515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa8b  00000000  00000000  00055feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd662  00000000  00000000  00070a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e0d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085ec  00000000  00000000  0014e11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00156708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000370 	.word	0x20000370
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009aa0 	.word	0x08009aa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000374 	.word	0x20000374
 800020c:	08009aa0 	.word	0x08009aa0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <updateMeanAndCenterData>:
 */

#include "DataProcessing.h"

// Update mean and center data dynamically
double updateMeanAndCenterData(double newData) {
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	ed87 0b00 	vstr	d0, [r7]
	static double runningTotal = 0.0;
	static int count = 0;
	static double currentMean = 0;
    runningTotal += newData;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <updateMeanAndCenterData+0x78>)
 8000ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eec:	f7ff f9ee 	bl	80002cc <__adddf3>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4916      	ldr	r1, [pc, #88]	@ (8000f50 <updateMeanAndCenterData+0x78>)
 8000ef6:	e9c1 2300 	strd	r2, r3, [r1]
    count++;
 8000efa:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <updateMeanAndCenterData+0x7c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <updateMeanAndCenterData+0x7c>)
 8000f02:	6013      	str	r3, [r2, #0]
    currentMean = runningTotal / (double)count;
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <updateMeanAndCenterData+0x78>)
 8000f06:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <updateMeanAndCenterData+0x7c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fb28 	bl	8000564 <__aeabi_i2d>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4620      	mov	r0, r4
 8000f1a:	4629      	mov	r1, r5
 8000f1c:	f7ff fcb6 	bl	800088c <__aeabi_ddiv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <updateMeanAndCenterData+0x80>)
 8000f26:	e9c1 2300 	strd	r2, r3, [r1]
    return newData - currentMean;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <updateMeanAndCenterData+0x80>)
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f34:	f7ff f9c8 	bl	80002c8 <__aeabi_dsub>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f40:	eeb0 0a47 	vmov.f32	s0, s14
 8000f44:	eef0 0a67 	vmov.f32	s1, s15
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000390 	.word	0x20000390
 8000f54:	20000398 	.word	0x20000398
 8000f58:	200003a0 	.word	0x200003a0

08000f5c <calculateAverageAcceleration>:

double calculateAverageAcceleration(double last_accel, double new_accel) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f66:	ed87 1b00 	vstr	d1, [r7]
    return (last_accel + new_accel) / 2.0;
 8000f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f72:	f7ff f9ab 	bl	80002cc <__adddf3>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f86:	f7ff fc81 	bl	800088c <__aeabi_ddiv>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f92:	eeb0 0a47 	vmov.f32	s0, s14
 8000f96:	eef0 0a67 	vmov.f32	s1, s15
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <updateAndFilterVelocity>:


double updateAndFilterVelocity(double current_vel, double delta_t, double avg_accel, int *samples_collected) {
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	ed87 0b06 	vstr	d0, [r7, #24]
 8000faa:	ed87 1b04 	vstr	d1, [r7, #16]
 8000fae:	ed87 2b02 	vstr	d2, [r7, #8]
 8000fb2:	6078      	str	r0, [r7, #4]
    static double filtered_velocity = 0;
    const double alpha = 0.98;
 8000fb4:	a322      	add	r3, pc, #136	@ (adr r3, 8001040 <updateAndFilterVelocity+0xa0>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (*samples_collected == 0) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d105      	bne.n	8000fd2 <updateAndFilterVelocity+0x32>
        filtered_velocity = current_vel;
 8000fc6:	491c      	ldr	r1, [pc, #112]	@ (8001038 <updateAndFilterVelocity+0x98>)
 8000fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fcc:	e9c1 2300 	strd	r2, r3, [r1]
 8000fd0:	e024      	b.n	800101c <updateAndFilterVelocity+0x7c>
    } else {
        filtered_velocity = alpha * current_vel + (1 - alpha) * filtered_velocity;
 8000fd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fda:	f7ff fb2d 	bl	8000638 <__aeabi_dmul>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4614      	mov	r4, r2
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4913      	ldr	r1, [pc, #76]	@ (800103c <updateAndFilterVelocity+0x9c>)
 8000ff0:	f7ff f96a 	bl	80002c8 <__aeabi_dsub>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <updateAndFilterVelocity+0x98>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f7ff fb19 	bl	8000638 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff f95d 	bl	80002cc <__adddf3>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4908      	ldr	r1, [pc, #32]	@ (8001038 <updateAndFilterVelocity+0x98>)
 8001018:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return filtered_velocity;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <updateAndFilterVelocity+0x98>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	ec43 2b17 	vmov	d7, r2, r3
}
 8001026:	eeb0 0a47 	vmov.f32	s0, s14
 800102a:	eef0 0a67 	vmov.f32	s1, s15
 800102e:	3728      	adds	r7, #40	@ 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bdb0      	pop	{r4, r5, r7, pc}
 8001034:	f3af 8000 	nop.w
 8001038:	200003a8 	.word	0x200003a8
 800103c:	3ff00000 	.word	0x3ff00000
 8001040:	f5c28f5c 	.word	0xf5c28f5c
 8001044:	3fef5c28 	.word	0x3fef5c28

08001048 <updateBaseline>:


double updateBaseline(double filtered_vel) {
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0b00 	vstr	d0, [r7]
    static double baseline = 0;
    const double beta = 0.02;
 8001052:	a31d      	add	r3, pc, #116	@ (adr r3, 80010c8 <updateBaseline+0x80>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	e9c7 2302 	strd	r2, r3, [r7, #8]

    baseline = beta * filtered_vel + (1 - beta) * baseline;
 800105c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001060:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001064:	f7ff fae8 	bl	8000638 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4614      	mov	r4, r2
 800106e:	461d      	mov	r5, r3
 8001070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001074:	f04f 0000 	mov.w	r0, #0
 8001078:	4911      	ldr	r1, [pc, #68]	@ (80010c0 <updateBaseline+0x78>)
 800107a:	f7ff f925 	bl	80002c8 <__aeabi_dsub>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <updateBaseline+0x7c>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fad4 	bl	8000638 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4620      	mov	r0, r4
 8001096:	4629      	mov	r1, r5
 8001098:	f7ff f918 	bl	80002cc <__adddf3>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <updateBaseline+0x7c>)
 80010a2:	e9c1 2300 	strd	r2, r3, [r1]
    return baseline;
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <updateBaseline+0x7c>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80010b0:	eeb0 0a47 	vmov.f32	s0, s14
 80010b4:	eef0 0a67 	vmov.f32	s1, s15
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdb0      	pop	{r4, r5, r7, pc}
 80010be:	bf00      	nop
 80010c0:	3ff00000 	.word	0x3ff00000
 80010c4:	200003b0 	.word	0x200003b0
 80010c8:	47ae147b 	.word	0x47ae147b
 80010cc:	3f947ae1 	.word	0x3f947ae1

080010d0 <updateVelocityAndDisplacement>:


void updateVelocityAndDisplacement(double last_vel, double centered_vel, double delta_t, double* current_displacement) {
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b08e      	sub	sp, #56	@ 0x38
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	ed87 0b08 	vstr	d0, [r7, #32]
 80010da:	ed87 1b06 	vstr	d1, [r7, #24]
 80010de:	ed87 2b04 	vstr	d2, [r7, #16]
 80010e2:	60f8      	str	r0, [r7, #12]
    double average_velocity = (last_vel + centered_vel) / 2.0;
 80010e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010ec:	f7ff f8ee 	bl	80002cc <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001100:	f7ff fbc4 	bl	800088c <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double abs_velocity = (fabs(last_vel) + fabs(centered_vel)) / 2.0;
 800110c:	6a3c      	ldr	r4, [r7, #32]
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001124:	4620      	mov	r0, r4
 8001126:	4629      	mov	r1, r5
 8001128:	f7ff f8d0 	bl	80002cc <__adddf3>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800113c:	f7ff fba6 	bl	800088c <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    *current_displacement += abs_velocity * delta_t;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800114e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001152:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001156:	f7ff fa6f 	bl	8000638 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f8b3 	bl	80002cc <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001170:	bf00      	nop
 8001172:	3738      	adds	r7, #56	@ 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}

08001178 <handleZeroCrossings>:


void handleZeroCrossings(double last_vel, double centered_vel, uint8_t* zeroCrossing, double *current_displacement, double* max_displacement) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	ed87 0b06 	vstr	d0, [r7, #24]
 8001182:	ed87 1b04 	vstr	d1, [r7, #16]
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
    if ((last_vel > 0 && centered_vel < 0) || (last_vel < 0 && centered_vel > 0)) {
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001198:	f7ff fcde 	bl	8000b58 <__aeabi_dcmpgt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00a      	beq.n	80011b8 <handleZeroCrossings+0x40>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ae:	f7ff fcb5 	bl	8000b1c <__aeabi_dcmplt>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d115      	bne.n	80011e4 <handleZeroCrossings+0x6c>
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011c4:	f7ff fcaa 	bl	8000b1c <__aeabi_dcmplt>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d010      	beq.n	80011f0 <handleZeroCrossings+0x78>
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011da:	f7ff fcbd 	bl	8000b58 <__aeabi_dcmpgt>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <handleZeroCrossings+0x78>
        (*zeroCrossing)++;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	701a      	strb	r2, [r3, #0]
    }

    if (*zeroCrossing == 2) {
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d112      	bne.n	800121e <handleZeroCrossings+0xa6>
        *max_displacement = *current_displacement;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	e9c1 2300 	strd	r2, r3, [r1]
        *current_displacement = 0;
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	e9c1 2300 	strd	r2, r3, [r1]
        *zeroCrossing = 0;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
        disp_usable = TRUE;
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <handleZeroCrossings+0xb0>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
    }
}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200004b5 	.word	0x200004b5
 800122c:	00000000 	.word	0x00000000

08001230 <update_motion>:


void update_motion(double new_acceleration, double new_time, double delta_t, uint8_t* zeroCrossing, double* current_displacement, double* max_displacement, double* centered_velocity) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b092      	sub	sp, #72	@ 0x48
 8001234:	af00      	add	r7, sp, #0
 8001236:	ed87 0b08 	vstr	d0, [r7, #32]
 800123a:	ed87 1b06 	vstr	d1, [r7, #24]
 800123e:	ed87 2b04 	vstr	d2, [r7, #16]
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
    static int samples_collected = 0;
    const double VELOCITY_THRESHOLD = 10000.0;  // Velocity threshold to start displacement
 800124a:	a352      	add	r3, pc, #328	@ (adr r3, 8001394 <update_motion+0x164>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    static double last_acceleration = 0.0;
    static double last_velocity = 0.0;
    static double current_velocity = 0.0;
    // Calculate average and filtered velocities
    double avg_acceleration = calculateAverageAcceleration(last_acceleration, new_acceleration);
 8001254:	4b4a      	ldr	r3, [pc, #296]	@ (8001380 <update_motion+0x150>)
 8001256:	ed93 7b00 	vldr	d7, [r3]
 800125a:	ed97 1b08 	vldr	d1, [r7, #32]
 800125e:	eeb0 0a47 	vmov.f32	s0, s14
 8001262:	eef0 0a67 	vmov.f32	s1, s15
 8001266:	f7ff fe79 	bl	8000f5c <calculateAverageAcceleration>
 800126a:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
    current_velocity += avg_acceleration * delta_t;
 800126e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001272:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001276:	f7ff f9df 	bl	8000638 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	4b40      	ldr	r3, [pc, #256]	@ (8001384 <update_motion+0x154>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f820 	bl	80002cc <__adddf3>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	493c      	ldr	r1, [pc, #240]	@ (8001384 <update_motion+0x154>)
 8001292:	e9c1 2300 	strd	r2, r3, [r1]
    double filtered_velocity = updateAndFilterVelocity(current_velocity, delta_t, avg_acceleration, &samples_collected);
 8001296:	4b3b      	ldr	r3, [pc, #236]	@ (8001384 <update_motion+0x154>)
 8001298:	ed93 7b00 	vldr	d7, [r3]
 800129c:	483a      	ldr	r0, [pc, #232]	@ (8001388 <update_motion+0x158>)
 800129e:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 80012a2:	ed97 1b04 	vldr	d1, [r7, #16]
 80012a6:	eeb0 0a47 	vmov.f32	s0, s14
 80012aa:	eef0 0a67 	vmov.f32	s1, s15
 80012ae:	f7ff fe77 	bl	8000fa0 <updateAndFilterVelocity>
 80012b2:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
    double baseline = updateBaseline(filtered_velocity);
 80012b6:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 80012ba:	f7ff fec5 	bl	8001048 <updateBaseline>
 80012be:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

    // Center the velocity by subtracting the baseline
    *centered_velocity = filtered_velocity - baseline;
 80012c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80012c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80012ca:	f7fe fffd 	bl	80002c8 <__aeabi_dsub>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	6839      	ldr	r1, [r7, #0]
 80012d4:	e9c1 2300 	strd	r2, r3, [r1]

    // Start updating displacement only if the centered velocity exceeds the threshold
    // and it's the first time it's detected
    if (!first_positive_velocity_detected && (*centered_velocity) > VELOCITY_THRESHOLD) {
 80012d8:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <update_motion+0x15c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d113      	bne.n	8001308 <update_motion+0xd8>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80012ea:	f7ff fc17 	bl	8000b1c <__aeabi_dcmplt>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d009      	beq.n	8001308 <update_motion+0xd8>
        first_positive_velocity_detected = TRUE;
 80012f4:	4b25      	ldr	r3, [pc, #148]	@ (800138c <update_motion+0x15c>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
        *current_displacement = 0;  // This is needed to make sure the displacement
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e9c1 2300 	strd	r2, r3, [r1]
        //period starts with a positive velocity
    }

    // Only update displacement if the first positive velocity has been detected
    if (first_positive_velocity_detected) {
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <update_motion+0x15c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d025      	beq.n	800135c <update_motion+0x12c>
        updateVelocityAndDisplacement(last_velocity, *centered_velocity, delta_t, current_displacement);
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <update_motion+0x160>)
 8001312:	ed93 7b00 	vldr	d7, [r3]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	ed93 6b00 	vldr	d6, [r3]
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	ed97 2b04 	vldr	d2, [r7, #16]
 8001322:	eeb0 1a46 	vmov.f32	s2, s12
 8001326:	eef0 1a66 	vmov.f32	s3, s13
 800132a:	eeb0 0a47 	vmov.f32	s0, s14
 800132e:	eef0 0a67 	vmov.f32	s1, s15
 8001332:	f7ff fecd 	bl	80010d0 <updateVelocityAndDisplacement>
        handleZeroCrossings(last_velocity, *centered_velocity, zeroCrossing, current_displacement, max_displacement);
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <update_motion+0x160>)
 8001338:	ed93 7b00 	vldr	d7, [r3]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	ed93 6b00 	vldr	d6, [r3]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	eeb0 1a46 	vmov.f32	s2, s12
 800134c:	eef0 1a66 	vmov.f32	s3, s13
 8001350:	eeb0 0a47 	vmov.f32	s0, s14
 8001354:	eef0 0a67 	vmov.f32	s1, s15
 8001358:	f7ff ff0e 	bl	8001178 <handleZeroCrossings>
    }



    // Update last values for the next iteration
    last_acceleration = new_acceleration;
 800135c:	4908      	ldr	r1, [pc, #32]	@ (8001380 <update_motion+0x150>)
 800135e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001362:	e9c1 2300 	strd	r2, r3, [r1]
    last_velocity = *centered_velocity;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	4908      	ldr	r1, [pc, #32]	@ (8001390 <update_motion+0x160>)
 800136e:	e9c1 2300 	strd	r2, r3, [r1]
    //read_idx = (read_idx + 1) % BUFFER_SIZE;
}
 8001372:	bf00      	nop
 8001374:	3748      	adds	r7, #72	@ 0x48
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	200003b8 	.word	0x200003b8
 8001384:	200003c0 	.word	0x200003c0
 8001388:	200003c8 	.word	0x200003c8
 800138c:	200004c9 	.word	0x200004c9
 8001390:	200003d0 	.word	0x200003d0
 8001394:	00000000 	.word	0x00000000
 8001398:	40c38800 	.word	0x40c38800

0800139c <elapsed_time_init>:
* Note(s): Must be called before any of the other functions in this module
********************************************************************************
*/

void  elapsed_time_init (void)         
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
    uint32_t  i;
    
    
    if (ARM_CM_DWT_CTRL != 0) {                  // See if DWT is available
 80013a2:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <elapsed_time_init+0x50>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00e      	beq.n	80013c8 <elapsed_time_init+0x2c>
        ARM_CM_DEMCR      |= 1 << 24;            // Set bit 24
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <elapsed_time_init+0x54>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <elapsed_time_init+0x54>)
 80013b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013b4:	6013      	str	r3, [r2, #0]
        ARM_CM_DWT_CYCCNT  = 0;                
 80013b6:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <elapsed_time_init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
        ARM_CM_DWT_CTRL   |= 1 << 0;             // Set bit 0
 80013bc:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <elapsed_time_init+0x50>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <elapsed_time_init+0x50>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6013      	str	r3, [r2, #0]
    }
    for (i = 0; i < ELAPSED_TIME_MAX_SECTIONS; i++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	e005      	b.n	80013da <elapsed_time_init+0x3e>
        elapsed_time_clr(i);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f858 	bl	8001484 <elapsed_time_clr>
    for (i = 0; i < ELAPSED_TIME_MAX_SECTIONS; i++) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3301      	adds	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b09      	cmp	r3, #9
 80013de:	d9f6      	bls.n	80013ce <elapsed_time_init+0x32>
    }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e0001000 	.word	0xe0001000
 80013f0:	e000edfc 	.word	0xe000edfc
 80013f4:	e0001004 	.word	0xe0001004

080013f8 <elapsed_time_start>:
*                  START THE MEASUREMENT OF A CODE SECTION
********************************************************************************
*/

void  elapsed_time_start (uint32_t  i)  
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    elapsed_time_tbl[i].start = ARM_CM_DWT_CYCCNT;
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <elapsed_time_start+0x24>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4906      	ldr	r1, [pc, #24]	@ (8001420 <elapsed_time_start+0x28>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	440b      	add	r3, r1
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e0001004 	.word	0xe0001004
 8001420:	200003d8 	.word	0x200003d8

08001424 <elapsed_time_stop>:
*           STOP THE MEASUREMENT OF A CODE SECTION AND COMPUTE STATS
********************************************************************************
*/

void  elapsed_time_stop (uint32_t  i)  
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    uint32_t       stop; 
    ELAPSED_TIME  *p_tbl;
    

    stop           = ARM_CM_DWT_CYCCNT;   
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <elapsed_time_stop+0x58>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
    p_tbl          = &elapsed_time_tbl[i];
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <elapsed_time_stop+0x5c>)
 8001438:	4413      	add	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
    p_tbl->current = stop - p_tbl->start;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	1ad2      	subs	r2, r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	605a      	str	r2, [r3, #4]
    if (p_tbl->max < p_tbl->current) {
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	d203      	bcs.n	800145c <elapsed_time_stop+0x38>
        p_tbl->max = p_tbl->current;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	609a      	str	r2, [r3, #8]
    }
    if (p_tbl->min > p_tbl->current) {
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	d903      	bls.n	8001470 <elapsed_time_stop+0x4c>
        p_tbl->min = p_tbl->current;
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60da      	str	r2, [r3, #12]
    }
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e0001004 	.word	0xe0001004
 8001480:	200003d8 	.word	0x200003d8

08001484 <elapsed_time_clr>:
*                      CLEAR THE MEASUREMENTS STATS
********************************************************************************
*/

void  elapsed_time_clr (uint32_t  i)         
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    ELAPSED_TIME  *p_tbl;
    
    
    p_tbl          = &elapsed_time_tbl[i];
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <elapsed_time_clr+0x38>)
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
    p_tbl->start   = 0;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
    p_tbl->current = 0;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
    p_tbl->min     = 0xFFFFFFFF;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	60da      	str	r2, [r3, #12]
    p_tbl->max     = 0;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	200003d8 	.word	0x200003d8

080014c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b49      	ldr	r3, [pc, #292]	@ (8001600 <MX_GPIO_Init+0x140>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a48      	ldr	r2, [pc, #288]	@ (8001600 <MX_GPIO_Init+0x140>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b46      	ldr	r3, [pc, #280]	@ (8001600 <MX_GPIO_Init+0x140>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b42      	ldr	r3, [pc, #264]	@ (8001600 <MX_GPIO_Init+0x140>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a41      	ldr	r2, [pc, #260]	@ (8001600 <MX_GPIO_Init+0x140>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b3f      	ldr	r3, [pc, #252]	@ (8001600 <MX_GPIO_Init+0x140>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <MX_GPIO_Init+0x140>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a3a      	ldr	r2, [pc, #232]	@ (8001600 <MX_GPIO_Init+0x140>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b38      	ldr	r3, [pc, #224]	@ (8001600 <MX_GPIO_Init+0x140>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <MX_GPIO_Init+0x140>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a33      	ldr	r2, [pc, #204]	@ (8001600 <MX_GPIO_Init+0x140>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <MX_GPIO_Init+0x140>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2110      	movs	r1, #16
 800154a:	482e      	ldr	r0, [pc, #184]	@ (8001604 <MX_GPIO_Init+0x144>)
 800154c:	f002 ff08 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_LE_Pin|LED_OE_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2106      	movs	r1, #6
 8001554:	482c      	ldr	r0, [pc, #176]	@ (8001608 <MX_GPIO_Init+0x148>)
 8001556:	f002 ff03 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800155a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001560:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4826      	ldr	r0, [pc, #152]	@ (800160c <MX_GPIO_Init+0x14c>)
 8001572:	f002 fc6d 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001576:	2310      	movs	r3, #16
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	481d      	ldr	r0, [pc, #116]	@ (8001604 <MX_GPIO_Init+0x144>)
 800158e:	f002 fc5f 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_LE_Pin;
 8001592:	2302      	movs	r3, #2
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4817      	ldr	r0, [pc, #92]	@ (8001608 <MX_GPIO_Init+0x148>)
 80015aa:	f002 fc51 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 80015ae:	2304      	movs	r3, #4
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2302      	movs	r3, #2
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4810      	ldr	r0, [pc, #64]	@ (8001608 <MX_GPIO_Init+0x148>)
 80015c6:	f002 fc43 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 80015ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6DSL_INT1_EXTI11_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	480a      	ldr	r0, [pc, #40]	@ (800160c <MX_GPIO_Init+0x14c>)
 80015e2:	f002 fc35 	bl	8003e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2028      	movs	r0, #40	@ 0x28
 80015ec:	f002 fb67 	bl	8003cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f0:	2028      	movs	r0, #40	@ 0x28
 80015f2:	f002 fb80 	bl	8003cf6 <HAL_NVIC_EnableIRQ>

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	@ 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800

08001610 <OutputEnable>:

	 would look like this, now i write each column into a vector, and i will light up these leds
	 with a delay to display the character
	 */

void OutputEnable(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Set PB2 low to enable output
 8001614:	2200      	movs	r2, #0
 8001616:	2104      	movs	r1, #4
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <OutputEnable+0x14>)
 800161a:	f002 fea1 	bl	8004360 <HAL_GPIO_WritePin>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020400 	.word	0x40020400

08001628 <OutputDisable>:

void OutputDisable(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Set PB2 high to disable output
 800162c:	2201      	movs	r2, #1
 800162e:	2104      	movs	r1, #4
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <OutputDisable+0x14>)
 8001632:	f002 fe95 	bl	8004360 <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40020400 	.word	0x40020400

08001640 <LatchEnable>:

void LatchEnable(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // Set PB1 high
 8001644:	2201      	movs	r2, #1
 8001646:	2102      	movs	r1, #2
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <LatchEnable+0x14>)
 800164a:	f002 fe89 	bl	8004360 <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40020400 	.word	0x40020400

08001658 <SendLEDData>:


void SendLEDData(uint8_t *data) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8001660:	2305      	movs	r3, #5
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e00a      	b.n	800167c <SendLEDData+0x24>
		HAL_SPI_Transmit(&hspi2, &data[i], 1, 100);  // Send 1 byte per driver
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	18d1      	adds	r1, r2, r3
 800166c:	2364      	movs	r3, #100	@ 0x64
 800166e:	2201      	movs	r2, #1
 8001670:	4806      	ldr	r0, [pc, #24]	@ (800168c <SendLEDData+0x34>)
 8001672:	f003 fd40 	bl	80050f6 <HAL_SPI_Transmit>
	for (int i = 5; i >= 0; i--) {  // Loop through data array backward
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3b01      	subs	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	daf1      	bge.n	8001666 <SendLEDData+0xe>
	}
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200004d4 	.word	0x200004d4

08001690 <CombineLEDData>:

void CombineLEDData(uint8_t *result, uint8_t ledIdx) {
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]

	for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e016      	b.n	80016d0 <CombineLEDData+0x40>
		result[j] |= LED_ARRAY[ledIdx][j];
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	7819      	ldrb	r1, [r3, #0]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <CombineLEDData+0x54>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	18c2      	adds	r2, r0, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	781a      	ldrb	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4403      	add	r3, r0
 80016c4:	430a      	orrs	r2, r1
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 6; j++) {   // Each LED configuration is 6 bytes
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b05      	cmp	r3, #5
 80016d4:	dde5      	ble.n	80016a2 <CombineLEDData+0x12>
	}

}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	20000078 	.word	0x20000078

080016e8 <CombineAndSendNEW>:
		result[j] += LED_ARRAY[ledIdx][j];
	}

}

void CombineAndSendNEW(uint16_t ledMask,uint8_t color) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	460a      	mov	r2, r1
 80016f2:	80fb      	strh	r3, [r7, #6]
 80016f4:	4613      	mov	r3, r2
 80016f6:	717b      	strb	r3, [r7, #5]


	//if the value of a variable is 1, concatenate that LED into the sum
	char a = (ledMask & 0b1000000000000000) >> 15;
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	0bdb      	lsrs	r3, r3, #15
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	77fb      	strb	r3, [r7, #31]
	char b = (ledMask & 0b0100000000000000) >> 14;
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	139b      	asrs	r3, r3, #14
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	77bb      	strb	r3, [r7, #30]
	char c = (ledMask & 0b0010000000000000) >> 13;
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	135b      	asrs	r3, r3, #13
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	777b      	strb	r3, [r7, #29]
	char d = (ledMask & 0b0001000000000000) >> 12;
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	131b      	asrs	r3, r3, #12
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	773b      	strb	r3, [r7, #28]
	char e = (ledMask & 0b0000100000000000) >> 11;
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	12db      	asrs	r3, r3, #11
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	76fb      	strb	r3, [r7, #27]
	char f = (ledMask & 0b0000010000000000) >> 10;
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	129b      	asrs	r3, r3, #10
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	76bb      	strb	r3, [r7, #26]
	char g = (ledMask & 0b0000001000000000) >> 9;
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	125b      	asrs	r3, r3, #9
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	767b      	strb	r3, [r7, #25]
	char h = (ledMask & 0b0000000100000000) >> 8;
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	121b      	asrs	r3, r3, #8
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	763b      	strb	r3, [r7, #24]
	char i = (ledMask & 0b0000000010000000) >> 7;
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	11db      	asrs	r3, r3, #7
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	75fb      	strb	r3, [r7, #23]
	char j = (ledMask & 0b0000000001000000) >> 6;
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	119b      	asrs	r3, r3, #6
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	75bb      	strb	r3, [r7, #22]
	char k = (ledMask & 0b0000000000100000) >> 5;
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	115b      	asrs	r3, r3, #5
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	757b      	strb	r3, [r7, #21]
	char l = (ledMask & 0b0000000000010000) >> 4;
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	111b      	asrs	r3, r3, #4
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	753b      	strb	r3, [r7, #20]
	char m = (ledMask & 0b0000000000001000) >> 3;
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	10db      	asrs	r3, r3, #3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	74fb      	strb	r3, [r7, #19]
	char n = (ledMask & 0b0000000000000100) >> 2;
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	109b      	asrs	r3, r3, #2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	74bb      	strb	r3, [r7, #18]
	char o = (ledMask & 0b0000000000000010) >> 1;
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	105b      	asrs	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	747b      	strb	r3, [r7, #17]
	char p = (ledMask & 0b0000000000000001);
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	743b      	strb	r3, [r7, #16]

	uint8_t LED[6] = { 0 };
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	2300      	movs	r3, #0
 80017b8:	81bb      	strh	r3, [r7, #12]
	if(color == green){
		CombineLEDData(LED,green);
	}
*/

	if (a) {
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <CombineAndSendNEW+0xe4>
		CombineLEDData(LED, 0);
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff62 	bl	8001690 <CombineLEDData>
	}
	if (b) {
 80017cc:	7fbb      	ldrb	r3, [r7, #30]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <CombineAndSendNEW+0xf6>
		CombineLEDData(LED, 3);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	2103      	movs	r1, #3
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff59 	bl	8001690 <CombineLEDData>
	}
	if (c) {
 80017de:	7f7b      	ldrb	r3, [r7, #29]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <CombineAndSendNEW+0x108>
		CombineLEDData(LED, 6);
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	2106      	movs	r1, #6
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff50 	bl	8001690 <CombineLEDData>
	}
	if (d) {
 80017f0:	7f3b      	ldrb	r3, [r7, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <CombineAndSendNEW+0x11a>
		CombineLEDData(LED, 9);
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	2109      	movs	r1, #9
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff47 	bl	8001690 <CombineLEDData>
	}
	if (e) {
 8001802:	7efb      	ldrb	r3, [r7, #27]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <CombineAndSendNEW+0x12c>
		CombineLEDData(LED, 12);
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	210c      	movs	r1, #12
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff3e 	bl	8001690 <CombineLEDData>
	}
	if (f) {
 8001814:	7ebb      	ldrb	r3, [r7, #26]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <CombineAndSendNEW+0x13e>
		CombineLEDData(LED, 15);
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	210f      	movs	r1, #15
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff35 	bl	8001690 <CombineLEDData>
	}
	if (g) {
 8001826:	7e7b      	ldrb	r3, [r7, #25]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <CombineAndSendNEW+0x150>
		CombineLEDData(LED, 18);
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	2112      	movs	r1, #18
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff2c 	bl	8001690 <CombineLEDData>
	}
	if (h) {
 8001838:	7e3b      	ldrb	r3, [r7, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <CombineAndSendNEW+0x162>
		CombineLEDData(LED, 21);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2115      	movs	r1, #21
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff23 	bl	8001690 <CombineLEDData>
	}
	if (i) {
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <CombineAndSendNEW+0x174>
		CombineLEDData(LED, 24);
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	2118      	movs	r1, #24
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff1a 	bl	8001690 <CombineLEDData>
	}
	if (j) {
 800185c:	7dbb      	ldrb	r3, [r7, #22]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <CombineAndSendNEW+0x186>
		CombineLEDData(LED, 27);
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	211b      	movs	r1, #27
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff11 	bl	8001690 <CombineLEDData>
	}
	if (k) {
 800186e:	7d7b      	ldrb	r3, [r7, #21]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <CombineAndSendNEW+0x198>
		CombineLEDData(LED, 30);
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	211e      	movs	r1, #30
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff08 	bl	8001690 <CombineLEDData>
	}
	if (l) {
 8001880:	7d3b      	ldrb	r3, [r7, #20]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <CombineAndSendNEW+0x1aa>
		CombineLEDData(LED, 33);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2121      	movs	r1, #33	@ 0x21
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff feff 	bl	8001690 <CombineLEDData>
	}
	if (m) {
 8001892:	7cfb      	ldrb	r3, [r7, #19]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <CombineAndSendNEW+0x1bc>
		CombineLEDData(LED, 36);
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	2124      	movs	r1, #36	@ 0x24
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fef6 	bl	8001690 <CombineLEDData>
	}
	if (n) {
 80018a4:	7cbb      	ldrb	r3, [r7, #18]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <CombineAndSendNEW+0x1ce>
		CombineLEDData(LED, 39);
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	2127      	movs	r1, #39	@ 0x27
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff feed 	bl	8001690 <CombineLEDData>
	}
	if (o) {
 80018b6:	7c7b      	ldrb	r3, [r7, #17]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <CombineAndSendNEW+0x1e0>
		CombineLEDData(LED, 42);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	212a      	movs	r1, #42	@ 0x2a
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fee4 	bl	8001690 <CombineLEDData>
	}
	if (p) {
 80018c8:	7c3b      	ldrb	r3, [r7, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <CombineAndSendNEW+0x1f2>
		CombineLEDData(LED, 45);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	212d      	movs	r1, #45	@ 0x2d
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fedb 	bl	8001690 <CombineLEDData>
	}

	SendLEDData(LED);
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff feba 	bl	8001658 <SendLEDData>

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <wrap_platform_read>:

int32_t wrap_platform_read(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	603a      	str	r2, [r7, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	460b      	mov	r3, r1
 80018fc:	71bb      	strb	r3, [r7, #6]
 80018fe:	4613      	mov	r3, r2
 8001900:	80bb      	strh	r3, [r7, #4]
	Reg |= 0x80;
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001908:	b2db      	uxtb	r3, r3
 800190a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2110      	movs	r1, #16
 8001910:	480b      	ldr	r0, [pc, #44]	@ (8001940 <wrap_platform_read+0x54>)
 8001912:	f002 fd25 	bl	8004360 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 8001916:	1dbb      	adds	r3, r7, #6
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fcea 	bl	80022f4 <BSP_SPI1_Send>
	BSP_SPI1_SendRecv(&Reg, Bufp, len);
 8001920:	88ba      	ldrh	r2, [r7, #4]
 8001922:	1dbb      	adds	r3, r7, #6
 8001924:	6839      	ldr	r1, [r7, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fd00 	bl	800232c <BSP_SPI1_SendRecv>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2110      	movs	r1, #16
 8001930:	4803      	ldr	r0, [pc, #12]	@ (8001940 <wrap_platform_read+0x54>)
 8001932:	f002 fd15 	bl	8004360 <HAL_GPIO_WritePin>
	return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40020000 	.word	0x40020000

08001944 <wrap_platform_write>:

int32_t wrap_platform_write(uint8_t Address, uint8_t Reg, uint8_t *Bufp,
		uint16_t len) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	603a      	str	r2, [r7, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	460b      	mov	r3, r1
 8001954:	71bb      	strb	r3, [r7, #6]
 8001956:	4613      	mov	r3, r2
 8001958:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2110      	movs	r1, #16
 800195e:	480b      	ldr	r0, [pc, #44]	@ (800198c <wrap_platform_write+0x48>)
 8001960:	f002 fcfe 	bl	8004360 <HAL_GPIO_WritePin>
	BSP_SPI1_Send(&Reg, 1);
 8001964:	1dbb      	adds	r3, r7, #6
 8001966:	2101      	movs	r1, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fcc3 	bl	80022f4 <BSP_SPI1_Send>
	BSP_SPI1_Send(Bufp, len);
 800196e:	88bb      	ldrh	r3, [r7, #4]
 8001970:	4619      	mov	r1, r3
 8001972:	6838      	ldr	r0, [r7, #0]
 8001974:	f000 fcbe 	bl	80022f4 <BSP_SPI1_Send>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	2110      	movs	r1, #16
 800197c:	4803      	ldr	r0, [pc, #12]	@ (800198c <wrap_platform_write+0x48>)
 800197e:	f002 fcef 	bl	8004360 <HAL_GPIO_WritePin>
	return 0;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40020000 	.word	0x40020000

08001990 <calculateDisplayIndex>:

int calculateDisplayIndex(double displacement, double max_displacement) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	ed87 0b02 	vstr	d0, [r7, #8]
 800199a:	ed87 1b00 	vstr	d1, [r7]
    double k = max_displacement / 154.0; // Total range divided into 90 segments (77 each way)
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <calculateDisplayIndex+0xa0>)
 80019a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019a8:	f7fe ff70 	bl	800088c <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int range_index;

    // Calculate relative displacement from the current start point
    double relative_displacement = displacement - start_point;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <calculateDisplayIndex+0xa4>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019be:	f7fe fc83 	bl	80002c8 <__aeabi_dsub>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (last_direction == 0) { // Forward motion
 80019ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <calculateDisplayIndex+0xa8>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10e      	bne.n	80019f0 <calculateDisplayIndex+0x60>
        range_index = (int)(relative_displacement / k);
 80019d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019da:	f7fe ff57 	bl	800088c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f8d7 	bl	8000b98 <__aeabi_d2iz>
 80019ea:	4603      	mov	r3, r0
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ee:	e00f      	b.n	8001a10 <calculateDisplayIndex+0x80>
    } else { // Backward motion
        range_index = 77 - (int)(relative_displacement / k);  // Reverse index for backward motion
 80019f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019f8:	f7fe ff48 	bl	800088c <__aeabi_ddiv>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f8c8 	bl	8000b98 <__aeabi_d2iz>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f1c3 034d 	rsb	r3, r3, #77	@ 0x4d
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Clamping the range index to allowed values
    if (range_index < 0) range_index = 0;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da01      	bge.n	8001a1a <calculateDisplayIndex+0x8a>
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
    if (range_index > 77) range_index = 77;  // Clamp to max index for 45 segments
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	2b4d      	cmp	r3, #77	@ 0x4d
 8001a1e:	dd01      	ble.n	8001a24 <calculateDisplayIndex+0x94>
 8001a20:	234d      	movs	r3, #77	@ 0x4d
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24

    return range_index;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3728      	adds	r7, #40	@ 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40634000 	.word	0x40634000
 8001a34:	200004c0 	.word	0x200004c0
 8001a38:	200004c8 	.word	0x200004c8

08001a3c <sendDisplayData>:

void sendDisplayData(uint16_t (*ASCII)[11], int index) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
    int disp_array_idx = index / 11;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	4a12      	ldr	r2, [pc, #72]	@ (8001a94 <sendDisplayData+0x58>)
 8001a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4e:	1052      	asrs	r2, r2, #1
 8001a50:	17db      	asrs	r3, r3, #31
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	60fb      	str	r3, [r7, #12]
    int send_index = index % 11;
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <sendDisplayData+0x58>)
 8001a5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001a5e:	1059      	asrs	r1, r3, #1
 8001a60:	17d3      	asrs	r3, r2, #31
 8001a62:	1ac9      	subs	r1, r1, r3
 8001a64:	460b      	mov	r3, r1
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	440b      	add	r3, r1
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	60bb      	str	r3, [r7, #8]

    CombineAndSendNEW(ASCII[disp_array_idx][send_index], red);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2216      	movs	r2, #22
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a84:	2105      	movs	r1, #5
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe2e 	bl	80016e8 <CombineAndSendNEW>

}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2e8ba2e9 	.word	0x2e8ba2e9

08001a98 <Display>:

void Display(uint16_t (*ASCII)[11], double max_displacement, double centered_velocity, double current_displacement) {
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b08b      	sub	sp, #44	@ 0x2c
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	61f8      	str	r0, [r7, #28]
 8001aa0:	ed87 0b04 	vstr	d0, [r7, #16]
 8001aa4:	ed87 1b02 	vstr	d1, [r7, #8]
 8001aa8:	ed87 2b00 	vstr	d2, [r7]
    // Check and handle velocity zero crossing

    uint8_t current_direction = (centered_velocity > 0) ? 0 : 1;  // 0 for positive, 1 for negative
 8001aac:	2301      	movs	r3, #1
 8001aae:	461c      	mov	r4, r3
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001abc:	f7ff f84c 	bl	8000b58 <__aeabi_dcmpgt>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <Display+0x32>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	461c      	mov	r4, r3
 8001aca:	b2e3      	uxtb	r3, r4
 8001acc:	f083 0301 	eor.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (current_direction != last_direction) {
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <Display+0x84>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d008      	beq.n	8001af4 <Display+0x5c>
        start_point = current_displacement;
 8001ae2:	490f      	ldr	r1, [pc, #60]	@ (8001b20 <Display+0x88>)
 8001ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ae8:	e9c1 2300 	strd	r2, r3, [r1]
        last_direction = current_direction;
 8001aec:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <Display+0x84>)
 8001aee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001af2:	7013      	strb	r3, [r2, #0]
    }

    // Calculate the index for display based on the updated start point and current displacement
    range_index = calculateDisplayIndex(current_displacement, max_displacement);
 8001af4:	ed97 1b04 	vldr	d1, [r7, #16]
 8001af8:	ed97 0b00 	vldr	d0, [r7]
 8001afc:	f7ff ff48 	bl	8001990 <calculateDisplayIndex>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a08      	ldr	r2, [pc, #32]	@ (8001b24 <Display+0x8c>)
 8001b04:	6013      	str	r3, [r2, #0]

    // Send the character data corresponding to the calculated index to the display
    sendDisplayData(ASCII, range_index);
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <Display+0x8c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	69f8      	ldr	r0, [r7, #28]
 8001b0e:	f7ff ff95 	bl	8001a3c <sendDisplayData>

}
 8001b12:	bf00      	nop
 8001b14:	372c      	adds	r7, #44	@ 0x2c
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200004c8 	.word	0x200004c8
 8001b20:	200004c0 	.word	0x200004c0
 8001b24:	200004b8 	.word	0x200004b8

08001b28 <HAL_TIM_PeriodElapsedCallback>:
    write_idx = (write_idx + 1) % BUFFER_SIZE;  // Update write index for circular buffering
    cnt++;
}

// Timer interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b38:	d102      	bne.n	8001b40 <HAL_TIM_PeriodElapsedCallback+0x18>

        // Update the buffer with the new accelerometer data
        //updateBuffer((double) acc_axes.x, write_idx);

        // Set flag to indicate new data is available or some other processing needs to be done
        timer_flag = TRUE;
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
        //elapsed_time_stop(1);
    }
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	200004b4 	.word	0x200004b4

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	ed2d 8b02 	vpush	{d8}
 8001b56:	b0b6      	sub	sp, #216	@ 0xd8
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  elapsed_time_init();
 8001b5a:	f7ff fc1f 	bl	800139c <elapsed_time_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5e:	f001 ff61 	bl	8003a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b62:	f000 f969 	bl	8001e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b66:	f7ff fcab 	bl	80014c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b6a:	f000 fe21 	bl	80027b0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001b6e:	f000 fa55 	bl	800201c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001b72:	f000 fd71 	bl	8002658 <MX_TIM2_Init>
  MX_TIM10_Init();
 8001b76:	f000 fdbb 	bl	80026f0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  OutputDisable();  // Disable outputs during initialization
 8001b7a:	f7ff fd55 	bl	8001628 <OutputDisable>
  SendLEDData(LED_CLEAR);
 8001b7e:	48a4      	ldr	r0, [pc, #656]	@ (8001e10 <main+0x2c0>)
 8001b80:	f7ff fd6a 	bl	8001658 <SendLEDData>
  OutputEnable();
 8001b84:	f7ff fd44 	bl	8001610 <OutputEnable>

  MEMS_Init();
 8001b88:	f000 f9c4 	bl	8001f14 <MEMS_Init>

  timer_flag = FALSE;
 8001b8c:	4ba1      	ldr	r3, [pc, #644]	@ (8001e14 <main+0x2c4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 8001b92:	48a1      	ldr	r0, [pc, #644]	@ (8001e18 <main+0x2c8>)
 8001b94:	f003 fedc 	bl	8005950 <HAL_TIM_Base_Start_IT>

  LatchEnable();
 8001b98:	f7ff fd52 	bl	8001640 <LatchEnable>

  LSM6DSL_Axes_t acc_axes;

  int acc_cnt = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  uint8_t zeroCrossing = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf

  double current_displacement = 0.0;
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

  double max_displacement = 0.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8

  double centered_velocity = 0.0;
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

  uint16_t ASCII_ARRAY[7][11];

	for (int i = 0; i < 7; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001bd2:	e0b7      	b.n	8001d44 <main+0x1f4>
		for (int j = 0; j < 11; j++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001bda:	e0a9      	b.n	8001d30 <main+0x1e0>

			if (i == 0)
 8001bdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10f      	bne.n	8001c04 <main+0xb4>
				ASCII_ARRAY[i][j] = 0;
 8001be4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001bf6:	4413      	add	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	33d8      	adds	r3, #216	@ 0xd8
 8001bfc:	443b      	add	r3, r7
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f823 2cd4 	strh.w	r2, [r3, #-212]
			if (i == 1)
 8001c04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d114      	bne.n	8001c36 <main+0xe6>
				ASCII_ARRAY[i][j] = E[j];
 8001c0c:	4a83      	ldr	r2, [pc, #524]	@ (8001e1c <main+0x2cc>)
 8001c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c12:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001c28:	4413      	add	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	33d8      	adds	r3, #216	@ 0xd8
 8001c2e:	443b      	add	r3, r7
 8001c30:	460a      	mov	r2, r1
 8001c32:	f823 2cd4 	strh.w	r2, [r3, #-212]
			if (i == 2)
 8001c36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d114      	bne.n	8001c68 <main+0x118>
				ASCII_ARRAY[i][j] = R[j];
 8001c3e:	4a78      	ldr	r2, [pc, #480]	@ (8001e20 <main+0x2d0>)
 8001c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c44:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001c48:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001c5a:	4413      	add	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	33d8      	adds	r3, #216	@ 0xd8
 8001c60:	443b      	add	r3, r7
 8001c62:	460a      	mov	r2, r1
 8001c64:	f823 2cd4 	strh.w	r2, [r3, #-212]
			if (i == 3)
 8001c68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d114      	bne.n	8001c9a <main+0x14a>
				ASCII_ARRAY[i][j] = I[j];
 8001c70:	4a6c      	ldr	r2, [pc, #432]	@ (8001e24 <main+0x2d4>)
 8001c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c76:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001c7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001c8c:	4413      	add	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	33d8      	adds	r3, #216	@ 0xd8
 8001c92:	443b      	add	r3, r7
 8001c94:	460a      	mov	r2, r1
 8001c96:	f823 2cd4 	strh.w	r2, [r3, #-212]
			if (i == 4)
 8001c9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d114      	bne.n	8001ccc <main+0x17c>
				ASCII_ARRAY[i][j] = K[j];
 8001ca2:	4a61      	ldr	r2, [pc, #388]	@ (8001e28 <main+0x2d8>)
 8001ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ca8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	33d8      	adds	r3, #216	@ 0xd8
 8001cc4:	443b      	add	r3, r7
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	f823 2cd4 	strh.w	r2, [r3, #-212]
			if (i == 5)
 8001ccc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d114      	bne.n	8001cfe <main+0x1ae>
				ASCII_ARRAY[i][j] = A[j];
 8001cd4:	4a55      	ldr	r2, [pc, #340]	@ (8001e2c <main+0x2dc>)
 8001cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001cda:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001cf0:	4413      	add	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	33d8      	adds	r3, #216	@ 0xd8
 8001cf6:	443b      	add	r3, r7
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	f823 2cd4 	strh.w	r2, [r3, #-212]
			if (i == 6)
 8001cfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d10f      	bne.n	8001d26 <main+0x1d6>
				ASCII_ARRAY[i][j] = 0;
 8001d06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001d18:	4413      	add	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	33d8      	adds	r3, #216	@ 0xd8
 8001d1e:	443b      	add	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	f823 2cd4 	strh.w	r2, [r3, #-212]
		for (int j = 0; j < 11; j++) {
 8001d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d34:	2b0a      	cmp	r3, #10
 8001d36:	f77f af51 	ble.w	8001bdc <main+0x8c>
	for (int i = 0; i < 7; i++) {
 8001d3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	f77f af43 	ble.w	8001bd4 <main+0x84>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {


		if (timer_flag == TRUE) {
 8001d4e:	4b31      	ldr	r3, [pc, #196]	@ (8001e14 <main+0x2c4>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d1fa      	bne.n	8001d4e <main+0x1fe>

			elapsed_time_start(0);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff fb4d 	bl	80013f8 <elapsed_time_start>

			LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes); // Get new accelerometer data
 8001d5e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4832      	ldr	r0, [pc, #200]	@ (8001e30 <main+0x2e0>)
 8001d66:	f001 f807 	bl	8002d78 <LSM6DSL_ACC_GetAxes>

			//overflow_check();

			update_motion(updateMeanAndCenterData(acc_axes.x), acc_cnt,1,&zeroCrossing, &current_displacement, &max_displacement, &centered_velocity);
 8001d6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf8 	bl	8000564 <__aeabi_i2d>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	ec43 2b10 	vmov	d0, r2, r3
 8001d7c:	f7ff f8ac 	bl	8000ed8 <updateMeanAndCenterData>
 8001d80:	eeb0 8a40 	vmov.f32	s16, s0
 8001d84:	eef0 8a60 	vmov.f32	s17, s1
 8001d88:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001d8c:	f7fe fbea 	bl	8000564 <__aeabi_i2d>
 8001d90:	4604      	mov	r4, r0
 8001d92:	460d      	mov	r5, r1
 8001d94:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001d98:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001d9c:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001da0:	f107 00bf 	add.w	r0, r7, #191	@ 0xbf
 8001da4:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 8001e08 <main+0x2b8>
 8001da8:	ec45 4b11 	vmov	d1, r4, r5
 8001dac:	eeb0 0a48 	vmov.f32	s0, s16
 8001db0:	eef0 0a68 	vmov.f32	s1, s17
 8001db4:	f7ff fa3c 	bl	8001230 <update_motion>

			acc_cnt++;
 8001db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

			if (disp_usable) {
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <main+0x2e4>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d015      	beq.n	8001df6 <main+0x2a6>
				Display(ASCII_ARRAY, max_displacement, centered_velocity, current_displacement);
 8001dca:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 8001dce:	ed97 6b28 	vldr	d6, [r7, #160]	@ 0xa0
 8001dd2:	ed97 5b2c 	vldr	d5, [r7, #176]	@ 0xb0
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	eeb0 2a45 	vmov.f32	s4, s10
 8001ddc:	eef0 2a65 	vmov.f32	s5, s11
 8001de0:	eeb0 1a46 	vmov.f32	s2, s12
 8001de4:	eef0 1a66 	vmov.f32	s3, s13
 8001de8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dec:	eef0 0a67 	vmov.f32	s1, s15
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fe51 	bl	8001a98 <Display>
			//acc_cnt);

			//printf("%d %d \r\n",acc_axes.x, acc_cnt);


			timer_flag = FALSE;
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <main+0x2c4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
			elapsed_time_stop(0);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff fb11 	bl	8001424 <elapsed_time_stop>
		if (timer_flag == TRUE) {
 8001e02:	e7a4      	b.n	8001d4e <main+0x1fe>
 8001e04:	f3af 8000 	nop.w
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	3ff00000 	.word	0x3ff00000
 8001e10:	200004cc 	.word	0x200004cc
 8001e14:	200004b4 	.word	0x200004b4
 8001e18:	2000058c 	.word	0x2000058c
 8001e1c:	20000018 	.word	0x20000018
 8001e20:	20000030 	.word	0x20000030
 8001e24:	20000048 	.word	0x20000048
 8001e28:	20000060 	.word	0x20000060
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000478 	.word	0x20000478
 8001e34:	200004b5 	.word	0x200004b5

08001e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b094      	sub	sp, #80	@ 0x50
 8001e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	2234      	movs	r2, #52	@ 0x34
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 ff07 	bl	8007c5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <SystemClock_Config+0xd4>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <SystemClock_Config+0xd4>)
 8001e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6c:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <SystemClock_Config+0xd4>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e78:	2300      	movs	r3, #0
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <SystemClock_Config+0xd8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e84:	4a22      	ldr	r2, [pc, #136]	@ (8001f10 <SystemClock_Config+0xd8>)
 8001e86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <SystemClock_Config+0xd8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001eac:	2310      	movs	r3, #16
 8001eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eb0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001eb4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fdc6 	bl	8004a58 <HAL_RCC_OscConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001ed2:	f000 f89d 	bl	8002010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed6:	230f      	movs	r3, #15
 8001ed8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eda:	2302      	movs	r3, #2
 8001edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001ee2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 fa66 	bl	80043c4 <HAL_RCC_ClockConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001efe:	f000 f887 	bl	8002010 <Error_Handler>
  }
}
 8001f02:	bf00      	nop
 8001f04:	3750      	adds	r7, #80	@ 0x50
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40007000 	.word	0x40007000

08001f14 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	@ 0x30
 8001f18:	af00      	add	r7, sp, #0
  uint8_t id ;
  LSM6DSL_AxesRaw_t axes;
  float odr;

  /* Link I2C functions to the LSM6DSL driver */
	io_ctx.BusType = LSM6DSL_SPI_4WIRES_BUS;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	61bb      	str	r3, [r7, #24]
	io_ctx.Address = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	773b      	strb	r3, [r7, #28]
	io_ctx.Init = BSP_SPI1_Init;
 8001f22:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <MEMS_Init+0x88>)
 8001f24:	613b      	str	r3, [r7, #16]
	io_ctx.DeInit = BSP_SPI1_DeInit;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <MEMS_Init+0x8c>)
 8001f28:	617b      	str	r3, [r7, #20]
	io_ctx.ReadReg = wrap_platform_read;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <MEMS_Init+0x90>)
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
	io_ctx.WriteReg = wrap_platform_write;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <MEMS_Init+0x94>)
 8001f30:	623b      	str	r3, [r7, #32]
	io_ctx.GetTick = BSP_GetTick;
 8001f32:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <MEMS_Init+0x98>)
 8001f34:	62bb      	str	r3, [r7, #40]	@ 0x28
	LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481c      	ldr	r0, [pc, #112]	@ (8001fb0 <MEMS_Init+0x9c>)
 8001f3e:	f000 fcdb 	bl	80028f8 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8001f42:	f107 030f 	add.w	r3, r7, #15
 8001f46:	4619      	mov	r1, r3
 8001f48:	4819      	ldr	r0, [pc, #100]	@ (8001fb0 <MEMS_Init+0x9c>)
 8001f4a:	f000 fda8 	bl	8002a9e <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2b6a      	cmp	r3, #106	@ 0x6a
 8001f52:	d001      	beq.n	8001f58 <MEMS_Init+0x44>
    Error_Handler();
 8001f54:	f000 f85c 	bl	8002010 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 8001f58:	4815      	ldr	r0, [pc, #84]	@ (8001fb0 <MEMS_Init+0x9c>)
 8001f5a:	f000 fd37 	bl	80029cc <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 1660.0f); /* 3330 Hz */
 8001f5e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001fb4 <MEMS_Init+0xa0>
 8001f62:	4813      	ldr	r0, [pc, #76]	@ (8001fb0 <MEMS_Init+0x9c>)
 8001f64:	f000 fea0 	bl	8002ca8 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 8);          /* [-4000mg; +4000mg]  old*/
 8001f68:	2108      	movs	r1, #8
 8001f6a:	4811      	ldr	r0, [pc, #68]	@ (8001fb0 <MEMS_Init+0x9c>)
 8001f6c:	f000 feb8 	bl	8002ce0 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8001f70:	2101      	movs	r1, #1
 8001f72:	480f      	ldr	r0, [pc, #60]	@ (8001fb0 <MEMS_Init+0x9c>)
 8001f74:	f000 ff72 	bl	8002e5c <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <MEMS_Init+0x9c>)
 8001f80:	f000 fed6 	bl	8002d30 <LSM6DSL_ACC_GetAxesRaw>



  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8001f84:	480a      	ldr	r0, [pc, #40]	@ (8001fb0 <MEMS_Init+0x9c>)
 8001f86:	f000 fda0 	bl	8002aca <LSM6DSL_ACC_Enable>

  LSM6DSL_ACC_GetOutputDataRate(&MotionSensor, &odr);
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4808      	ldr	r0, [pc, #32]	@ (8001fb0 <MEMS_Init+0x9c>)
 8001f90:	f000 fe06 	bl	8002ba0 <LSM6DSL_ACC_GetOutputDataRate>
}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	@ 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	08002245 	.word	0x08002245
 8001fa0:	080022a5 	.word	0x080022a5
 8001fa4:	080018ed 	.word	0x080018ed
 8001fa8:	08001945 	.word	0x08001945
 8001fac:	0800236d 	.word	0x0800236d
 8001fb0:	20000478 	.word	0x20000478
 8001fb4:	44cf8000 	.word	0x44cf8000

08001fb8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fc8:	d104      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 8001fca:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	4a03      	ldr	r2, [pc, #12]	@ (8001fe0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001fd2:	6013      	str	r3, [r2, #0]
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	200004b0 	.word	0x200004b0

08001fe4 <_write>:

int _write(int fd, char * ptr, int len)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	4804      	ldr	r0, [pc, #16]	@ (800200c <_write+0x28>)
 8001ffc:	f004 f91e 	bl	800623c <HAL_UART_Transmit>
  return len;
 8002000:	687b      	ldr	r3, [r7, #4]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000061c 	.word	0x2000061c

08002010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002014:	b672      	cpsid	i
}
 8002016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <Error_Handler+0x8>

0800201c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002020:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002022:	4a18      	ldr	r2, [pc, #96]	@ (8002084 <MX_SPI2_Init+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002028:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800202c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_SPI2_Init+0x64>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800204c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800204e:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002054:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_SPI2_Init+0x64>)
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002060:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_SPI2_Init+0x64>)
 8002068:	220a      	movs	r2, #10
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	@ (8002080 <MX_SPI2_Init+0x64>)
 800206e:	f002 ff91 	bl	8004f94 <HAL_SPI_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002078:	f7ff ffca 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200004d4 	.word	0x200004d4
 8002084:	40003800 	.word	0x40003800

08002088 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	@ 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a19      	ldr	r2, [pc, #100]	@ (800210c <HAL_SPI_MspInit+0x84>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12c      	bne.n	8002104 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_SPI_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80020e2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020f4:	2305      	movs	r3, #5
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <HAL_SPI_MspInit+0x8c>)
 8002100:	f001 fea6 	bl	8003e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	@ 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40003800 	.word	0x40003800
 8002110:	40023800 	.word	0x40023800
 8002114:	40020400 	.word	0x40020400

08002118 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a08      	ldr	r2, [pc, #32]	@ (8002148 <HAL_SPI_MspDeInit+0x30>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10a      	bne.n	8002140 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800212a:	4b08      	ldr	r3, [pc, #32]	@ (800214c <HAL_SPI_MspDeInit+0x34>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	4a07      	ldr	r2, [pc, #28]	@ (800214c <HAL_SPI_MspDeInit+0x34>)
 8002130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002134:	6413      	str	r3, [r2, #64]	@ 0x40

    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8002136:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800213a:	4805      	ldr	r0, [pc, #20]	@ (8002150 <HAL_SPI_MspDeInit+0x38>)
 800213c:	f002 f81c 	bl	8004178 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40003800 	.word	0x40003800
 800214c:	40023800 	.word	0x40023800
 8002150:	40020400 	.word	0x40020400

08002154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002168:	6453      	str	r3, [r2, #68]	@ 0x44
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <HAL_MspInit+0x4c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	@ 0x40
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002192:	2007      	movs	r0, #7
 8002194:	f001 fd88 	bl	8003ca8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800

080021a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <NMI_Handler+0x4>

080021ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <MemManage_Handler+0x4>

080021bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <UsageFault_Handler+0x4>

080021cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fa:	f001 fc65 	bl	8003ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <TIM2_IRQHandler+0x10>)
 800220a:	f003 fc11 	bl	8005a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000058c 	.word	0x2000058c

08002218 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <USART2_IRQHandler+0x10>)
 800221e:	f004 f899 	bl	8006354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000061c 	.word	0x2000061c

0800222c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002230:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002234:	f002 f8ae 	bl	8004394 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002238:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800223c:	f002 f8aa 	bl	8004394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <BSP_SPI1_Init+0x54>)
 8002250:	4a12      	ldr	r2, [pc, #72]	@ (800229c <BSP_SPI1_Init+0x58>)
 8002252:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <BSP_SPI1_Init+0x5c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	4911      	ldr	r1, [pc, #68]	@ (80022a0 <BSP_SPI1_Init+0x5c>)
 800225c:	600a      	str	r2, [r1, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d114      	bne.n	800228c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002262:	480d      	ldr	r0, [pc, #52]	@ (8002298 <BSP_SPI1_Init+0x54>)
 8002264:	f003 fa3a 	bl	80056dc <HAL_SPI_GetState>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10e      	bne.n	800228c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800226e:	480a      	ldr	r0, [pc, #40]	@ (8002298 <BSP_SPI1_Init+0x54>)
 8002270:	f000 f8c0 	bl	80023f4 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d108      	bne.n	800228c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800227a:	4807      	ldr	r0, [pc, #28]	@ (8002298 <BSP_SPI1_Init+0x54>)
 800227c:	f000 f87e 	bl	800237c <MX_SPI1_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002286:	f06f 0307 	mvn.w	r3, #7
 800228a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000052c 	.word	0x2000052c
 800229c:	40013000 	.word	0x40013000
 80022a0:	20000584 	.word	0x20000584

080022a4 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80022aa:	f06f 0307 	mvn.w	r3, #7
 80022ae:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 80022b0:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <BSP_SPI1_DeInit+0x48>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <BSP_SPI1_DeInit+0x3c>
  {
    if (--SPI1InitCounter == 0)
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <BSP_SPI1_DeInit+0x48>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3b01      	subs	r3, #1
 80022be:	4a0b      	ldr	r2, [pc, #44]	@ (80022ec <BSP_SPI1_DeInit+0x48>)
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <BSP_SPI1_DeInit+0x48>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <BSP_SPI1_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
 80022ca:	4809      	ldr	r0, [pc, #36]	@ (80022f0 <BSP_SPI1_DeInit+0x4c>)
 80022cc:	f000 f8ea 	bl	80024a4 <SPI1_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 80022d0:	4807      	ldr	r0, [pc, #28]	@ (80022f0 <BSP_SPI1_DeInit+0x4c>)
 80022d2:	f002 fee8 	bl	80050a6 <HAL_SPI_DeInit>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <BSP_SPI1_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80022e0:	687b      	ldr	r3, [r7, #4]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000584 	.word	0x20000584
 80022f0:	2000052c 	.word	0x2000052c

080022f4 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002304:	887a      	ldrh	r2, [r7, #2]
 8002306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4806      	ldr	r0, [pc, #24]	@ (8002328 <BSP_SPI1_Send+0x34>)
 800230e:	f002 fef2 	bl	80050f6 <HAL_SPI_Transmit>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002318:	f06f 0305 	mvn.w	r3, #5
 800231c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000052c 	.word	0x2000052c

0800232c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002344:	9200      	str	r2, [sp, #0]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	68f9      	ldr	r1, [r7, #12]
 800234a:	4807      	ldr	r0, [pc, #28]	@ (8002368 <BSP_SPI1_SendRecv+0x3c>)
 800234c:	f003 f816 	bl	800537c <HAL_SPI_TransmitReceive>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002356:	f06f 0305 	mvn.w	r3, #5
 800235a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800235c:	697b      	ldr	r3, [r7, #20]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	2000052c 	.word	0x2000052c

0800236c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002370:	f001 fbbe 	bl	8003af0 <HAL_GetTick>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a19      	ldr	r2, [pc, #100]	@ (80023f0 <MX_SPI1_Init+0x74>)
 800238c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002394:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b4:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2218      	movs	r2, #24
 80023ba:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 10;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	220a      	movs	r2, #10
 80023d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f002 fddd 	bl	8004f94 <HAL_SPI_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40013000 	.word	0x40013000

080023f4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	@ 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	4b26      	ldr	r3, [pc, #152]	@ (800249c <SPI1_MspInit+0xa8>)
 8002402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002404:	4a25      	ldr	r2, [pc, #148]	@ (800249c <SPI1_MspInit+0xa8>)
 8002406:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800240a:	6453      	str	r3, [r2, #68]	@ 0x44
 800240c:	4b23      	ldr	r3, [pc, #140]	@ (800249c <SPI1_MspInit+0xa8>)
 800240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002410:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <SPI1_MspInit+0xa8>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	4a1e      	ldr	r2, [pc, #120]	@ (800249c <SPI1_MspInit+0xa8>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6313      	str	r3, [r2, #48]	@ 0x30
 8002428:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <SPI1_MspInit+0xa8>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002434:	2320      	movs	r3, #32
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002444:	2305      	movs	r3, #5
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4814      	ldr	r0, [pc, #80]	@ (80024a0 <SPI1_MspInit+0xac>)
 8002450:	f001 fcfe 	bl	8003e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002454:	2340      	movs	r3, #64	@ 0x40
 8002456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002460:	2303      	movs	r3, #3
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002464:	2305      	movs	r3, #5
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	480c      	ldr	r0, [pc, #48]	@ (80024a0 <SPI1_MspInit+0xac>)
 8002470:	f001 fcee 	bl	8003e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002484:	2305      	movs	r3, #5
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	4804      	ldr	r0, [pc, #16]	@ (80024a0 <SPI1_MspInit+0xac>)
 8002490:	f001 fcde 	bl	8003e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	@ 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020000 	.word	0x40020000

080024a4 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80024ac:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <SPI1_MspDeInit+0x34>)
 80024ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b0:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <SPI1_MspDeInit+0x34>)
 80024b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024b6:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 80024b8:	2120      	movs	r1, #32
 80024ba:	4808      	ldr	r0, [pc, #32]	@ (80024dc <SPI1_MspDeInit+0x38>)
 80024bc:	f001 fe5c 	bl	8004178 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 80024c0:	2140      	movs	r1, #64	@ 0x40
 80024c2:	4806      	ldr	r0, [pc, #24]	@ (80024dc <SPI1_MspDeInit+0x38>)
 80024c4:	f001 fe58 	bl	8004178 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 80024c8:	2180      	movs	r1, #128	@ 0x80
 80024ca:	4804      	ldr	r0, [pc, #16]	@ (80024dc <SPI1_MspDeInit+0x38>)
 80024cc:	f001 fe54 	bl	8004178 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000

080024e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_kill>:

int _kill(int pid, int sig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024fa:	f005 fc01 	bl	8007d00 <__errno>
 80024fe:	4603      	mov	r3, r0
 8002500:	2216      	movs	r2, #22
 8002502:	601a      	str	r2, [r3, #0]
  return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_exit>:

void _exit (int status)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe7 	bl	80024f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002522:	bf00      	nop
 8002524:	e7fd      	b.n	8002522 <_exit+0x12>

08002526 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e00a      	b.n	800254e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002538:	f3af 8000 	nop.w
 800253c:	4601      	mov	r1, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	60ba      	str	r2, [r7, #8]
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	dbf0      	blt.n	8002538 <_read+0x12>
  }

  return len;
 8002556:	687b      	ldr	r3, [r7, #4]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002588:	605a      	str	r2, [r3, #4]
  return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_isatty>:

int _isatty(int file)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025a0:	2301      	movs	r3, #1
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d0:	4a14      	ldr	r2, [pc, #80]	@ (8002624 <_sbrk+0x5c>)
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <_sbrk+0x60>)
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <_sbrk+0x64>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	@ (8002630 <_sbrk+0x68>)
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d207      	bcs.n	8002608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f8:	f005 fb82 	bl	8007d00 <__errno>
 80025fc:	4603      	mov	r3, r0
 80025fe:	220c      	movs	r2, #12
 8002600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e009      	b.n	800261c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002608:	4b08      	ldr	r3, [pc, #32]	@ (800262c <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260e:	4b07      	ldr	r3, [pc, #28]	@ (800262c <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	4a05      	ldr	r2, [pc, #20]	@ (800262c <_sbrk+0x64>)
 8002618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20020000 	.word	0x20020000
 8002628:	00000400 	.word	0x00000400
 800262c:	20000588 	.word	0x20000588
 8002630:	200007b8 	.word	0x200007b8

08002634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <SystemInit+0x20>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263e:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <SystemInit+0x20>)
 8002640:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002644:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	463b      	mov	r3, r7
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002674:	4b1d      	ldr	r3, [pc, #116]	@ (80026ec <MX_TIM2_Init+0x94>)
 8002676:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800267a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 800267c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <MX_TIM2_Init+0x94>)
 800267e:	2214      	movs	r2, #20
 8002680:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002682:	4b1a      	ldr	r3, [pc, #104]	@ (80026ec <MX_TIM2_Init+0x94>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002688:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <MX_TIM2_Init+0x94>)
 800268a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800268e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002690:	4b16      	ldr	r3, [pc, #88]	@ (80026ec <MX_TIM2_Init+0x94>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <MX_TIM2_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800269c:	4813      	ldr	r0, [pc, #76]	@ (80026ec <MX_TIM2_Init+0x94>)
 800269e:	f003 f907 	bl	80058b0 <HAL_TIM_Base_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026a8:	f7ff fcb2 	bl	8002010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	480c      	ldr	r0, [pc, #48]	@ (80026ec <MX_TIM2_Init+0x94>)
 80026ba:	f003 faa9 	bl	8005c10 <HAL_TIM_ConfigClockSource>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026c4:	f7ff fca4 	bl	8002010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026d0:	463b      	mov	r3, r7
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	@ (80026ec <MX_TIM2_Init+0x94>)
 80026d6:	f003 fcd1 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026e0:	f7ff fc96 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000058c 	.word	0x2000058c

080026f0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002730 <MX_TIM10_Init+0x40>)
 80026f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002734 <MX_TIM10_Init+0x44>)
 80026f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <MX_TIM10_Init+0x40>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <MX_TIM10_Init+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0xFFFF;
 8002706:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <MX_TIM10_Init+0x40>)
 8002708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800270c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270e:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <MX_TIM10_Init+0x40>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <MX_TIM10_Init+0x40>)
 8002716:	2200      	movs	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800271a:	4805      	ldr	r0, [pc, #20]	@ (8002730 <MX_TIM10_Init+0x40>)
 800271c:	f003 f8c8 	bl	80058b0 <HAL_TIM_Base_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002726:	f7ff fc73 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200005d4 	.word	0x200005d4
 8002734:	40014400 	.word	0x40014400

08002738 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002748:	d116      	bne.n	8002778 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <HAL_TIM_Base_MspInit+0x70>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a15      	ldr	r2, [pc, #84]	@ (80027a8 <HAL_TIM_Base_MspInit+0x70>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <HAL_TIM_Base_MspInit+0x70>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	201c      	movs	r0, #28
 800276c:	f001 faa7 	bl	8003cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002770:	201c      	movs	r0, #28
 8002772:	f001 fac0 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002776:	e012      	b.n	800279e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0b      	ldr	r2, [pc, #44]	@ (80027ac <HAL_TIM_Base_MspInit+0x74>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10d      	bne.n	800279e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <HAL_TIM_Base_MspInit+0x70>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	4a07      	ldr	r2, [pc, #28]	@ (80027a8 <HAL_TIM_Base_MspInit+0x70>)
 800278c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002790:	6453      	str	r3, [r2, #68]	@ 0x44
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_TIM_Base_MspInit+0x70>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40014400 	.word	0x40014400

080027b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <MX_USART2_UART_Init+0x4c>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <MX_USART2_UART_Init+0x50>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <MX_USART2_UART_Init+0x4c>)
 80027bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <MX_USART2_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <MX_USART2_UART_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <MX_USART2_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <MX_USART2_UART_Init+0x4c>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <MX_USART2_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <MX_USART2_UART_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	@ (80027fc <MX_USART2_UART_Init+0x4c>)
 80027e8:	f003 fcd8 	bl	800619c <HAL_UART_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027f2:	f7ff fc0d 	bl	8002010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	2000061c 	.word	0x2000061c
 8002800:	40004400 	.word	0x40004400

08002804 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	@ 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_UART_MspInit+0x94>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d133      	bne.n	800288e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b1c      	ldr	r3, [pc, #112]	@ (800289c <HAL_UART_MspInit+0x98>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a1b      	ldr	r2, [pc, #108]	@ (800289c <HAL_UART_MspInit+0x98>)
 8002830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
 8002836:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_UART_MspInit+0x98>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b15      	ldr	r3, [pc, #84]	@ (800289c <HAL_UART_MspInit+0x98>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	4a14      	ldr	r2, [pc, #80]	@ (800289c <HAL_UART_MspInit+0x98>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6313      	str	r3, [r2, #48]	@ 0x30
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_UART_MspInit+0x98>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800285e:	230c      	movs	r3, #12
 8002860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286a:	2303      	movs	r3, #3
 800286c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800286e:	2307      	movs	r3, #7
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	4619      	mov	r1, r3
 8002878:	4809      	ldr	r0, [pc, #36]	@ (80028a0 <HAL_UART_MspInit+0x9c>)
 800287a:	f001 fae9 	bl	8003e50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	2026      	movs	r0, #38	@ 0x26
 8002884:	f001 fa1b 	bl	8003cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002888:	2026      	movs	r0, #38	@ 0x26
 800288a:	f001 fa34 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	@ 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40004400 	.word	0x40004400
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020000 	.word	0x40020000

080028a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028a8:	f7ff fec4 	bl	8002634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028ac:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ae:	490d      	ldr	r1, [pc, #52]	@ (80028e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028b0:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b4:	e002      	b.n	80028bc <LoopCopyDataInit>

080028b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ba:	3304      	adds	r3, #4

080028bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c0:	d3f9      	bcc.n	80028b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c2:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028c4:	4c0a      	ldr	r4, [pc, #40]	@ (80028f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c8:	e001      	b.n	80028ce <LoopFillZerobss>

080028ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028cc:	3204      	adds	r2, #4

080028ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d0:	d3fb      	bcc.n	80028ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028d2:	f005 fa1b 	bl	8007d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028d6:	f7ff f93b 	bl	8001b50 <main>
  bx  lr    
 80028da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e4:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 80028e8:	08009e50 	.word	0x08009e50
  ldr r2, =_sbss
 80028ec:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 80028f0:	200007b4 	.word	0x200007b4

080028f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC_IRQHandler>
	...

080028f8 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e051      	b.n	80029b8 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	7b1a      	ldrb	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <LSM6DSL_RegisterBusIO+0xcc>)
 8002950:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1c      	ldr	r2, [pc, #112]	@ (80029c8 <LSM6DSL_RegisterBusIO+0xd0>)
 8002956:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d103      	bne.n	8002976 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e020      	b.n	80029b8 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4798      	blx	r3
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e016      	b.n	80029b8 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d112      	bne.n	80029b8 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800299c:	230c      	movs	r3, #12
 800299e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80029a0:	7afb      	ldrb	r3, [r7, #11]
 80029a2:	461a      	mov	r2, r3
 80029a4:	2112      	movs	r1, #18
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa3d 	bl	8002e26 <LSM6DSL_Write_Reg>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295
 80029b6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80029b8:	68fb      	ldr	r3, [r7, #12]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	080030e1 	.word	0x080030e1
 80029c8:	08003117 	.word	0x08003117

080029cc <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3320      	adds	r3, #32
 80029d8:	2101      	movs	r1, #1
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fd9d 	bl	800351a <lsm6dsl_auto_increment_set>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	e054      	b.n	8002a96 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3320      	adds	r3, #32
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fd12 	bl	800341c <lsm6dsl_block_data_update_set>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	e048      	b.n	8002a96 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3320      	adds	r3, #32
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 ffe4 	bl	80039d8 <lsm6dsl_fifo_mode_set>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	e03c      	b.n	8002a96 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3320      	adds	r3, #32
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fc1c 	bl	8003268 <lsm6dsl_xl_data_rate_set>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	e02c      	b.n	8002a96 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3320      	adds	r3, #32
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fbb2 	bl	80031ac <lsm6dsl_xl_full_scale_set>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e020      	b.n	8002a96 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2204      	movs	r2, #4
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3320      	adds	r3, #32
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fcb4 	bl	80033d0 <lsm6dsl_gy_data_rate_set>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e010      	b.n	8002a96 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3320      	adds	r3, #32
 8002a78:	2106      	movs	r1, #6
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fc82 	bl	8003384 <lsm6dsl_gy_full_scale_set>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e004      	b.n	8002a96 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3320      	adds	r3, #32
 8002aac:	6839      	ldr	r1, [r7, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fd22 	bl	80034f8 <lsm6dsl_device_id_get>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	e000      	b.n	8002ac2 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e014      	b.n	8002b0a <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f103 0220 	add.w	r2, r3, #32
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f000 fbba 	bl	8003268 <lsm6dsl_xl_data_rate_set>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	e004      	b.n	8002b0a <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3320      	adds	r3, #32
 8002b26:	f107 020b 	add.w	r2, r7, #11
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fb63 	bl	80031f8 <lsm6dsl_xl_full_scale_get>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3c:	e023      	b.n	8002b86 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d81b      	bhi.n	8002b7c <LSM6DSL_ACC_GetSensitivity+0x68>
 8002b44:	a201      	add	r2, pc, #4	@ (adr r2, 8002b4c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b5d 	.word	0x08002b5d
 8002b50:	08002b75 	.word	0x08002b75
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b6d 	.word	0x08002b6d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b90 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8002b60:	601a      	str	r2, [r3, #0]
      break;
 8002b62:	e00f      	b.n	8002b84 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4a0b      	ldr	r2, [pc, #44]	@ (8002b94 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8002b68:	601a      	str	r2, [r3, #0]
      break;
 8002b6a:	e00b      	b.n	8002b84 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8002b70:	601a      	str	r2, [r3, #0]
      break;
 8002b72:	e007      	b.n	8002b84 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4a09      	ldr	r2, [pc, #36]	@ (8002b9c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8002b78:	601a      	str	r2, [r3, #0]
      break;
 8002b7a:	e003      	b.n	8002b84 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	60fb      	str	r3, [r7, #12]
      break;
 8002b82:	bf00      	nop
  }

  return ret;
 8002b84:	68fb      	ldr	r3, [r7, #12]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	3d79db23 	.word	0x3d79db23
 8002b94:	3df9db23 	.word	0x3df9db23
 8002b98:	3e79db23 	.word	0x3e79db23
 8002b9c:	3ef9db23 	.word	0x3ef9db23

08002ba0 <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3320      	adds	r3, #32
 8002bb2:	f107 020b 	add.w	r2, r7, #11
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fb7b 	bl	80032b4 <lsm6dsl_xl_data_rate_get>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	e054      	b.n	8002c74 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8002bca:	7afb      	ldrb	r3, [r7, #11]
 8002bcc:	2b0b      	cmp	r3, #11
 8002bce:	d84c      	bhi.n	8002c6a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8002bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002c09 	.word	0x08002c09
 8002bdc:	08002c1b 	.word	0x08002c1b
 8002be0:	08002c23 	.word	0x08002c23
 8002be4:	08002c2b 	.word	0x08002c2b
 8002be8:	08002c33 	.word	0x08002c33
 8002bec:	08002c3b 	.word	0x08002c3b
 8002bf0:	08002c43 	.word	0x08002c43
 8002bf4:	08002c4b 	.word	0x08002c4b
 8002bf8:	08002c53 	.word	0x08002c53
 8002bfc:	08002c5b 	.word	0x08002c5b
 8002c00:	08002c63 	.word	0x08002c63
 8002c04:	08002c13 	.word	0x08002c13
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
      break;
 8002c10:	e02f      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	4a19      	ldr	r2, [pc, #100]	@ (8002c7c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8002c16:	601a      	str	r2, [r3, #0]
      break;
 8002c18:	e02b      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	@ (8002c80 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8002c1e:	601a      	str	r2, [r3, #0]
      break;
 8002c20:	e027      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	4a17      	ldr	r2, [pc, #92]	@ (8002c84 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8002c26:	601a      	str	r2, [r3, #0]
      break;
 8002c28:	e023      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	4a16      	ldr	r2, [pc, #88]	@ (8002c88 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8002c2e:	601a      	str	r2, [r3, #0]
      break;
 8002c30:	e01f      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	4a15      	ldr	r2, [pc, #84]	@ (8002c8c <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8002c36:	601a      	str	r2, [r3, #0]
      break;
 8002c38:	e01b      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8002c3e:	601a      	str	r2, [r3, #0]
      break;
 8002c40:	e017      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	4a13      	ldr	r2, [pc, #76]	@ (8002c94 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8002c46:	601a      	str	r2, [r3, #0]
      break;
 8002c48:	e013      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	4a12      	ldr	r2, [pc, #72]	@ (8002c98 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8002c4e:	601a      	str	r2, [r3, #0]
      break;
 8002c50:	e00f      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	4a11      	ldr	r2, [pc, #68]	@ (8002c9c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8002c56:	601a      	str	r2, [r3, #0]
      break;
 8002c58:	e00b      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	4a10      	ldr	r2, [pc, #64]	@ (8002ca0 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8002c5e:	601a      	str	r2, [r3, #0]
      break;
 8002c60:	e007      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca4 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8002c66:	601a      	str	r2, [r3, #0]
      break;
 8002c68:	e003      	b.n	8002c72 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	60fb      	str	r3, [r7, #12]
      break;
 8002c70:	bf00      	nop
  }

  return ret;
 8002c72:	68fb      	ldr	r3, [r7, #12]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	3fcccccd 	.word	0x3fcccccd
 8002c80:	41480000 	.word	0x41480000
 8002c84:	41d00000 	.word	0x41d00000
 8002c88:	42500000 	.word	0x42500000
 8002c8c:	42d00000 	.word	0x42d00000
 8002c90:	43500000 	.word	0x43500000
 8002c94:	43d00000 	.word	0x43d00000
 8002c98:	44504000 	.word	0x44504000
 8002c9c:	44cf8000 	.word	0x44cf8000
 8002ca0:	45502000 	.word	0x45502000
 8002ca4:	45d02000 	.word	0x45d02000

08002ca8 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d106      	bne.n	8002ccc <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002cbe:	ed97 0a00 	vldr	s0, [r7]
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8fe 	bl	8002ec4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	e005      	b.n	8002cd8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002ccc:	ed97 0a00 	vldr	s0, [r7]
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f983 	bl	8002fdc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8002cd6:	4603      	mov	r3, r0
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	dd0b      	ble.n	8002d08 <LSM6DSL_ACC_SetFullScale+0x28>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	dd06      	ble.n	8002d04 <LSM6DSL_ACC_SetFullScale+0x24>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	dc01      	bgt.n	8002d00 <LSM6DSL_ACC_SetFullScale+0x20>
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e004      	b.n	8002d0a <LSM6DSL_ACC_SetFullScale+0x2a>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e002      	b.n	8002d0a <LSM6DSL_ACC_SetFullScale+0x2a>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e000      	b.n	8002d0a <LSM6DSL_ACC_SetFullScale+0x2a>
 8002d08:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8002d0a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3320      	adds	r3, #32
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fa49 	bl	80031ac <lsm6dsl_xl_full_scale_set>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	e000      	b.n	8002d28 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3320      	adds	r3, #32
 8002d3e:	f107 0208 	add.w	r2, r7, #8
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fb8f 	bl	8003468 <lsm6dsl_acceleration_raw_get>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
 8002d54:	e00c      	b.n	8002d70 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002d56:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002d5e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002d66:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3320      	adds	r3, #32
 8002d8c:	f107 0210 	add.w	r2, r7, #16
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fb68 	bl	8003468 <lsm6dsl_acceleration_raw_get>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	e03c      	b.n	8002e1e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff feb2 	bl	8002b14 <LSM6DSL_ACC_GetSensitivity>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	e030      	b.n	8002e1e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002dbc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd4:	ee17 2a90 	vmov	r2, s15
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002ddc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df4:	ee17 2a90 	vmov	r2, s15
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002dfc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e14:	ee17 2a90 	vmov	r2, s15
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
 8002e32:	4613      	mov	r3, r2
 8002e34:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f103 0020 	add.w	r0, r3, #32
 8002e3c:	1cba      	adds	r2, r7, #2
 8002e3e:	78f9      	ldrb	r1, [r7, #3]
 8002e40:	2301      	movs	r3, #1
 8002e42:	f000 f99b 	bl	800317c <lsm6dsl_write_reg>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e50:	e000      	b.n	8002e54 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3320      	adds	r3, #32
 8002e6c:	f107 020c 	add.w	r2, r7, #12
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fcda 	bl	800382c <lsm6dsl_pin_int1_route_get>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	e01b      	b.n	8002ebc <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d811      	bhi.n	8002eae <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	7b3b      	ldrb	r3, [r7, #12]
 8002e94:	f362 0300 	bfi	r3, r2, #0, #1
 8002e98:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3320      	adds	r3, #32
 8002e9e:	68f9      	ldr	r1, [r7, #12]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fb60 	bl	8003566 <lsm6dsl_pin_int1_route_set>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d006      	beq.n	8002eba <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8002eac:	e002      	b.n	8002eb4 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb2:	e003      	b.n	8002ebc <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8002eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb8:	e000      	b.n	8002ebc <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002ed0:	edd7 7a00 	vldr	s15, [r7]
 8002ed4:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	d801      	bhi.n	8002ee6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e058      	b.n	8002f98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002ee6:	edd7 7a00 	vldr	s15, [r7]
 8002eea:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8002eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef6:	d801      	bhi.n	8002efc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e04d      	b.n	8002f98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002efc:	edd7 7a00 	vldr	s15, [r7]
 8002f00:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002fc0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8002f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	d801      	bhi.n	8002f12 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e042      	b.n	8002f98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002f12:	edd7 7a00 	vldr	s15, [r7]
 8002f16:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002fc4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f22:	d801      	bhi.n	8002f28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002f24:	2304      	movs	r3, #4
 8002f26:	e037      	b.n	8002f98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002f28:	edd7 7a00 	vldr	s15, [r7]
 8002f2c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002fc8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f38:	d801      	bhi.n	8002f3e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e02c      	b.n	8002f98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002f3e:	edd7 7a00 	vldr	s15, [r7]
 8002f42:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002fcc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8002f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4e:	d801      	bhi.n	8002f54 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002f50:	2306      	movs	r3, #6
 8002f52:	e021      	b.n	8002f98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002f54:	edd7 7a00 	vldr	s15, [r7]
 8002f58:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002fd0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8002f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	d801      	bhi.n	8002f6a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8002f66:	2307      	movs	r3, #7
 8002f68:	e016      	b.n	8002f98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002f6a:	edd7 7a00 	vldr	s15, [r7]
 8002f6e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002fd4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8002f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7a:	d801      	bhi.n	8002f80 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	e00b      	b.n	8002f98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002f80:	edd7 7a00 	vldr	s15, [r7]
 8002f84:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002fd8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8002f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	d801      	bhi.n	8002f96 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8002f92:	2309      	movs	r3, #9
 8002f94:	e000      	b.n	8002f98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002f96:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002f98:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3320      	adds	r3, #32
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f960 	bl	8003268 <lsm6dsl_xl_data_rate_set>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	e000      	b.n	8002fb6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	42500000 	.word	0x42500000
 8002fc4:	42d00000 	.word	0x42d00000
 8002fc8:	43500000 	.word	0x43500000
 8002fcc:	43d00000 	.word	0x43d00000
 8002fd0:	44504000 	.word	0x44504000
 8002fd4:	44cf8000 	.word	0x44cf8000
 8002fd8:	45502000 	.word	0x45502000

08002fdc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002fe8:	edd7 7a00 	vldr	s15, [r7]
 8002fec:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff8:	d801      	bhi.n	8002ffe <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e058      	b.n	80030b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002ffe:	edd7 7a00 	vldr	s15, [r7]
 8003002:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8003006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300e:	d801      	bhi.n	8003014 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003010:	2302      	movs	r3, #2
 8003012:	e04d      	b.n	80030b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003014:	edd7 7a00 	vldr	s15, [r7]
 8003018:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80030c4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800301c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003024:	d801      	bhi.n	800302a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003026:	2303      	movs	r3, #3
 8003028:	e042      	b.n	80030b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800302a:	edd7 7a00 	vldr	s15, [r7]
 800302e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80030c8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8003032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303a:	d801      	bhi.n	8003040 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800303c:	2304      	movs	r3, #4
 800303e:	e037      	b.n	80030b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003040:	edd7 7a00 	vldr	s15, [r7]
 8003044:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80030cc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	d801      	bhi.n	8003056 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003052:	2305      	movs	r3, #5
 8003054:	e02c      	b.n	80030b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003056:	edd7 7a00 	vldr	s15, [r7]
 800305a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80030d0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800305e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	d801      	bhi.n	800306c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003068:	2306      	movs	r3, #6
 800306a:	e021      	b.n	80030b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800306c:	edd7 7a00 	vldr	s15, [r7]
 8003070:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80030d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	d801      	bhi.n	8003082 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800307e:	2307      	movs	r3, #7
 8003080:	e016      	b.n	80030b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003082:	edd7 7a00 	vldr	s15, [r7]
 8003086:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80030d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800308a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003092:	d801      	bhi.n	8003098 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003094:	2308      	movs	r3, #8
 8003096:	e00b      	b.n	80030b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003098:	edd7 7a00 	vldr	s15, [r7]
 800309c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80030dc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80030a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a8:	d801      	bhi.n	80030ae <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80030aa:	2309      	movs	r3, #9
 80030ac:	e000      	b.n	80030b0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80030ae:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	42500000 	.word	0x42500000
 80030c8:	42d00000 	.word	0x42d00000
 80030cc:	43500000 	.word	0x43500000
 80030d0:	43d00000 	.word	0x43d00000
 80030d4:	44504000 	.word	0x44504000
 80030d8:	44cf8000 	.word	0x44cf8000
 80030dc:	45502000 	.word	0x45502000

080030e0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	461a      	mov	r2, r3
 80030ec:	460b      	mov	r3, r1
 80030ee:	72fb      	strb	r3, [r7, #11]
 80030f0:	4613      	mov	r3, r2
 80030f2:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	695c      	ldr	r4, [r3, #20]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	7b1b      	ldrb	r3, [r3, #12]
 8003100:	4618      	mov	r0, r3
 8003102:	7afb      	ldrb	r3, [r7, #11]
 8003104:	b299      	uxth	r1, r3
 8003106:	893b      	ldrh	r3, [r7, #8]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	47a0      	blx	r4
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}

08003116 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003116:	b590      	push	{r4, r7, lr}
 8003118:	b087      	sub	sp, #28
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	461a      	mov	r2, r3
 8003122:	460b      	mov	r3, r1
 8003124:	72fb      	strb	r3, [r7, #11]
 8003126:	4613      	mov	r3, r2
 8003128:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	691c      	ldr	r4, [r3, #16]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	7b1b      	ldrb	r3, [r3, #12]
 8003136:	4618      	mov	r0, r3
 8003138:	7afb      	ldrb	r3, [r7, #11]
 800313a:	b299      	uxth	r1, r3
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	47a0      	blx	r4
 8003142:	4603      	mov	r3, r0
}
 8003144:	4618      	mov	r0, r3
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}

0800314c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	461a      	mov	r2, r3
 8003158:	460b      	mov	r3, r1
 800315a:	72fb      	strb	r3, [r7, #11]
 800315c:	4613      	mov	r3, r2
 800315e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685c      	ldr	r4, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68d8      	ldr	r0, [r3, #12]
 8003168:	893b      	ldrh	r3, [r7, #8]
 800316a:	7af9      	ldrb	r1, [r7, #11]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	47a0      	blx	r4
 8003170:	6178      	str	r0, [r7, #20]

  return ret;
 8003172:	697b      	ldr	r3, [r7, #20]
}
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}

0800317c <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	461a      	mov	r2, r3
 8003188:	460b      	mov	r3, r1
 800318a:	72fb      	strb	r3, [r7, #11]
 800318c:	4613      	mov	r3, r2
 800318e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681c      	ldr	r4, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68d8      	ldr	r0, [r3, #12]
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	7af9      	ldrb	r1, [r7, #11]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	47a0      	blx	r4
 80031a0:	6178      	str	r0, [r7, #20]

  return ret;
 80031a2:	697b      	ldr	r3, [r7, #20]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd90      	pop	{r4, r7, pc}

080031ac <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80031b8:	f107 0208 	add.w	r2, r7, #8
 80031bc:	2301      	movs	r3, #1
 80031be:	2110      	movs	r1, #16
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ffc3 	bl	800314c <lsm6dsl_read_reg>
 80031c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	7a3b      	ldrb	r3, [r7, #8]
 80031d8:	f362 0383 	bfi	r3, r2, #2, #2
 80031dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80031de:	f107 0208 	add.w	r2, r7, #8
 80031e2:	2301      	movs	r3, #1
 80031e4:	2110      	movs	r1, #16
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffc8 	bl	800317c <lsm6dsl_write_reg>
 80031ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003202:	f107 0208 	add.w	r2, r7, #8
 8003206:	2301      	movs	r3, #1
 8003208:	2110      	movs	r1, #16
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ff9e 	bl	800314c <lsm6dsl_read_reg>
 8003210:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8003212:	7a3b      	ldrb	r3, [r7, #8]
 8003214:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b03      	cmp	r3, #3
 800321c:	d81a      	bhi.n	8003254 <lsm6dsl_xl_full_scale_get+0x5c>
 800321e:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <lsm6dsl_xl_full_scale_get+0x2c>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003235 	.word	0x08003235
 8003228:	0800323d 	.word	0x0800323d
 800322c:	08003245 	.word	0x08003245
 8003230:	0800324d 	.word	0x0800324d
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
      break;
 800323a:	e00f      	b.n	800325c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
      break;
 8003242:	e00b      	b.n	800325c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]
      break;
 800324a:	e007      	b.n	800325c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2203      	movs	r2, #3
 8003250:	701a      	strb	r2, [r3, #0]
      break;
 8003252:	e003      	b.n	800325c <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2204      	movs	r2, #4
 8003258:	701a      	strb	r2, [r3, #0]
      break;
 800325a:	bf00      	nop
  }

  return ret;
 800325c:	68fb      	ldr	r3, [r7, #12]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop

08003268 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003274:	f107 0208 	add.w	r2, r7, #8
 8003278:	2301      	movs	r3, #1
 800327a:	2110      	movs	r1, #16
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff65 	bl	800314c <lsm6dsl_read_reg>
 8003282:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	b2da      	uxtb	r2, r3
 8003292:	7a3b      	ldrb	r3, [r7, #8]
 8003294:	f362 1307 	bfi	r3, r2, #4, #4
 8003298:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800329a:	f107 0208 	add.w	r2, r7, #8
 800329e:	2301      	movs	r3, #1
 80032a0:	2110      	movs	r1, #16
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ff6a 	bl	800317c <lsm6dsl_write_reg>
 80032a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032aa:	68fb      	ldr	r3, [r7, #12]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80032be:	f107 0208 	add.w	r2, r7, #8
 80032c2:	2301      	movs	r3, #1
 80032c4:	2110      	movs	r1, #16
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ff40 	bl	800314c <lsm6dsl_read_reg>
 80032cc:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 80032ce:	7a3b      	ldrb	r3, [r7, #8]
 80032d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b0b      	cmp	r3, #11
 80032d8:	d84a      	bhi.n	8003370 <lsm6dsl_xl_data_rate_get+0xbc>
 80032da:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <lsm6dsl_xl_data_rate_get+0x2c>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	08003311 	.word	0x08003311
 80032e4:	08003319 	.word	0x08003319
 80032e8:	08003321 	.word	0x08003321
 80032ec:	08003329 	.word	0x08003329
 80032f0:	08003331 	.word	0x08003331
 80032f4:	08003339 	.word	0x08003339
 80032f8:	08003341 	.word	0x08003341
 80032fc:	08003349 	.word	0x08003349
 8003300:	08003351 	.word	0x08003351
 8003304:	08003359 	.word	0x08003359
 8003308:	08003361 	.word	0x08003361
 800330c:	08003369 	.word	0x08003369
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
      break;
 8003316:	e02f      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
      break;
 800331e:	e02b      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
      break;
 8003326:	e027      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2203      	movs	r2, #3
 800332c:	701a      	strb	r2, [r3, #0]
      break;
 800332e:	e023      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2204      	movs	r2, #4
 8003334:	701a      	strb	r2, [r3, #0]
      break;
 8003336:	e01f      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2205      	movs	r2, #5
 800333c:	701a      	strb	r2, [r3, #0]
      break;
 800333e:	e01b      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2206      	movs	r2, #6
 8003344:	701a      	strb	r2, [r3, #0]
      break;
 8003346:	e017      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2207      	movs	r2, #7
 800334c:	701a      	strb	r2, [r3, #0]
      break;
 800334e:	e013      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2208      	movs	r2, #8
 8003354:	701a      	strb	r2, [r3, #0]
      break;
 8003356:	e00f      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2209      	movs	r2, #9
 800335c:	701a      	strb	r2, [r3, #0]
      break;
 800335e:	e00b      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	220a      	movs	r2, #10
 8003364:	701a      	strb	r2, [r3, #0]
      break;
 8003366:	e007      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	220b      	movs	r2, #11
 800336c:	701a      	strb	r2, [r3, #0]
      break;
 800336e:	e003      	b.n	8003378 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	220c      	movs	r2, #12
 8003374:	701a      	strb	r2, [r3, #0]
      break;
 8003376:	bf00      	nop
  }

  return ret;
 8003378:	68fb      	ldr	r3, [r7, #12]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop

08003384 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003390:	f107 0208 	add.w	r2, r7, #8
 8003394:	2301      	movs	r3, #1
 8003396:	2111      	movs	r1, #17
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fed7 	bl	800314c <lsm6dsl_read_reg>
 800339e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	7a3b      	ldrb	r3, [r7, #8]
 80033b0:	f362 0343 	bfi	r3, r2, #1, #3
 80033b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80033b6:	f107 0208 	add.w	r2, r7, #8
 80033ba:	2301      	movs	r3, #1
 80033bc:	2111      	movs	r1, #17
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fedc 	bl	800317c <lsm6dsl_write_reg>
 80033c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033c6:	68fb      	ldr	r3, [r7, #12]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80033dc:	f107 0208 	add.w	r2, r7, #8
 80033e0:	2301      	movs	r3, #1
 80033e2:	2111      	movs	r1, #17
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff feb1 	bl	800314c <lsm6dsl_read_reg>
 80033ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	7a3b      	ldrb	r3, [r7, #8]
 80033fc:	f362 1307 	bfi	r3, r2, #4, #4
 8003400:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003402:	f107 0208 	add.w	r2, r7, #8
 8003406:	2301      	movs	r3, #1
 8003408:	2111      	movs	r1, #17
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff feb6 	bl	800317c <lsm6dsl_write_reg>
 8003410:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003428:	f107 0208 	add.w	r2, r7, #8
 800342c:	2301      	movs	r3, #1
 800342e:	2112      	movs	r1, #18
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fe8b 	bl	800314c <lsm6dsl_read_reg>
 8003436:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	b2da      	uxtb	r2, r3
 8003446:	7a3b      	ldrb	r3, [r7, #8]
 8003448:	f362 1386 	bfi	r3, r2, #6, #1
 800344c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800344e:	f107 0208 	add.w	r2, r7, #8
 8003452:	2301      	movs	r3, #1
 8003454:	2112      	movs	r1, #18
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fe90 	bl	800317c <lsm6dsl_write_reg>
 800345c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8003472:	f107 020c 	add.w	r2, r7, #12
 8003476:	2306      	movs	r3, #6
 8003478:	2128      	movs	r1, #40	@ 0x28
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fe66 	bl	800314c <lsm6dsl_read_reg>
 8003480:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003482:	7b7b      	ldrb	r3, [r7, #13]
 8003484:	b21a      	sxth	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003490:	b29b      	uxth	r3, r3
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	b29b      	uxth	r3, r3
 8003496:	7b3a      	ldrb	r2, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	b21a      	sxth	r2, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	3302      	adds	r3, #2
 80034a8:	b212      	sxth	r2, r2
 80034aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	3302      	adds	r3, #2
 80034b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	7bba      	ldrb	r2, [r7, #14]
 80034bc:	4413      	add	r3, r2
 80034be:	b29a      	uxth	r2, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	3302      	adds	r3, #2
 80034c4:	b212      	sxth	r2, r2
 80034c6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80034c8:	7c7a      	ldrb	r2, [r7, #17]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	3304      	adds	r3, #4
 80034ce:	b212      	sxth	r2, r2
 80034d0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	3304      	adds	r3, #4
 80034d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	b29b      	uxth	r3, r3
 80034e0:	7c3a      	ldrb	r2, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	3304      	adds	r3, #4
 80034ea:	b212      	sxth	r2, r2
 80034ec:	801a      	strh	r2, [r3, #0]

  return ret;
 80034ee:	697b      	ldr	r3, [r7, #20]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8003502:	2301      	movs	r3, #1
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	210f      	movs	r1, #15
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff fe1f 	bl	800314c <lsm6dsl_read_reg>
 800350e:	60f8      	str	r0, [r7, #12]

  return ret;
 8003510:	68fb      	ldr	r3, [r7, #12]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003526:	f107 0208 	add.w	r2, r7, #8
 800352a:	2301      	movs	r3, #1
 800352c:	2112      	movs	r1, #18
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff fe0c 	bl	800314c <lsm6dsl_read_reg>
 8003534:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10f      	bne.n	800355c <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	7a3b      	ldrb	r3, [r7, #8]
 8003546:	f362 0382 	bfi	r3, r2, #2, #1
 800354a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800354c:	f107 0208 	add.w	r2, r7, #8
 8003550:	2301      	movs	r3, #1
 8003552:	2112      	movs	r1, #18
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fe11 	bl	800317c <lsm6dsl_write_reg>
 800355a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08a      	sub	sp, #40	@ 0x28
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003570:	f107 021c 	add.w	r2, r7, #28
 8003574:	2301      	movs	r3, #1
 8003576:	210d      	movs	r1, #13
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fde7 	bl	800314c <lsm6dsl_read_reg>
 800357e:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == 0)
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	d147      	bne.n	8003616 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8003586:	783b      	ldrb	r3, [r7, #0]
 8003588:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800358c:	b2da      	uxtb	r2, r3
 800358e:	7f3b      	ldrb	r3, [r7, #28]
 8003590:	f362 0300 	bfi	r3, r2, #0, #1
 8003594:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8003596:	783b      	ldrb	r3, [r7, #0]
 8003598:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800359c:	b2da      	uxtb	r2, r3
 800359e:	7f3b      	ldrb	r3, [r7, #28]
 80035a0:	f362 0341 	bfi	r3, r2, #1, #1
 80035a4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80035a6:	783b      	ldrb	r3, [r7, #0]
 80035a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	7f3b      	ldrb	r3, [r7, #28]
 80035b0:	f362 0382 	bfi	r3, r2, #2, #1
 80035b4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80035b6:	783b      	ldrb	r3, [r7, #0]
 80035b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	7f3b      	ldrb	r3, [r7, #28]
 80035c0:	f362 03c3 	bfi	r3, r2, #3, #1
 80035c4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80035c6:	783b      	ldrb	r3, [r7, #0]
 80035c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	7f3b      	ldrb	r3, [r7, #28]
 80035d0:	f362 1304 	bfi	r3, r2, #4, #1
 80035d4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80035d6:	783b      	ldrb	r3, [r7, #0]
 80035d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	7f3b      	ldrb	r3, [r7, #28]
 80035e0:	f362 1345 	bfi	r3, r2, #5, #1
 80035e4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80035e6:	783b      	ldrb	r3, [r7, #0]
 80035e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	7f3b      	ldrb	r3, [r7, #28]
 80035f0:	f362 1386 	bfi	r3, r2, #6, #1
 80035f4:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80035f6:	783b      	ldrb	r3, [r7, #0]
 80035f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	7f3b      	ldrb	r3, [r7, #28]
 8003600:	f362 13c7 	bfi	r3, r2, #7, #1
 8003604:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003606:	f107 021c 	add.w	r2, r7, #28
 800360a:	2301      	movs	r3, #1
 800360c:	210d      	movs	r1, #13
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fdb4 	bl	800317c <lsm6dsl_write_reg>
 8003614:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	2b00      	cmp	r3, #0
 800361a:	d107      	bne.n	800362c <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800361c:	f107 0218 	add.w	r2, r7, #24
 8003620:	2301      	movs	r3, #1
 8003622:	215e      	movs	r1, #94	@ 0x5e
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fd91 	bl	800314c <lsm6dsl_read_reg>
 800362a:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8003632:	f107 0214 	add.w	r2, r7, #20
 8003636:	2301      	movs	r3, #1
 8003638:	215f      	movs	r1, #95	@ 0x5f
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fd86 	bl	800314c <lsm6dsl_read_reg>
 8003640:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d147      	bne.n	80036d8 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	7e3b      	ldrb	r3, [r7, #24]
 8003652:	f362 0300 	bfi	r3, r2, #0, #1
 8003656:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8003658:	787b      	ldrb	r3, [r7, #1]
 800365a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800365e:	b2da      	uxtb	r2, r3
 8003660:	7e3b      	ldrb	r3, [r7, #24]
 8003662:	f362 0341 	bfi	r3, r2, #1, #1
 8003666:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8003668:	787b      	ldrb	r3, [r7, #1]
 800366a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	7e3b      	ldrb	r3, [r7, #24]
 8003672:	f362 0382 	bfi	r3, r2, #2, #1
 8003676:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	7e3b      	ldrb	r3, [r7, #24]
 8003682:	f362 03c3 	bfi	r3, r2, #3, #1
 8003686:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8003688:	787b      	ldrb	r3, [r7, #1]
 800368a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	7e3b      	ldrb	r3, [r7, #24]
 8003692:	f362 1304 	bfi	r3, r2, #4, #1
 8003696:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8003698:	787b      	ldrb	r3, [r7, #1]
 800369a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	7e3b      	ldrb	r3, [r7, #24]
 80036a2:	f362 1345 	bfi	r3, r2, #5, #1
 80036a6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 80036a8:	787b      	ldrb	r3, [r7, #1]
 80036aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	7e3b      	ldrb	r3, [r7, #24]
 80036b2:	f362 1386 	bfi	r3, r2, #6, #1
 80036b6:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 80036b8:	787b      	ldrb	r3, [r7, #1]
 80036ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	7e3b      	ldrb	r3, [r7, #24]
 80036c2:	f362 13c7 	bfi	r3, r2, #7, #1
 80036c6:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80036c8:	f107 0218 	add.w	r2, r7, #24
 80036cc:	2301      	movs	r3, #1
 80036ce:	215e      	movs	r1, #94	@ 0x5e
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fd53 	bl	800317c <lsm6dsl_write_reg>
 80036d6:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d107      	bne.n	80036ee <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80036de:	f107 0210 	add.w	r2, r7, #16
 80036e2:	2301      	movs	r3, #1
 80036e4:	2113      	movs	r1, #19
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff fd30 	bl	800314c <lsm6dsl_read_reg>
 80036ec:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10f      	bne.n	8003714 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80036f4:	78bb      	ldrb	r3, [r7, #2]
 80036f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	7c3b      	ldrb	r3, [r7, #16]
 80036fe:	f362 1304 	bfi	r3, r2, #4, #1
 8003702:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003704:	f107 0210 	add.w	r2, r7, #16
 8003708:	2301      	movs	r3, #1
 800370a:	2113      	movs	r1, #19
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff fd35 	bl	800317c <lsm6dsl_write_reg>
 8003712:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8003714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800371a:	f107 0220 	add.w	r2, r7, #32
 800371e:	2301      	movs	r3, #1
 8003720:	211a      	movs	r1, #26
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fd12 	bl	800314c <lsm6dsl_read_reg>
 8003728:	6278      	str	r0, [r7, #36]	@ 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	d111      	bne.n	8003754 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8003730:	78bb      	ldrb	r3, [r7, #2]
 8003732:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003736:	b2da      	uxtb	r2, r3
 8003738:	f897 3020 	ldrb.w	r3, [r7, #32]
 800373c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003740:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003744:	f107 0220 	add.w	r2, r7, #32
 8003748:	2301      	movs	r3, #1
 800374a:	211a      	movs	r1, #26
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff fd15 	bl	800317c <lsm6dsl_write_reg>
 8003752:	6278      	str	r0, [r7, #36]	@ 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d158      	bne.n	800380c <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 800375a:	f107 020c 	add.w	r2, r7, #12
 800375e:	2301      	movs	r3, #1
 8003760:	2158      	movs	r1, #88	@ 0x58
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fcf2 	bl	800314c <lsm6dsl_read_reg>
 8003768:	6278      	str	r0, [r7, #36]	@ 0x24

    if ((val.int1_6d != 0x00U) ||
 800376a:	787b      	ldrb	r3, [r7, #1]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d141      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8003776:	787b      	ldrb	r3, [r7, #1]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 800377e:	2b00      	cmp	r3, #0
 8003780:	d13b      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8003782:	787b      	ldrb	r3, [r7, #1]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	d135      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 800378e:	787b      	ldrb	r3, [r7, #1]
 8003790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003794:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8003796:	2b00      	cmp	r3, #0
 8003798:	d12f      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800379a:	787b      	ldrb	r3, [r7, #1]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d129      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 80037a6:	787b      	ldrb	r3, [r7, #1]
 80037a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80037ac:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d123      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 80037b2:	7d3b      	ldrb	r3, [r7, #20]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11d      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 80037be:	7d3b      	ldrb	r3, [r7, #20]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d117      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 80037ca:	7d3b      	ldrb	r3, [r7, #20]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d111      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 80037d6:	7d3b      	ldrb	r3, [r7, #20]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80037e2:	7d3b      	ldrb	r3, [r7, #20]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 80037ee:	7d3b      	ldrb	r3, [r7, #20]
 80037f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80037f4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 80037fa:	7b3b      	ldrb	r3, [r7, #12]
 80037fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003800:	733b      	strb	r3, [r7, #12]
 8003802:	e003      	b.n	800380c <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8003804:	7b3b      	ldrb	r3, [r7, #12]
 8003806:	f36f 13c7 	bfc	r3, #7, #1
 800380a:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8003812:	f107 020c 	add.w	r2, r7, #12
 8003816:	2301      	movs	r3, #1
 8003818:	2158      	movs	r1, #88	@ 0x58
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fcae 	bl	800317c <lsm6dsl_write_reg>
 8003820:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return ret;
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003824:	4618      	mov	r0, r3
 8003826:	3728      	adds	r7, #40	@ 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003836:	f107 0214 	add.w	r2, r7, #20
 800383a:	2301      	movs	r3, #1
 800383c:	210d      	movs	r1, #13
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fc84 	bl	800314c <lsm6dsl_read_reg>
 8003844:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 80c0 	bne.w	80039ce <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 800384e:	7d3b      	ldrb	r3, [r7, #20]
 8003850:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003854:	b2d9      	uxtb	r1, r3
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	7813      	ldrb	r3, [r2, #0]
 800385a:	f361 0300 	bfi	r3, r1, #0, #1
 800385e:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8003860:	7d3b      	ldrb	r3, [r7, #20]
 8003862:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003866:	b2d9      	uxtb	r1, r3
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	7813      	ldrb	r3, [r2, #0]
 800386c:	f361 0341 	bfi	r3, r1, #1, #1
 8003870:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8003872:	7d3b      	ldrb	r3, [r7, #20]
 8003874:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003878:	b2d9      	uxtb	r1, r3
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	7813      	ldrb	r3, [r2, #0]
 800387e:	f361 0382 	bfi	r3, r1, #2, #1
 8003882:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8003884:	7d3b      	ldrb	r3, [r7, #20]
 8003886:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800388a:	b2d9      	uxtb	r1, r3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	7813      	ldrb	r3, [r2, #0]
 8003890:	f361 03c3 	bfi	r3, r1, #3, #1
 8003894:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8003896:	7d3b      	ldrb	r3, [r7, #20]
 8003898:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800389c:	b2d9      	uxtb	r1, r3
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	7813      	ldrb	r3, [r2, #0]
 80038a2:	f361 1304 	bfi	r3, r1, #4, #1
 80038a6:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 80038a8:	7d3b      	ldrb	r3, [r7, #20]
 80038aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038ae:	b2d9      	uxtb	r1, r3
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	7813      	ldrb	r3, [r2, #0]
 80038b4:	f361 1345 	bfi	r3, r1, #5, #1
 80038b8:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 80038ba:	7d3b      	ldrb	r3, [r7, #20]
 80038bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80038c0:	b2d9      	uxtb	r1, r3
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	7813      	ldrb	r3, [r2, #0]
 80038c6:	f361 1386 	bfi	r3, r1, #6, #1
 80038ca:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 80038cc:	7d3b      	ldrb	r3, [r7, #20]
 80038ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80038d2:	b2d9      	uxtb	r1, r3
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	7813      	ldrb	r3, [r2, #0]
 80038d8:	f361 13c7 	bfi	r3, r1, #7, #1
 80038dc:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80038de:	f107 0210 	add.w	r2, r7, #16
 80038e2:	2301      	movs	r3, #1
 80038e4:	215e      	movs	r1, #94	@ 0x5e
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fc30 	bl	800314c <lsm6dsl_read_reg>
 80038ec:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d16c      	bne.n	80039ce <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 80038f4:	7c3b      	ldrb	r3, [r7, #16]
 80038f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80038fa:	b2d9      	uxtb	r1, r3
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	7853      	ldrb	r3, [r2, #1]
 8003900:	f361 0300 	bfi	r3, r1, #0, #1
 8003904:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 8003906:	7c3b      	ldrb	r3, [r7, #16]
 8003908:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800390c:	b2d9      	uxtb	r1, r3
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	7853      	ldrb	r3, [r2, #1]
 8003912:	f361 0341 	bfi	r3, r1, #1, #1
 8003916:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 8003918:	7c3b      	ldrb	r3, [r7, #16]
 800391a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800391e:	b2d9      	uxtb	r1, r3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	7853      	ldrb	r3, [r2, #1]
 8003924:	f361 0382 	bfi	r3, r1, #2, #1
 8003928:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 800392a:	7c3b      	ldrb	r3, [r7, #16]
 800392c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003930:	b2d9      	uxtb	r1, r3
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	7853      	ldrb	r3, [r2, #1]
 8003936:	f361 03c3 	bfi	r3, r1, #3, #1
 800393a:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 800393c:	7c3b      	ldrb	r3, [r7, #16]
 800393e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003942:	b2d9      	uxtb	r1, r3
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	7853      	ldrb	r3, [r2, #1]
 8003948:	f361 1304 	bfi	r3, r1, #4, #1
 800394c:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 800394e:	7c3b      	ldrb	r3, [r7, #16]
 8003950:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003954:	b2d9      	uxtb	r1, r3
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	7853      	ldrb	r3, [r2, #1]
 800395a:	f361 1345 	bfi	r3, r1, #5, #1
 800395e:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8003960:	7c3b      	ldrb	r3, [r7, #16]
 8003962:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003966:	b2d9      	uxtb	r1, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	7853      	ldrb	r3, [r2, #1]
 800396c:	f361 1386 	bfi	r3, r1, #6, #1
 8003970:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8003972:	7c3b      	ldrb	r3, [r7, #16]
 8003974:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003978:	b2d9      	uxtb	r1, r3
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	7853      	ldrb	r3, [r2, #1]
 800397e:	f361 13c7 	bfi	r3, r1, #7, #1
 8003982:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003984:	f107 020c 	add.w	r2, r7, #12
 8003988:	2301      	movs	r3, #1
 800398a:	2113      	movs	r1, #19
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff fbdd 	bl	800314c <lsm6dsl_read_reg>
 8003992:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d119      	bne.n	80039ce <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800399a:	7b3b      	ldrb	r3, [r7, #12]
 800399c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039a0:	b2d9      	uxtb	r1, r3
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	7893      	ldrb	r3, [r2, #2]
 80039a6:	f361 0300 	bfi	r3, r1, #0, #1
 80039aa:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80039ac:	f107 0218 	add.w	r2, r7, #24
 80039b0:	2301      	movs	r3, #1
 80039b2:	211a      	movs	r1, #26
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff fbc9 	bl	800314c <lsm6dsl_read_reg>
 80039ba:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 80039bc:	7e3b      	ldrb	r3, [r7, #24]
 80039be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039c2:	b2d9      	uxtb	r1, r3
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	7893      	ldrb	r3, [r2, #2]
 80039c8:	f361 0300 	bfi	r3, r1, #0, #1
 80039cc:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 80039ce:	69fb      	ldr	r3, [r7, #28]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80039e4:	f107 0208 	add.w	r2, r7, #8
 80039e8:	2301      	movs	r3, #1
 80039ea:	210a      	movs	r1, #10
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fbad 	bl	800314c <lsm6dsl_read_reg>
 80039f2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	7a3b      	ldrb	r3, [r7, #8]
 8003a04:	f362 0302 	bfi	r3, r2, #0, #3
 8003a08:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8003a0a:	f107 0208 	add.w	r2, r7, #8
 8003a0e:	2301      	movs	r3, #1
 8003a10:	210a      	movs	r1, #10
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fbb2 	bl	800317c <lsm6dsl_write_reg>
 8003a18:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a28:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <HAL_Init+0x40>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a64 <HAL_Init+0x40>)
 8003a2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_Init+0x40>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <HAL_Init+0x40>)
 8003a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a40:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <HAL_Init+0x40>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a07      	ldr	r2, [pc, #28]	@ (8003a64 <HAL_Init+0x40>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a4c:	2003      	movs	r0, #3
 8003a4e:	f000 f92b 	bl	8003ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a52:	2000      	movs	r0, #0
 8003a54:	f000 f808 	bl	8003a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a58:	f7fe fb7c 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023c00 	.word	0x40023c00

08003a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a70:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <HAL_InitTick+0x54>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_InitTick+0x58>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f943 	bl	8003d12 <HAL_SYSTICK_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e00e      	b.n	8003ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d80a      	bhi.n	8003ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f000 f90b 	bl	8003cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aa8:	4a06      	ldr	r2, [pc, #24]	@ (8003ac4 <HAL_InitTick+0x5c>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e000      	b.n	8003ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000198 	.word	0x20000198
 8003ac0:	200001a0 	.word	0x200001a0
 8003ac4:	2000019c 	.word	0x2000019c

08003ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003acc:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <HAL_IncTick+0x20>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_IncTick+0x24>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a04      	ldr	r2, [pc, #16]	@ (8003aec <HAL_IncTick+0x24>)
 8003ada:	6013      	str	r3, [r2, #0]
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	200001a0 	.word	0x200001a0
 8003aec:	20000664 	.word	0x20000664

08003af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return uwTick;
 8003af4:	4b03      	ldr	r3, [pc, #12]	@ (8003b04 <HAL_GetTick+0x14>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000664 	.word	0x20000664

08003b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b18:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <__NVIC_SetPriorityGrouping+0x44>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b24:	4013      	ands	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b3a:	4a04      	ldr	r2, [pc, #16]	@ (8003b4c <__NVIC_SetPriorityGrouping+0x44>)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	60d3      	str	r3, [r2, #12]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b54:	4b04      	ldr	r3, [pc, #16]	@ (8003b68 <__NVIC_GetPriorityGrouping+0x18>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	f003 0307 	and.w	r3, r3, #7
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	db0b      	blt.n	8003b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	f003 021f 	and.w	r2, r3, #31
 8003b84:	4907      	ldr	r1, [pc, #28]	@ (8003ba4 <__NVIC_EnableIRQ+0x38>)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	e000e100 	.word	0xe000e100

08003ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	6039      	str	r1, [r7, #0]
 8003bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	db0a      	blt.n	8003bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	490c      	ldr	r1, [pc, #48]	@ (8003bf4 <__NVIC_SetPriority+0x4c>)
 8003bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc6:	0112      	lsls	r2, r2, #4
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	440b      	add	r3, r1
 8003bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bd0:	e00a      	b.n	8003be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4908      	ldr	r1, [pc, #32]	@ (8003bf8 <__NVIC_SetPriority+0x50>)
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	3b04      	subs	r3, #4
 8003be0:	0112      	lsls	r2, r2, #4
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	440b      	add	r3, r1
 8003be6:	761a      	strb	r2, [r3, #24]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	e000e100 	.word	0xe000e100
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b089      	sub	sp, #36	@ 0x24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f1c3 0307 	rsb	r3, r3, #7
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	bf28      	it	cs
 8003c1a:	2304      	movcs	r3, #4
 8003c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d902      	bls.n	8003c2c <NVIC_EncodePriority+0x30>
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3b03      	subs	r3, #3
 8003c2a:	e000      	b.n	8003c2e <NVIC_EncodePriority+0x32>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c30:	f04f 32ff 	mov.w	r2, #4294967295
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	401a      	ands	r2, r3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c44:	f04f 31ff 	mov.w	r1, #4294967295
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	43d9      	mvns	r1, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c54:	4313      	orrs	r3, r2
         );
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3724      	adds	r7, #36	@ 0x24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c74:	d301      	bcc.n	8003c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c76:	2301      	movs	r3, #1
 8003c78:	e00f      	b.n	8003c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca4 <SysTick_Config+0x40>)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c82:	210f      	movs	r1, #15
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	f7ff ff8e 	bl	8003ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <SysTick_Config+0x40>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c92:	4b04      	ldr	r3, [pc, #16]	@ (8003ca4 <SysTick_Config+0x40>)
 8003c94:	2207      	movs	r2, #7
 8003c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	e000e010 	.word	0xe000e010

08003ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff29 	bl	8003b08 <__NVIC_SetPriorityGrouping>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd0:	f7ff ff3e 	bl	8003b50 <__NVIC_GetPriorityGrouping>
 8003cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	6978      	ldr	r0, [r7, #20]
 8003cdc:	f7ff ff8e 	bl	8003bfc <NVIC_EncodePriority>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ff5d 	bl	8003ba8 <__NVIC_SetPriority>
}
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff31 	bl	8003b6c <__NVIC_EnableIRQ>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ffa2 	bl	8003c64 <SysTick_Config>
 8003d20:	4603      	mov	r3, r0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d38:	f7ff feda 	bl	8003af0 <HAL_GetTick>
 8003d3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d008      	beq.n	8003d5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2280      	movs	r2, #128	@ 0x80
 8003d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e052      	b.n	8003e02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0216 	bic.w	r2, r2, #22
 8003d6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <HAL_DMA_Abort+0x62>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0208 	bic.w	r2, r2, #8
 8003d9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dac:	e013      	b.n	8003dd6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dae:	f7ff fe9f 	bl	8003af0 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d90c      	bls.n	8003dd6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e015      	b.n	8003e02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e4      	bne.n	8003dae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de8:	223f      	movs	r2, #63	@ 0x3f
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d004      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2280      	movs	r2, #128	@ 0x80
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e00c      	b.n	8003e42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	@ 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	e165      	b.n	8004138 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	f040 8154 	bne.w	8004132 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d005      	beq.n	8003ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d130      	bne.n	8003f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	2203      	movs	r2, #3
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed8:	2201      	movs	r2, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f003 0201 	and.w	r2, r3, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d017      	beq.n	8003f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d123      	bne.n	8003f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	08da      	lsrs	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3208      	adds	r2, #8
 8003f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	220f      	movs	r2, #15
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	08da      	lsrs	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3208      	adds	r2, #8
 8003f8e:	69b9      	ldr	r1, [r7, #24]
 8003f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0203 	and.w	r2, r3, #3
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80ae 	beq.w	8004132 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4b5d      	ldr	r3, [pc, #372]	@ (8004150 <HAL_GPIO_Init+0x300>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	4a5c      	ldr	r2, [pc, #368]	@ (8004150 <HAL_GPIO_Init+0x300>)
 8003fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8004150 <HAL_GPIO_Init+0x300>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ff2:	4a58      	ldr	r2, [pc, #352]	@ (8004154 <HAL_GPIO_Init+0x304>)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	220f      	movs	r2, #15
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a4f      	ldr	r2, [pc, #316]	@ (8004158 <HAL_GPIO_Init+0x308>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d025      	beq.n	800406a <HAL_GPIO_Init+0x21a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a4e      	ldr	r2, [pc, #312]	@ (800415c <HAL_GPIO_Init+0x30c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01f      	beq.n	8004066 <HAL_GPIO_Init+0x216>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a4d      	ldr	r2, [pc, #308]	@ (8004160 <HAL_GPIO_Init+0x310>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d019      	beq.n	8004062 <HAL_GPIO_Init+0x212>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a4c      	ldr	r2, [pc, #304]	@ (8004164 <HAL_GPIO_Init+0x314>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_GPIO_Init+0x20e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a4b      	ldr	r2, [pc, #300]	@ (8004168 <HAL_GPIO_Init+0x318>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00d      	beq.n	800405a <HAL_GPIO_Init+0x20a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4a      	ldr	r2, [pc, #296]	@ (800416c <HAL_GPIO_Init+0x31c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <HAL_GPIO_Init+0x206>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a49      	ldr	r2, [pc, #292]	@ (8004170 <HAL_GPIO_Init+0x320>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_GPIO_Init+0x202>
 800404e:	2306      	movs	r3, #6
 8004050:	e00c      	b.n	800406c <HAL_GPIO_Init+0x21c>
 8004052:	2307      	movs	r3, #7
 8004054:	e00a      	b.n	800406c <HAL_GPIO_Init+0x21c>
 8004056:	2305      	movs	r3, #5
 8004058:	e008      	b.n	800406c <HAL_GPIO_Init+0x21c>
 800405a:	2304      	movs	r3, #4
 800405c:	e006      	b.n	800406c <HAL_GPIO_Init+0x21c>
 800405e:	2303      	movs	r3, #3
 8004060:	e004      	b.n	800406c <HAL_GPIO_Init+0x21c>
 8004062:	2302      	movs	r3, #2
 8004064:	e002      	b.n	800406c <HAL_GPIO_Init+0x21c>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_GPIO_Init+0x21c>
 800406a:	2300      	movs	r3, #0
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	f002 0203 	and.w	r2, r2, #3
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	4093      	lsls	r3, r2
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800407c:	4935      	ldr	r1, [pc, #212]	@ (8004154 <HAL_GPIO_Init+0x304>)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	3302      	adds	r3, #2
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408a:	4b3a      	ldr	r3, [pc, #232]	@ (8004174 <HAL_GPIO_Init+0x324>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ae:	4a31      	ldr	r2, [pc, #196]	@ (8004174 <HAL_GPIO_Init+0x324>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004174 <HAL_GPIO_Init+0x324>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d8:	4a26      	ldr	r2, [pc, #152]	@ (8004174 <HAL_GPIO_Init+0x324>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040de:	4b25      	ldr	r3, [pc, #148]	@ (8004174 <HAL_GPIO_Init+0x324>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004102:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <HAL_GPIO_Init+0x324>)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004108:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <HAL_GPIO_Init+0x324>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800412c:	4a11      	ldr	r2, [pc, #68]	@ (8004174 <HAL_GPIO_Init+0x324>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	f67f ae96 	bls.w	8003e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3724      	adds	r7, #36	@ 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	40013800 	.word	0x40013800
 8004158:	40020000 	.word	0x40020000
 800415c:	40020400 	.word	0x40020400
 8004160:	40020800 	.word	0x40020800
 8004164:	40020c00 	.word	0x40020c00
 8004168:	40021000 	.word	0x40021000
 800416c:	40021400 	.word	0x40021400
 8004170:	40021800 	.word	0x40021800
 8004174:	40013c00 	.word	0x40013c00

08004178 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e0c7      	b.n	8004324 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004194:	2201      	movs	r2, #1
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4013      	ands	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	f040 80b7 	bne.w	800431e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80041b0:	4a62      	ldr	r2, [pc, #392]	@ (800433c <HAL_GPIO_DeInit+0x1c4>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	3302      	adds	r3, #2
 80041b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041bc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	220f      	movs	r2, #15
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a5a      	ldr	r2, [pc, #360]	@ (8004340 <HAL_GPIO_DeInit+0x1c8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d025      	beq.n	8004226 <HAL_GPIO_DeInit+0xae>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a59      	ldr	r2, [pc, #356]	@ (8004344 <HAL_GPIO_DeInit+0x1cc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <HAL_GPIO_DeInit+0xaa>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a58      	ldr	r2, [pc, #352]	@ (8004348 <HAL_GPIO_DeInit+0x1d0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d019      	beq.n	800421e <HAL_GPIO_DeInit+0xa6>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a57      	ldr	r2, [pc, #348]	@ (800434c <HAL_GPIO_DeInit+0x1d4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_GPIO_DeInit+0xa2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a56      	ldr	r2, [pc, #344]	@ (8004350 <HAL_GPIO_DeInit+0x1d8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00d      	beq.n	8004216 <HAL_GPIO_DeInit+0x9e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a55      	ldr	r2, [pc, #340]	@ (8004354 <HAL_GPIO_DeInit+0x1dc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <HAL_GPIO_DeInit+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a54      	ldr	r2, [pc, #336]	@ (8004358 <HAL_GPIO_DeInit+0x1e0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_GPIO_DeInit+0x96>
 800420a:	2306      	movs	r3, #6
 800420c:	e00c      	b.n	8004228 <HAL_GPIO_DeInit+0xb0>
 800420e:	2307      	movs	r3, #7
 8004210:	e00a      	b.n	8004228 <HAL_GPIO_DeInit+0xb0>
 8004212:	2305      	movs	r3, #5
 8004214:	e008      	b.n	8004228 <HAL_GPIO_DeInit+0xb0>
 8004216:	2304      	movs	r3, #4
 8004218:	e006      	b.n	8004228 <HAL_GPIO_DeInit+0xb0>
 800421a:	2303      	movs	r3, #3
 800421c:	e004      	b.n	8004228 <HAL_GPIO_DeInit+0xb0>
 800421e:	2302      	movs	r3, #2
 8004220:	e002      	b.n	8004228 <HAL_GPIO_DeInit+0xb0>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_GPIO_DeInit+0xb0>
 8004226:	2300      	movs	r3, #0
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	f002 0203 	and.w	r2, r2, #3
 800422e:	0092      	lsls	r2, r2, #2
 8004230:	4093      	lsls	r3, r2
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	d132      	bne.n	800429e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004238:	4b48      	ldr	r3, [pc, #288]	@ (800435c <HAL_GPIO_DeInit+0x1e4>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	43db      	mvns	r3, r3
 8004240:	4946      	ldr	r1, [pc, #280]	@ (800435c <HAL_GPIO_DeInit+0x1e4>)
 8004242:	4013      	ands	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004246:	4b45      	ldr	r3, [pc, #276]	@ (800435c <HAL_GPIO_DeInit+0x1e4>)
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	43db      	mvns	r3, r3
 800424e:	4943      	ldr	r1, [pc, #268]	@ (800435c <HAL_GPIO_DeInit+0x1e4>)
 8004250:	4013      	ands	r3, r2
 8004252:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004254:	4b41      	ldr	r3, [pc, #260]	@ (800435c <HAL_GPIO_DeInit+0x1e4>)
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	43db      	mvns	r3, r3
 800425c:	493f      	ldr	r1, [pc, #252]	@ (800435c <HAL_GPIO_DeInit+0x1e4>)
 800425e:	4013      	ands	r3, r2
 8004260:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004262:	4b3e      	ldr	r3, [pc, #248]	@ (800435c <HAL_GPIO_DeInit+0x1e4>)
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	43db      	mvns	r3, r3
 800426a:	493c      	ldr	r1, [pc, #240]	@ (800435c <HAL_GPIO_DeInit+0x1e4>)
 800426c:	4013      	ands	r3, r2
 800426e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004280:	4a2e      	ldr	r2, [pc, #184]	@ (800433c <HAL_GPIO_DeInit+0x1c4>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	3302      	adds	r3, #2
 8004288:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	43da      	mvns	r2, r3
 8004290:	482a      	ldr	r0, [pc, #168]	@ (800433c <HAL_GPIO_DeInit+0x1c4>)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	400a      	ands	r2, r1
 8004298:	3302      	adds	r3, #2
 800429a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2103      	movs	r1, #3
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	401a      	ands	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	08da      	lsrs	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3208      	adds	r2, #8
 80042bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	220f      	movs	r2, #15
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	08d2      	lsrs	r2, r2, #3
 80042d4:	4019      	ands	r1, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3208      	adds	r2, #8
 80042da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	2103      	movs	r1, #3
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	401a      	ands	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	2101      	movs	r1, #1
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	401a      	ands	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	2103      	movs	r1, #3
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	401a      	ands	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	3301      	adds	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b0f      	cmp	r3, #15
 8004328:	f67f af34 	bls.w	8004194 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40013800 	.word	0x40013800
 8004340:	40020000 	.word	0x40020000
 8004344:	40020400 	.word	0x40020400
 8004348:	40020800 	.word	0x40020800
 800434c:	40020c00 	.word	0x40020c00
 8004350:	40021000 	.word	0x40021000
 8004354:	40021400 	.word	0x40021400
 8004358:	40021800 	.word	0x40021800
 800435c:	40013c00 	.word	0x40013c00

08004360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
 800436c:	4613      	mov	r3, r2
 800436e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004370:	787b      	ldrb	r3, [r7, #1]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800437c:	e003      	b.n	8004386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800437e:	887b      	ldrh	r3, [r7, #2]
 8004380:	041a      	lsls	r2, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	619a      	str	r2, [r3, #24]
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800439e:	4b08      	ldr	r3, [pc, #32]	@ (80043c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d006      	beq.n	80043b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043aa:	4a05      	ldr	r2, [pc, #20]	@ (80043c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fe00 	bl	8001fb8 <HAL_GPIO_EXTI_Callback>
  }
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40013c00 	.word	0x40013c00

080043c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0cc      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d8:	4b68      	ldr	r3, [pc, #416]	@ (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d90c      	bls.n	8004400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b65      	ldr	r3, [pc, #404]	@ (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b63      	ldr	r3, [pc, #396]	@ (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0b8      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004418:	4b59      	ldr	r3, [pc, #356]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a58      	ldr	r2, [pc, #352]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004422:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004430:	4b53      	ldr	r3, [pc, #332]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4a52      	ldr	r2, [pc, #328]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800443a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443c:	4b50      	ldr	r3, [pc, #320]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	494d      	ldr	r1, [pc, #308]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d044      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	4b47      	ldr	r3, [pc, #284]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d119      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e07f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d003      	beq.n	8004482 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447e:	2b03      	cmp	r3, #3
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	4b3f      	ldr	r3, [pc, #252]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e06f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004492:	4b3b      	ldr	r3, [pc, #236]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e067      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a2:	4b37      	ldr	r3, [pc, #220]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f023 0203 	bic.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4934      	ldr	r1, [pc, #208]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b4:	f7ff fb1c 	bl	8003af0 <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044bc:	f7ff fb18 	bl	8003af0 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e04f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 020c 	and.w	r2, r3, #12
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d1eb      	bne.n	80044bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e4:	4b25      	ldr	r3, [pc, #148]	@ (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d20c      	bcs.n	800450c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b22      	ldr	r3, [pc, #136]	@ (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b20      	ldr	r3, [pc, #128]	@ (800457c <HAL_RCC_ClockConfig+0x1b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e032      	b.n	8004572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b19      	ldr	r3, [pc, #100]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4916      	ldr	r1, [pc, #88]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004536:	4b12      	ldr	r3, [pc, #72]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	490e      	ldr	r1, [pc, #56]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800454a:	f000 f855 	bl	80045f8 <HAL_RCC_GetSysClockFreq>
 800454e:	4602      	mov	r2, r0
 8004550:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	490a      	ldr	r1, [pc, #40]	@ (8004584 <HAL_RCC_ClockConfig+0x1c0>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	4a09      	ldr	r2, [pc, #36]	@ (8004588 <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004566:	4b09      	ldr	r3, [pc, #36]	@ (800458c <HAL_RCC_ClockConfig+0x1c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fa7c 	bl	8003a68 <HAL_InitTick>

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40023c00 	.word	0x40023c00
 8004580:	40023800 	.word	0x40023800
 8004584:	08009ab8 	.word	0x08009ab8
 8004588:	20000198 	.word	0x20000198
 800458c:	2000019c 	.word	0x2000019c

08004590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004594:	4b03      	ldr	r3, [pc, #12]	@ (80045a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000198 	.word	0x20000198

080045a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045ac:	f7ff fff0 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0a9b      	lsrs	r3, r3, #10
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4903      	ldr	r1, [pc, #12]	@ (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40023800 	.word	0x40023800
 80045cc:	08009ac8 	.word	0x08009ac8

080045d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045d4:	f7ff ffdc 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	0b5b      	lsrs	r3, r3, #13
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	@ (80045f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	08009ac8 	.word	0x08009ac8

080045f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045fc:	b0ae      	sub	sp, #184	@ 0xb8
 80045fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800461e:	4bcb      	ldr	r3, [pc, #812]	@ (800494c <HAL_RCC_GetSysClockFreq+0x354>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	2b0c      	cmp	r3, #12
 8004628:	f200 8206 	bhi.w	8004a38 <HAL_RCC_GetSysClockFreq+0x440>
 800462c:	a201      	add	r2, pc, #4	@ (adr r2, 8004634 <HAL_RCC_GetSysClockFreq+0x3c>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004669 	.word	0x08004669
 8004638:	08004a39 	.word	0x08004a39
 800463c:	08004a39 	.word	0x08004a39
 8004640:	08004a39 	.word	0x08004a39
 8004644:	08004671 	.word	0x08004671
 8004648:	08004a39 	.word	0x08004a39
 800464c:	08004a39 	.word	0x08004a39
 8004650:	08004a39 	.word	0x08004a39
 8004654:	08004679 	.word	0x08004679
 8004658:	08004a39 	.word	0x08004a39
 800465c:	08004a39 	.word	0x08004a39
 8004660:	08004a39 	.word	0x08004a39
 8004664:	08004869 	.word	0x08004869
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4bb9      	ldr	r3, [pc, #740]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x358>)
 800466a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800466e:	e1e7      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004670:	4bb8      	ldr	r3, [pc, #736]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004672:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004676:	e1e3      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004678:	4bb4      	ldr	r3, [pc, #720]	@ (800494c <HAL_RCC_GetSysClockFreq+0x354>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004684:	4bb1      	ldr	r3, [pc, #708]	@ (800494c <HAL_RCC_GetSysClockFreq+0x354>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d071      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004690:	4bae      	ldr	r3, [pc, #696]	@ (800494c <HAL_RCC_GetSysClockFreq+0x354>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	099b      	lsrs	r3, r3, #6
 8004696:	2200      	movs	r2, #0
 8004698:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800469c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80046a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046ac:	2300      	movs	r3, #0
 80046ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046b6:	4622      	mov	r2, r4
 80046b8:	462b      	mov	r3, r5
 80046ba:	f04f 0000 	mov.w	r0, #0
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	0159      	lsls	r1, r3, #5
 80046c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c8:	0150      	lsls	r0, r2, #5
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4621      	mov	r1, r4
 80046d0:	1a51      	subs	r1, r2, r1
 80046d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80046d4:	4629      	mov	r1, r5
 80046d6:	eb63 0301 	sbc.w	r3, r3, r1
 80046da:	647b      	str	r3, [r7, #68]	@ 0x44
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80046e8:	4649      	mov	r1, r9
 80046ea:	018b      	lsls	r3, r1, #6
 80046ec:	4641      	mov	r1, r8
 80046ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046f2:	4641      	mov	r1, r8
 80046f4:	018a      	lsls	r2, r1, #6
 80046f6:	4641      	mov	r1, r8
 80046f8:	1a51      	subs	r1, r2, r1
 80046fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046fc:	4649      	mov	r1, r9
 80046fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004710:	4649      	mov	r1, r9
 8004712:	00cb      	lsls	r3, r1, #3
 8004714:	4641      	mov	r1, r8
 8004716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800471a:	4641      	mov	r1, r8
 800471c:	00ca      	lsls	r2, r1, #3
 800471e:	4610      	mov	r0, r2
 8004720:	4619      	mov	r1, r3
 8004722:	4603      	mov	r3, r0
 8004724:	4622      	mov	r2, r4
 8004726:	189b      	adds	r3, r3, r2
 8004728:	633b      	str	r3, [r7, #48]	@ 0x30
 800472a:	462b      	mov	r3, r5
 800472c:	460a      	mov	r2, r1
 800472e:	eb42 0303 	adc.w	r3, r2, r3
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004740:	4629      	mov	r1, r5
 8004742:	024b      	lsls	r3, r1, #9
 8004744:	4621      	mov	r1, r4
 8004746:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800474a:	4621      	mov	r1, r4
 800474c:	024a      	lsls	r2, r1, #9
 800474e:	4610      	mov	r0, r2
 8004750:	4619      	mov	r1, r3
 8004752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800475c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004760:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004764:	f7fc fa40 	bl	8000be8 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4613      	mov	r3, r2
 800476e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004772:	e067      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004774:	4b75      	ldr	r3, [pc, #468]	@ (800494c <HAL_RCC_GetSysClockFreq+0x354>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	099b      	lsrs	r3, r3, #6
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004780:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004784:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800478e:	2300      	movs	r3, #0
 8004790:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004792:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004796:	4622      	mov	r2, r4
 8004798:	462b      	mov	r3, r5
 800479a:	f04f 0000 	mov.w	r0, #0
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	0159      	lsls	r1, r3, #5
 80047a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a8:	0150      	lsls	r0, r2, #5
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4621      	mov	r1, r4
 80047b0:	1a51      	subs	r1, r2, r1
 80047b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047b4:	4629      	mov	r1, r5
 80047b6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80047c8:	4649      	mov	r1, r9
 80047ca:	018b      	lsls	r3, r1, #6
 80047cc:	4641      	mov	r1, r8
 80047ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047d2:	4641      	mov	r1, r8
 80047d4:	018a      	lsls	r2, r1, #6
 80047d6:	4641      	mov	r1, r8
 80047d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80047dc:	4649      	mov	r1, r9
 80047de:	eb63 0b01 	sbc.w	fp, r3, r1
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047f6:	4692      	mov	sl, r2
 80047f8:	469b      	mov	fp, r3
 80047fa:	4623      	mov	r3, r4
 80047fc:	eb1a 0303 	adds.w	r3, sl, r3
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	462b      	mov	r3, r5
 8004804:	eb4b 0303 	adc.w	r3, fp, r3
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004816:	4629      	mov	r1, r5
 8004818:	028b      	lsls	r3, r1, #10
 800481a:	4621      	mov	r1, r4
 800481c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004820:	4621      	mov	r1, r4
 8004822:	028a      	lsls	r2, r1, #10
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800482c:	2200      	movs	r2, #0
 800482e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004830:	677a      	str	r2, [r7, #116]	@ 0x74
 8004832:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004836:	f7fc f9d7 	bl	8000be8 <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4613      	mov	r3, r2
 8004840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004844:	4b41      	ldr	r3, [pc, #260]	@ (800494c <HAL_RCC_GetSysClockFreq+0x354>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800485a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004866:	e0eb      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004868:	4b38      	ldr	r3, [pc, #224]	@ (800494c <HAL_RCC_GetSysClockFreq+0x354>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004874:	4b35      	ldr	r3, [pc, #212]	@ (800494c <HAL_RCC_GetSysClockFreq+0x354>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d06b      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004880:	4b32      	ldr	r3, [pc, #200]	@ (800494c <HAL_RCC_GetSysClockFreq+0x354>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	2200      	movs	r2, #0
 8004888:	66bb      	str	r3, [r7, #104]	@ 0x68
 800488a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800488c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	663b      	str	r3, [r7, #96]	@ 0x60
 8004894:	2300      	movs	r3, #0
 8004896:	667b      	str	r3, [r7, #100]	@ 0x64
 8004898:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800489c:	4622      	mov	r2, r4
 800489e:	462b      	mov	r3, r5
 80048a0:	f04f 0000 	mov.w	r0, #0
 80048a4:	f04f 0100 	mov.w	r1, #0
 80048a8:	0159      	lsls	r1, r3, #5
 80048aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ae:	0150      	lsls	r0, r2, #5
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4621      	mov	r1, r4
 80048b6:	1a51      	subs	r1, r2, r1
 80048b8:	61b9      	str	r1, [r7, #24]
 80048ba:	4629      	mov	r1, r5
 80048bc:	eb63 0301 	sbc.w	r3, r3, r1
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80048ce:	4659      	mov	r1, fp
 80048d0:	018b      	lsls	r3, r1, #6
 80048d2:	4651      	mov	r1, sl
 80048d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048d8:	4651      	mov	r1, sl
 80048da:	018a      	lsls	r2, r1, #6
 80048dc:	4651      	mov	r1, sl
 80048de:	ebb2 0801 	subs.w	r8, r2, r1
 80048e2:	4659      	mov	r1, fp
 80048e4:	eb63 0901 	sbc.w	r9, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048fc:	4690      	mov	r8, r2
 80048fe:	4699      	mov	r9, r3
 8004900:	4623      	mov	r3, r4
 8004902:	eb18 0303 	adds.w	r3, r8, r3
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	462b      	mov	r3, r5
 800490a:	eb49 0303 	adc.w	r3, r9, r3
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800491c:	4629      	mov	r1, r5
 800491e:	024b      	lsls	r3, r1, #9
 8004920:	4621      	mov	r1, r4
 8004922:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004926:	4621      	mov	r1, r4
 8004928:	024a      	lsls	r2, r1, #9
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004932:	2200      	movs	r2, #0
 8004934:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004936:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004938:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800493c:	f7fc f954 	bl	8000be8 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800494a:	e065      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x420>
 800494c:	40023800 	.word	0x40023800
 8004950:	00f42400 	.word	0x00f42400
 8004954:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004958:	4b3d      	ldr	r3, [pc, #244]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x458>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	099b      	lsrs	r3, r3, #6
 800495e:	2200      	movs	r2, #0
 8004960:	4618      	mov	r0, r3
 8004962:	4611      	mov	r1, r2
 8004964:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004968:	653b      	str	r3, [r7, #80]	@ 0x50
 800496a:	2300      	movs	r3, #0
 800496c:	657b      	str	r3, [r7, #84]	@ 0x54
 800496e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004972:	4642      	mov	r2, r8
 8004974:	464b      	mov	r3, r9
 8004976:	f04f 0000 	mov.w	r0, #0
 800497a:	f04f 0100 	mov.w	r1, #0
 800497e:	0159      	lsls	r1, r3, #5
 8004980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004984:	0150      	lsls	r0, r2, #5
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4641      	mov	r1, r8
 800498c:	1a51      	subs	r1, r2, r1
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	4649      	mov	r1, r9
 8004992:	eb63 0301 	sbc.w	r3, r3, r1
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80049a4:	4659      	mov	r1, fp
 80049a6:	018b      	lsls	r3, r1, #6
 80049a8:	4651      	mov	r1, sl
 80049aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ae:	4651      	mov	r1, sl
 80049b0:	018a      	lsls	r2, r1, #6
 80049b2:	4651      	mov	r1, sl
 80049b4:	1a54      	subs	r4, r2, r1
 80049b6:	4659      	mov	r1, fp
 80049b8:	eb63 0501 	sbc.w	r5, r3, r1
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	00eb      	lsls	r3, r5, #3
 80049c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ca:	00e2      	lsls	r2, r4, #3
 80049cc:	4614      	mov	r4, r2
 80049ce:	461d      	mov	r5, r3
 80049d0:	4643      	mov	r3, r8
 80049d2:	18e3      	adds	r3, r4, r3
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	464b      	mov	r3, r9
 80049d8:	eb45 0303 	adc.w	r3, r5, r3
 80049dc:	607b      	str	r3, [r7, #4]
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ea:	4629      	mov	r1, r5
 80049ec:	028b      	lsls	r3, r1, #10
 80049ee:	4621      	mov	r1, r4
 80049f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049f4:	4621      	mov	r1, r4
 80049f6:	028a      	lsls	r2, r1, #10
 80049f8:	4610      	mov	r0, r2
 80049fa:	4619      	mov	r1, r3
 80049fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a00:	2200      	movs	r2, #0
 8004a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a04:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a0a:	f7fc f8ed 	bl	8000be8 <__aeabi_uldivmod>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4613      	mov	r3, r2
 8004a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a18:	4b0d      	ldr	r3, [pc, #52]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	0f1b      	lsrs	r3, r3, #28
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004a26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a36:	e003      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a38:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	37b8      	adds	r7, #184	@ 0xb8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
 8004a54:	00f42400 	.word	0x00f42400

08004a58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e28d      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8083 	beq.w	8004b7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a78:	4b94      	ldr	r3, [pc, #592]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d019      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a84:	4b91      	ldr	r3, [pc, #580]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a90:	4b8e      	ldr	r3, [pc, #568]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	d112      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aaa:	4b88      	ldr	r3, [pc, #544]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ab2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab8:	4b84      	ldr	r3, [pc, #528]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d05b      	beq.n	8004b7c <HAL_RCC_OscConfig+0x124>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d157      	bne.n	8004b7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e25a      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x90>
 8004ada:	4b7c      	ldr	r3, [pc, #496]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7b      	ldr	r2, [pc, #492]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e01d      	b.n	8004b24 <HAL_RCC_OscConfig+0xcc>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0xb4>
 8004af2:	4b76      	ldr	r3, [pc, #472]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a75      	ldr	r2, [pc, #468]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b73      	ldr	r3, [pc, #460]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a72      	ldr	r2, [pc, #456]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0xcc>
 8004b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6e      	ldr	r2, [pc, #440]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b6c      	ldr	r3, [pc, #432]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fe ffe0 	bl	8003af0 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fe ffdc 	bl	8003af0 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	@ 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e21f      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b61      	ldr	r3, [pc, #388]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0xdc>
 8004b52:	e014      	b.n	8004b7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fe ffcc 	bl	8003af0 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fe ffc8 	bl	8003af0 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	@ 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e20b      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	4b57      	ldr	r3, [pc, #348]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x104>
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d06f      	beq.n	8004c6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b8a:	4b50      	ldr	r3, [pc, #320]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d017      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b96:	4b4d      	ldr	r3, [pc, #308]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d105      	bne.n	8004bae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bae:	4b47      	ldr	r3, [pc, #284]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d11c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bba:	4b44      	ldr	r3, [pc, #272]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d116      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_RCC_OscConfig+0x186>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d001      	beq.n	8004bde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e1d3      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4937      	ldr	r1, [pc, #220]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf2:	e03a      	b.n	8004c6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d020      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bfc:	4b34      	ldr	r3, [pc, #208]	@ (8004cd0 <HAL_RCC_OscConfig+0x278>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fe ff75 	bl	8003af0 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0a:	f7fe ff71 	bl	8003af0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e1b4      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f0      	beq.n	8004c0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c28:	4b28      	ldr	r3, [pc, #160]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4925      	ldr	r1, [pc, #148]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]
 8004c3c:	e015      	b.n	8004c6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3e:	4b24      	ldr	r3, [pc, #144]	@ (8004cd0 <HAL_RCC_OscConfig+0x278>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fe ff54 	bl	8003af0 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4c:	f7fe ff50 	bl	8003af0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e193      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d036      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d016      	beq.n	8004cac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <HAL_RCC_OscConfig+0x27c>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c84:	f7fe ff34 	bl	8003af0 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c8c:	f7fe ff30 	bl	8003af0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e173      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <HAL_RCC_OscConfig+0x274>)
 8004ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x234>
 8004caa:	e01b      	b.n	8004ce4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cac:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <HAL_RCC_OscConfig+0x27c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fe ff1d 	bl	8003af0 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb8:	e00e      	b.n	8004cd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cba:	f7fe ff19 	bl	8003af0 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d907      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e15c      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	42470000 	.word	0x42470000
 8004cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd8:	4b8a      	ldr	r3, [pc, #552]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ea      	bne.n	8004cba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8097 	beq.w	8004e20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf6:	4b83      	ldr	r3, [pc, #524]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10f      	bne.n	8004d22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	4b7f      	ldr	r3, [pc, #508]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d12:	4b7c      	ldr	r3, [pc, #496]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	4b79      	ldr	r3, [pc, #484]	@ (8004f08 <HAL_RCC_OscConfig+0x4b0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d118      	bne.n	8004d60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2e:	4b76      	ldr	r3, [pc, #472]	@ (8004f08 <HAL_RCC_OscConfig+0x4b0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a75      	ldr	r2, [pc, #468]	@ (8004f08 <HAL_RCC_OscConfig+0x4b0>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d3a:	f7fe fed9 	bl	8003af0 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fe fed5 	bl	8003af0 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e118      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	4b6c      	ldr	r3, [pc, #432]	@ (8004f08 <HAL_RCC_OscConfig+0x4b0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d106      	bne.n	8004d76 <HAL_RCC_OscConfig+0x31e>
 8004d68:	4b66      	ldr	r3, [pc, #408]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6c:	4a65      	ldr	r2, [pc, #404]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d74:	e01c      	b.n	8004db0 <HAL_RCC_OscConfig+0x358>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x340>
 8004d7e:	4b61      	ldr	r3, [pc, #388]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d82:	4a60      	ldr	r2, [pc, #384]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d8a:	4b5e      	ldr	r3, [pc, #376]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	4a5d      	ldr	r2, [pc, #372]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d96:	e00b      	b.n	8004db0 <HAL_RCC_OscConfig+0x358>
 8004d98:	4b5a      	ldr	r3, [pc, #360]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9c:	4a59      	ldr	r2, [pc, #356]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da4:	4b57      	ldr	r3, [pc, #348]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da8:	4a56      	ldr	r2, [pc, #344]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004daa:	f023 0304 	bic.w	r3, r3, #4
 8004dae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d015      	beq.n	8004de4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fe fe9a 	bl	8003af0 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc0:	f7fe fe96 	bl	8003af0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0d7      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0ee      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x368>
 8004de2:	e014      	b.n	8004e0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de4:	f7fe fe84 	bl	8003af0 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dec:	f7fe fe80 	bl	8003af0 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e0c1      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e02:	4b40      	ldr	r3, [pc, #256]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ee      	bne.n	8004dec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d105      	bne.n	8004e20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e14:	4b3b      	ldr	r3, [pc, #236]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	4a3a      	ldr	r2, [pc, #232]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80ad 	beq.w	8004f84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e2a:	4b36      	ldr	r3, [pc, #216]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d060      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d145      	bne.n	8004eca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3e:	4b33      	ldr	r3, [pc, #204]	@ (8004f0c <HAL_RCC_OscConfig+0x4b4>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fe fe54 	bl	8003af0 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4c:	f7fe fe50 	bl	8003af0 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e093      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5e:	4b29      	ldr	r3, [pc, #164]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	019b      	lsls	r3, r3, #6
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	3b01      	subs	r3, #1
 8004e84:	041b      	lsls	r3, r3, #16
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e94:	071b      	lsls	r3, r3, #28
 8004e96:	491b      	ldr	r1, [pc, #108]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <HAL_RCC_OscConfig+0x4b4>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea2:	f7fe fe25 	bl	8003af0 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eaa:	f7fe fe21 	bl	8003af0 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e064      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ebc:	4b11      	ldr	r3, [pc, #68]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x452>
 8004ec8:	e05c      	b.n	8004f84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eca:	4b10      	ldr	r3, [pc, #64]	@ (8004f0c <HAL_RCC_OscConfig+0x4b4>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fe fe0e 	bl	8003af0 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fe fe0a 	bl	8003af0 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e04d      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eea:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <HAL_RCC_OscConfig+0x4ac>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x480>
 8004ef6:	e045      	b.n	8004f84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e040      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40007000 	.word	0x40007000
 8004f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f10:	4b1f      	ldr	r3, [pc, #124]	@ (8004f90 <HAL_RCC_OscConfig+0x538>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d030      	beq.n	8004f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d129      	bne.n	8004f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d122      	bne.n	8004f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f40:	4013      	ands	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d119      	bne.n	8004f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d10f      	bne.n	8004f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d107      	bne.n	8004f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800

08004f94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e07b      	b.n	800509e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d108      	bne.n	8004fc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fb6:	d009      	beq.n	8004fcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	61da      	str	r2, [r3, #28]
 8004fbe:	e005      	b.n	8004fcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd f84e 	bl	8002088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005002:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005050:	ea42 0103 	orr.w	r1, r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	f003 0104 	and.w	r1, r3, #4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	f003 0210 	and.w	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69da      	ldr	r2, [r3, #28]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800508c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e01a      	b.n	80050ee <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fd f821 	bl	8002118 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b088      	sub	sp, #32
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	4613      	mov	r3, r2
 8005104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_SPI_Transmit+0x22>
 8005114:	2302      	movs	r3, #2
 8005116:	e12d      	b.n	8005374 <HAL_SPI_Transmit+0x27e>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005120:	f7fe fce6 	bl	8003af0 <HAL_GetTick>
 8005124:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d002      	beq.n	800513c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005136:	2302      	movs	r3, #2
 8005138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800513a:	e116      	b.n	800536a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_SPI_Transmit+0x52>
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d102      	bne.n	800514e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800514c:	e10d      	b.n	800536a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2203      	movs	r2, #3
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005194:	d10f      	bne.n	80051b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c0:	2b40      	cmp	r3, #64	@ 0x40
 80051c2:	d007      	beq.n	80051d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051dc:	d14f      	bne.n	800527e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_SPI_Transmit+0xf6>
 80051e6:	8afb      	ldrh	r3, [r7, #22]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d142      	bne.n	8005272 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f0:	881a      	ldrh	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	1c9a      	adds	r2, r3, #2
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005210:	e02f      	b.n	8005272 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b02      	cmp	r3, #2
 800521e:	d112      	bne.n	8005246 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005224:	881a      	ldrh	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	1c9a      	adds	r2, r3, #2
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005244:	e015      	b.n	8005272 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005246:	f7fe fc53 	bl	8003af0 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d803      	bhi.n	800525e <HAL_SPI_Transmit+0x168>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d102      	bne.n	8005264 <HAL_SPI_Transmit+0x16e>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d106      	bne.n	8005272 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005270:	e07b      	b.n	800536a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ca      	bne.n	8005212 <HAL_SPI_Transmit+0x11c>
 800527c:	e050      	b.n	8005320 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_SPI_Transmit+0x196>
 8005286:	8afb      	ldrh	r3, [r7, #22]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d144      	bne.n	8005316 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052b2:	e030      	b.n	8005316 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d113      	bne.n	80052ea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	7812      	ldrb	r2, [r2, #0]
 80052ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80052e8:	e015      	b.n	8005316 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ea:	f7fe fc01 	bl	8003af0 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d803      	bhi.n	8005302 <HAL_SPI_Transmit+0x20c>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d102      	bne.n	8005308 <HAL_SPI_Transmit+0x212>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005314:	e029      	b.n	800536a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1c9      	bne.n	80052b4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 fa6f 	bl	8005808 <SPI_EndRxTxTransaction>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e003      	b.n	800536a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005372:	7ffb      	ldrb	r3, [r7, #31]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	@ 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800538a:	2301      	movs	r3, #1
 800538c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_SPI_TransmitReceive+0x26>
 800539e:	2302      	movs	r3, #2
 80053a0:	e198      	b.n	80056d4 <HAL_SPI_TransmitReceive+0x358>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053aa:	f7fe fba1 	bl	8003af0 <HAL_GetTick>
 80053ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053c0:	887b      	ldrh	r3, [r7, #2]
 80053c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d00f      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x70>
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053d2:	d107      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <HAL_SPI_TransmitReceive+0x68>
 80053dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d003      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80053ea:	e16d      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d005      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x82>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x82>
 80053f8:	887b      	ldrh	r3, [r7, #2]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005404:	e160      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b04      	cmp	r3, #4
 8005410:	d003      	beq.n	800541a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2205      	movs	r2, #5
 8005416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	887a      	ldrh	r2, [r7, #2]
 800542a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	887a      	ldrh	r2, [r7, #2]
 800543c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	887a      	ldrh	r2, [r7, #2]
 8005442:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	d007      	beq.n	800546e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005476:	d17c      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_SPI_TransmitReceive+0x10a>
 8005480:	8b7b      	ldrh	r3, [r7, #26]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d16a      	bne.n	800555c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	881a      	ldrh	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054aa:	e057      	b.n	800555c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d11b      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x176>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d016      	beq.n	80054f2 <HAL_SPI_TransmitReceive+0x176>
 80054c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d113      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	881a      	ldrh	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054da:	1c9a      	adds	r2, r3, #2
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d119      	bne.n	8005534 <HAL_SPI_TransmitReceive+0x1b8>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d014      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	b292      	uxth	r2, r2
 8005516:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551c:	1c9a      	adds	r2, r3, #2
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005530:	2301      	movs	r3, #1
 8005532:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005534:	f7fe fadc 	bl	8003af0 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005540:	429a      	cmp	r2, r3
 8005542:	d80b      	bhi.n	800555c <HAL_SPI_TransmitReceive+0x1e0>
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d007      	beq.n	800555c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800555a:	e0b5      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1a2      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x130>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d19d      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x130>
 8005570:	e080      	b.n	8005674 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_TransmitReceive+0x204>
 800557a:	8b7b      	ldrh	r3, [r7, #26]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d16f      	bne.n	8005660 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	7812      	ldrb	r2, [r2, #0]
 800558c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055a6:	e05b      	b.n	8005660 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d11c      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x274>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d017      	beq.n	80055f0 <HAL_SPI_TransmitReceive+0x274>
 80055c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d114      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	7812      	ldrb	r2, [r2, #0]
 80055d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d119      	bne.n	8005632 <HAL_SPI_TransmitReceive+0x2b6>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d014      	beq.n	8005632 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800562e:	2301      	movs	r3, #1
 8005630:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005632:	f7fe fa5d 	bl	8003af0 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800563e:	429a      	cmp	r2, r3
 8005640:	d803      	bhi.n	800564a <HAL_SPI_TransmitReceive+0x2ce>
 8005642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d102      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x2d4>
 800564a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564c:	2b00      	cmp	r3, #0
 800564e:	d107      	bne.n	8005660 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800565e:	e033      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d19e      	bne.n	80055a8 <HAL_SPI_TransmitReceive+0x22c>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d199      	bne.n	80055a8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005676:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f8c5 	bl	8005808 <SPI_EndRxTxTransaction>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d006      	beq.n	8005692 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005690:	e01a      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056be:	e003      	b.n	80056c8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80056d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3730      	adds	r7, #48	@ 0x30
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056ea:	b2db      	uxtb	r3, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005708:	f7fe f9f2 	bl	8003af0 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4413      	add	r3, r2
 8005716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005718:	f7fe f9ea 	bl	8003af0 <HAL_GetTick>
 800571c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800571e:	4b39      	ldr	r3, [pc, #228]	@ (8005804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	015b      	lsls	r3, r3, #5
 8005724:	0d1b      	lsrs	r3, r3, #20
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800572e:	e054      	b.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d050      	beq.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005738:	f7fe f9da 	bl	8003af0 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	429a      	cmp	r2, r3
 8005746:	d902      	bls.n	800574e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d13d      	bne.n	80057ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800575c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005766:	d111      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005770:	d004      	beq.n	800577c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577a:	d107      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800578a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005794:	d10f      	bne.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e017      	b.n	80057fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d19b      	bne.n	8005730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000198 	.word	0x20000198

08005808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2201      	movs	r2, #1
 800581c:	2102      	movs	r1, #2
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f7ff ff6a 	bl	80056f8 <SPI_WaitFlagStateUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d007      	beq.n	800583a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582e:	f043 0220 	orr.w	r2, r3, #32
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e032      	b.n	80058a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800583a:	4b1b      	ldr	r3, [pc, #108]	@ (80058a8 <SPI_EndRxTxTransaction+0xa0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1b      	ldr	r2, [pc, #108]	@ (80058ac <SPI_EndRxTxTransaction+0xa4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	0d5b      	lsrs	r3, r3, #21
 8005846:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005858:	d112      	bne.n	8005880 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2200      	movs	r2, #0
 8005862:	2180      	movs	r1, #128	@ 0x80
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff ff47 	bl	80056f8 <SPI_WaitFlagStateUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d016      	beq.n	800589e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e00f      	b.n	80058a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	3b01      	subs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005896:	2b80      	cmp	r3, #128	@ 0x80
 8005898:	d0f2      	beq.n	8005880 <SPI_EndRxTxTransaction+0x78>
 800589a:	e000      	b.n	800589e <SPI_EndRxTxTransaction+0x96>
        break;
 800589c:	bf00      	nop
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000198 	.word	0x20000198
 80058ac:	165e9f81 	.word	0x165e9f81

080058b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e041      	b.n	8005946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fc ff2e 	bl	8002738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f000 fa7e 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	d001      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e04e      	b.n	8005a06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a23      	ldr	r2, [pc, #140]	@ (8005a14 <HAL_TIM_Base_Start_IT+0xc4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d022      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x80>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005992:	d01d      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x80>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1f      	ldr	r2, [pc, #124]	@ (8005a18 <HAL_TIM_Base_Start_IT+0xc8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d018      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x80>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a1c <HAL_TIM_Base_Start_IT+0xcc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d013      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x80>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005a20 <HAL_TIM_Base_Start_IT+0xd0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00e      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x80>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005a24 <HAL_TIM_Base_Start_IT+0xd4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d009      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x80>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a19      	ldr	r2, [pc, #100]	@ (8005a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d004      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x80>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a18      	ldr	r2, [pc, #96]	@ (8005a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d111      	bne.n	80059f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b06      	cmp	r3, #6
 80059e0:	d010      	beq.n	8005a04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f2:	e007      	b.n	8005a04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40001800 	.word	0x40001800

08005a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d020      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01b      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0202 	mvn.w	r2, #2
 8005a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f999 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005a80:	e005      	b.n	8005a8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f98b 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f99c 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d020      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01b      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0204 	mvn.w	r2, #4
 8005ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f973 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f965 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f976 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d020      	beq.n	8005b2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01b      	beq.n	8005b2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0208 	mvn.w	r2, #8
 8005afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2204      	movs	r2, #4
 8005b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f94d 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e005      	b.n	8005b26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f93f 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f950 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d020      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01b      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0210 	mvn.w	r2, #16
 8005b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f927 	bl	8005db2 <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f919 	bl	8005d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f92a 	bl	8005dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00c      	beq.n	8005b9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0201 	mvn.w	r2, #1
 8005b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fb ffc6 	bl	8001b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00c      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fae4 	bl	8006188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00c      	beq.n	8005be4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f8fb 	bl	8005dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00c      	beq.n	8005c08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d007      	beq.n	8005c08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0220 	mvn.w	r2, #32
 8005c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fab6 	bl	8006174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIM_ConfigClockSource+0x1c>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e0b4      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x186>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c64:	d03e      	beq.n	8005ce4 <HAL_TIM_ConfigClockSource+0xd4>
 8005c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6a:	f200 8087 	bhi.w	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c72:	f000 8086 	beq.w	8005d82 <HAL_TIM_ConfigClockSource+0x172>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7a:	d87f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b70      	cmp	r3, #112	@ 0x70
 8005c7e:	d01a      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0xa6>
 8005c80:	2b70      	cmp	r3, #112	@ 0x70
 8005c82:	d87b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b60      	cmp	r3, #96	@ 0x60
 8005c86:	d050      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x11a>
 8005c88:	2b60      	cmp	r3, #96	@ 0x60
 8005c8a:	d877      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b50      	cmp	r3, #80	@ 0x50
 8005c8e:	d03c      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0xfa>
 8005c90:	2b50      	cmp	r3, #80	@ 0x50
 8005c92:	d873      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b40      	cmp	r3, #64	@ 0x40
 8005c96:	d058      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0x13a>
 8005c98:	2b40      	cmp	r3, #64	@ 0x40
 8005c9a:	d86f      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b30      	cmp	r3, #48	@ 0x30
 8005c9e:	d064      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	2b30      	cmp	r3, #48	@ 0x30
 8005ca2:	d86b      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d060      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d867      	bhi.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d05c      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d05a      	beq.n	8005d6a <HAL_TIM_ConfigClockSource+0x15a>
 8005cb4:	e062      	b.n	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc6:	f000 f9b9 	bl	800603c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	609a      	str	r2, [r3, #8]
      break;
 8005ce2:	e04f      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf4:	f000 f9a2 	bl	800603c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d06:	609a      	str	r2, [r3, #8]
      break;
 8005d08:	e03c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 f916 	bl	8005f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2150      	movs	r1, #80	@ 0x50
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f96f 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d28:	e02c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d36:	461a      	mov	r2, r3
 8005d38:	f000 f935 	bl	8005fa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2160      	movs	r1, #96	@ 0x60
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 f95f 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d48:	e01c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d56:	461a      	mov	r2, r3
 8005d58:	f000 f8f6 	bl	8005f48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2140      	movs	r1, #64	@ 0x40
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f94f 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d68:	e00c      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f000 f946 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d7a:	e003      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d80:	e000      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a46      	ldr	r2, [pc, #280]	@ (8005f1c <TIM_Base_SetConfig+0x12c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0e:	d00f      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a43      	ldr	r2, [pc, #268]	@ (8005f20 <TIM_Base_SetConfig+0x130>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00b      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a42      	ldr	r2, [pc, #264]	@ (8005f24 <TIM_Base_SetConfig+0x134>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d007      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a41      	ldr	r2, [pc, #260]	@ (8005f28 <TIM_Base_SetConfig+0x138>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a40      	ldr	r2, [pc, #256]	@ (8005f2c <TIM_Base_SetConfig+0x13c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d108      	bne.n	8005e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a35      	ldr	r2, [pc, #212]	@ (8005f1c <TIM_Base_SetConfig+0x12c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d02b      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e50:	d027      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a32      	ldr	r2, [pc, #200]	@ (8005f20 <TIM_Base_SetConfig+0x130>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d023      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a31      	ldr	r2, [pc, #196]	@ (8005f24 <TIM_Base_SetConfig+0x134>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01f      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a30      	ldr	r2, [pc, #192]	@ (8005f28 <TIM_Base_SetConfig+0x138>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01b      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8005f2c <TIM_Base_SetConfig+0x13c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d017      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a2e      	ldr	r2, [pc, #184]	@ (8005f30 <TIM_Base_SetConfig+0x140>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005f34 <TIM_Base_SetConfig+0x144>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00f      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a2c      	ldr	r2, [pc, #176]	@ (8005f38 <TIM_Base_SetConfig+0x148>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005f3c <TIM_Base_SetConfig+0x14c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2a      	ldr	r2, [pc, #168]	@ (8005f40 <TIM_Base_SetConfig+0x150>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a29      	ldr	r2, [pc, #164]	@ (8005f44 <TIM_Base_SetConfig+0x154>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d108      	bne.n	8005eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a10      	ldr	r2, [pc, #64]	@ (8005f1c <TIM_Base_SetConfig+0x12c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_Base_SetConfig+0xf8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a12      	ldr	r2, [pc, #72]	@ (8005f2c <TIM_Base_SetConfig+0x13c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d103      	bne.n	8005ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d105      	bne.n	8005f0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f023 0201 	bic.w	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]
  }
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40010400 	.word	0x40010400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800
 8005f3c:	40001800 	.word	0x40001800
 8005f40:	40001c00 	.word	0x40001c00
 8005f44:	40002000 	.word	0x40002000

08005f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f023 0201 	bic.w	r2, r3, #1
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f023 030a 	bic.w	r3, r3, #10
 8005f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b087      	sub	sp, #28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f023 0210 	bic.w	r2, r3, #16
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	031b      	lsls	r3, r3, #12
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fe2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	f043 0307 	orr.w	r3, r3, #7
 8006028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	609a      	str	r2, [r3, #8]
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	021a      	lsls	r2, r3, #8
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	431a      	orrs	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	609a      	str	r2, [r3, #8]
}
 8006070:	bf00      	nop
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006090:	2302      	movs	r3, #2
 8006092:	e05a      	b.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a21      	ldr	r2, [pc, #132]	@ (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d022      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e0:	d01d      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1d      	ldr	r2, [pc, #116]	@ (800615c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d018      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d013      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00e      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a18      	ldr	r2, [pc, #96]	@ (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d009      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a17      	ldr	r2, [pc, #92]	@ (800616c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d004      	beq.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a15      	ldr	r2, [pc, #84]	@ (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10c      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4313      	orrs	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40010000 	.word	0x40010000
 800615c:	40000400 	.word	0x40000400
 8006160:	40000800 	.word	0x40000800
 8006164:	40000c00 	.word	0x40000c00
 8006168:	40010400 	.word	0x40010400
 800616c:	40014000 	.word	0x40014000
 8006170:	40001800 	.word	0x40001800

08006174 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e042      	b.n	8006234 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fc fb1e 	bl	8002804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	@ 0x24
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fd69 	bl	8006cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08a      	sub	sp, #40	@ 0x28
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	4613      	mov	r3, r2
 800624a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b20      	cmp	r3, #32
 800625a:	d175      	bne.n	8006348 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_UART_Transmit+0x2c>
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e06e      	b.n	800634a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2221      	movs	r2, #33	@ 0x21
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800627a:	f7fd fc39 	bl	8003af0 <HAL_GetTick>
 800627e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	88fa      	ldrh	r2, [r7, #6]
 8006284:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006294:	d108      	bne.n	80062a8 <HAL_UART_Transmit+0x6c>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	e003      	b.n	80062b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062b0:	e02e      	b.n	8006310 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2200      	movs	r2, #0
 80062ba:	2180      	movs	r1, #128	@ 0x80
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 fb05 	bl	80068cc <UART_WaitOnFlagUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e03a      	b.n	800634a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	3302      	adds	r3, #2
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	e007      	b.n	8006302 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	781a      	ldrb	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	3301      	adds	r3, #1
 8006300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1cb      	bne.n	80062b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2200      	movs	r2, #0
 8006322:	2140      	movs	r1, #64	@ 0x40
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 fad1 	bl	80068cc <UART_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e006      	b.n	800634a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e000      	b.n	800634a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006348:	2302      	movs	r3, #2
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	3720      	adds	r7, #32
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b0ba      	sub	sp, #232	@ 0xe8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800637a:	2300      	movs	r3, #0
 800637c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006380:	2300      	movs	r3, #0
 8006382:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10f      	bne.n	80063ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_UART_IRQHandler+0x66>
 80063a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fbc2 	bl	8006b3c <UART_Receive_IT>
      return;
 80063b8:	e25b      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 80de 	beq.w	8006580 <HAL_UART_IRQHandler+0x22c>
 80063c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d106      	bne.n	80063de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80d1 	beq.w	8006580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00b      	beq.n	8006402 <HAL_UART_IRQHandler+0xae>
 80063ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	f043 0201 	orr.w	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <HAL_UART_IRQHandler+0xd2>
 800640e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641e:	f043 0202 	orr.w	r2, r3, #2
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <HAL_UART_IRQHandler+0xf6>
 8006432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006442:	f043 0204 	orr.w	r2, r3, #4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d011      	beq.n	800647a <HAL_UART_IRQHandler+0x126>
 8006456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d105      	bne.n	800646e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006472:	f043 0208 	orr.w	r2, r3, #8
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 81f2 	beq.w	8006868 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_UART_IRQHandler+0x14e>
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fb4d 	bl	8006b3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <HAL_UART_IRQHandler+0x17a>
 80064c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d04f      	beq.n	800656e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa55 	bl	800697e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064de:	2b40      	cmp	r3, #64	@ 0x40
 80064e0:	d141      	bne.n	8006566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3314      	adds	r3, #20
 80064e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3314      	adds	r3, #20
 800650a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800650e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800651a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1d9      	bne.n	80064e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d013      	beq.n	800655e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653a:	4a7e      	ldr	r2, [pc, #504]	@ (8006734 <HAL_UART_IRQHandler+0x3e0>)
 800653c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006542:	4618      	mov	r0, r3
 8006544:	f7fd fc61 	bl	8003e0a <HAL_DMA_Abort_IT>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d016      	beq.n	800657c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006558:	4610      	mov	r0, r2
 800655a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655c:	e00e      	b.n	800657c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f99e 	bl	80068a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006564:	e00a      	b.n	800657c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f99a 	bl	80068a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	e006      	b.n	800657c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f996 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800657a:	e175      	b.n	8006868 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	bf00      	nop
    return;
 800657e:	e173      	b.n	8006868 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	2b01      	cmp	r3, #1
 8006586:	f040 814f 	bne.w	8006828 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8148 	beq.w	8006828 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659c:	f003 0310 	and.w	r3, r3, #16
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8141 	beq.w	8006828 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065a6:	2300      	movs	r3, #0
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60bb      	str	r3, [r7, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	60bb      	str	r3, [r7, #8]
 80065ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c6:	2b40      	cmp	r3, #64	@ 0x40
 80065c8:	f040 80b6 	bne.w	8006738 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 8145 	beq.w	800686c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065ea:	429a      	cmp	r2, r3
 80065ec:	f080 813e 	bcs.w	800686c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006602:	f000 8088 	beq.w	8006716 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800661c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	330c      	adds	r3, #12
 800662e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006632:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800663e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800664a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1d9      	bne.n	8006606 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3314      	adds	r3, #20
 8006658:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006662:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3314      	adds	r3, #20
 8006672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006676:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800667a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800667e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e1      	bne.n	8006652 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3314      	adds	r3, #20
 8006694:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800669e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3314      	adds	r3, #20
 80066ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e3      	bne.n	800668e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80066f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e3      	bne.n	80066d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	4618      	mov	r0, r3
 8006712:	f7fd fb0a 	bl	8003d2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006724:	b29b      	uxth	r3, r3
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	b29b      	uxth	r3, r3
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f8c1 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006732:	e09b      	b.n	800686c <HAL_UART_IRQHandler+0x518>
 8006734:	08006a45 	.word	0x08006a45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006740:	b29b      	uxth	r3, r3
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 808e 	beq.w	8006870 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8089 	beq.w	8006870 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	330c      	adds	r3, #12
 8006764:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800676e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006770:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006774:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	330c      	adds	r3, #12
 800677e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006782:	647a      	str	r2, [r7, #68]	@ 0x44
 8006784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006788:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e3      	bne.n	800675e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3314      	adds	r3, #20
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	623b      	str	r3, [r7, #32]
   return(result);
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e3      	bne.n	8006796 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0310 	bic.w	r3, r3, #16
 80067f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006800:	61fa      	str	r2, [r7, #28]
 8006802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	69b9      	ldr	r1, [r7, #24]
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	617b      	str	r3, [r7, #20]
   return(result);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e3      	bne.n	80067dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800681a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f847 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006826:	e023      	b.n	8006870 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <HAL_UART_IRQHandler+0x4f4>
 8006834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f913 	bl	8006a6c <UART_Transmit_IT>
    return;
 8006846:	e014      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00e      	beq.n	8006872 <HAL_UART_IRQHandler+0x51e>
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f953 	bl	8006b0c <UART_EndTransmit_IT>
    return;
 8006866:	e004      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
    return;
 8006868:	bf00      	nop
 800686a:	e002      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
      return;
 800686c:	bf00      	nop
 800686e:	e000      	b.n	8006872 <HAL_UART_IRQHandler+0x51e>
      return;
 8006870:	bf00      	nop
  }
}
 8006872:	37e8      	adds	r7, #232	@ 0xe8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068dc:	e03b      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e4:	d037      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e6:	f7fd f903 	bl	8003af0 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d302      	bcc.n	80068fc <UART_WaitOnFlagUntilTimeout+0x30>
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e03a      	b.n	8006976 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	d023      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0x8a>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b80      	cmp	r3, #128	@ 0x80
 8006912:	d020      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b40      	cmp	r3, #64	@ 0x40
 8006918:	d01d      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b08      	cmp	r3, #8
 8006926:	d116      	bne.n	8006956 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f81d 	bl	800697e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2208      	movs	r2, #8
 8006948:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e00f      	b.n	8006976 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4013      	ands	r3, r2
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	429a      	cmp	r2, r3
 8006964:	bf0c      	ite	eq
 8006966:	2301      	moveq	r3, #1
 8006968:	2300      	movne	r3, #0
 800696a:	b2db      	uxtb	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	429a      	cmp	r2, r3
 8006972:	d0b4      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800697e:	b480      	push	{r7}
 8006980:	b095      	sub	sp, #84	@ 0x54
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	330c      	adds	r3, #12
 800698c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800699c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80069a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e5      	bne.n	8006986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e5      	bne.n	80069ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d119      	bne.n	8006a2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	330c      	adds	r3, #12
 80069fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f023 0310 	bic.w	r3, r3, #16
 8006a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a16:	61ba      	str	r2, [r7, #24]
 8006a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6979      	ldr	r1, [r7, #20]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	613b      	str	r3, [r7, #16]
   return(result);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e5      	bne.n	80069f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a38:	bf00      	nop
 8006a3a:	3754      	adds	r7, #84	@ 0x54
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff ff1e 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b21      	cmp	r3, #33	@ 0x21
 8006a7e:	d13e      	bne.n	8006afe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a88:	d114      	bne.n	8006ab4 <UART_Transmit_IT+0x48>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d110      	bne.n	8006ab4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aa6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	1c9a      	adds	r2, r3, #2
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	621a      	str	r2, [r3, #32]
 8006ab2:	e008      	b.n	8006ac6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	1c59      	adds	r1, r3, #1
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6211      	str	r1, [r2, #32]
 8006abe:	781a      	ldrb	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10f      	bne.n	8006afa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ae8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006af8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e000      	b.n	8006b00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006afe:	2302      	movs	r3, #2
  }
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fea3 	bl	8006878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08c      	sub	sp, #48	@ 0x30
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b22      	cmp	r3, #34	@ 0x22
 8006b4e:	f040 80ae 	bne.w	8006cae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b5a:	d117      	bne.n	8006b8c <UART_Receive_IT+0x50>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d113      	bne.n	8006b8c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b84:	1c9a      	adds	r2, r3, #2
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b8a:	e026      	b.n	8006bda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b9e:	d007      	beq.n	8006bb0 <UART_Receive_IT+0x74>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <UART_Receive_IT+0x82>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	e008      	b.n	8006bd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4619      	mov	r1, r3
 8006be8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d15d      	bne.n	8006caa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0220 	bic.w	r2, r2, #32
 8006bfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695a      	ldr	r2, [r3, #20]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d135      	bne.n	8006ca0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	330c      	adds	r3, #12
 8006c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f023 0310 	bic.w	r3, r3, #16
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5a:	623a      	str	r2, [r7, #32]
 8006c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	69f9      	ldr	r1, [r7, #28]
 8006c60:	6a3a      	ldr	r2, [r7, #32]
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e5      	bne.n	8006c3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d10a      	bne.n	8006c92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff fe0b 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
 8006c9e:	e002      	b.n	8006ca6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff fdf3 	bl	800688c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e002      	b.n	8006cb0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	e000      	b.n	8006cb0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006cae:	2302      	movs	r3, #2
  }
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3730      	adds	r7, #48	@ 0x30
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cbc:	b0c0      	sub	sp, #256	@ 0x100
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd4:	68d9      	ldr	r1, [r3, #12]
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	ea40 0301 	orr.w	r3, r0, r1
 8006ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d10:	f021 010c 	bic.w	r1, r1, #12
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d32:	6999      	ldr	r1, [r3, #24]
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	ea40 0301 	orr.w	r3, r0, r1
 8006d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b8f      	ldr	r3, [pc, #572]	@ (8006f84 <UART_SetConfig+0x2cc>)
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d005      	beq.n	8006d58 <UART_SetConfig+0xa0>
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4b8d      	ldr	r3, [pc, #564]	@ (8006f88 <UART_SetConfig+0x2d0>)
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d104      	bne.n	8006d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d58:	f7fd fc3a 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 8006d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d60:	e003      	b.n	8006d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d62:	f7fd fc21 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8006d66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d74:	f040 810c 	bne.w	8006f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	1891      	adds	r1, r2, r2
 8006d90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d92:	415b      	adcs	r3, r3
 8006d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	eb12 0801 	adds.w	r8, r2, r1
 8006da0:	4629      	mov	r1, r5
 8006da2:	eb43 0901 	adc.w	r9, r3, r1
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dba:	4690      	mov	r8, r2
 8006dbc:	4699      	mov	r9, r3
 8006dbe:	4623      	mov	r3, r4
 8006dc0:	eb18 0303 	adds.w	r3, r8, r3
 8006dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dc8:	462b      	mov	r3, r5
 8006dca:	eb49 0303 	adc.w	r3, r9, r3
 8006dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006de6:	460b      	mov	r3, r1
 8006de8:	18db      	adds	r3, r3, r3
 8006dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dec:	4613      	mov	r3, r2
 8006dee:	eb42 0303 	adc.w	r3, r2, r3
 8006df2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006dfc:	f7f9 fef4 	bl	8000be8 <__aeabi_uldivmod>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4b61      	ldr	r3, [pc, #388]	@ (8006f8c <UART_SetConfig+0x2d4>)
 8006e06:	fba3 2302 	umull	r2, r3, r3, r2
 8006e0a:	095b      	lsrs	r3, r3, #5
 8006e0c:	011c      	lsls	r4, r3, #4
 8006e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	1891      	adds	r1, r2, r2
 8006e26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e28:	415b      	adcs	r3, r3
 8006e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e30:	4641      	mov	r1, r8
 8006e32:	eb12 0a01 	adds.w	sl, r2, r1
 8006e36:	4649      	mov	r1, r9
 8006e38:	eb43 0b01 	adc.w	fp, r3, r1
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e50:	4692      	mov	sl, r2
 8006e52:	469b      	mov	fp, r3
 8006e54:	4643      	mov	r3, r8
 8006e56:	eb1a 0303 	adds.w	r3, sl, r3
 8006e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	eb4b 0303 	adc.w	r3, fp, r3
 8006e64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	18db      	adds	r3, r3, r3
 8006e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e82:	4613      	mov	r3, r2
 8006e84:	eb42 0303 	adc.w	r3, r2, r3
 8006e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e92:	f7f9 fea9 	bl	8000be8 <__aeabi_uldivmod>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f8c <UART_SetConfig+0x2d4>)
 8006e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	2264      	movs	r2, #100	@ 0x64
 8006ea6:	fb02 f303 	mul.w	r3, r2, r3
 8006eaa:	1acb      	subs	r3, r1, r3
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006eb2:	4b36      	ldr	r3, [pc, #216]	@ (8006f8c <UART_SetConfig+0x2d4>)
 8006eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ec0:	441c      	add	r4, r3
 8006ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ed4:	4642      	mov	r2, r8
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	1891      	adds	r1, r2, r2
 8006eda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006edc:	415b      	adcs	r3, r3
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	1851      	adds	r1, r2, r1
 8006ee8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006eea:	4649      	mov	r1, r9
 8006eec:	414b      	adcs	r3, r1
 8006eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006efc:	4659      	mov	r1, fp
 8006efe:	00cb      	lsls	r3, r1, #3
 8006f00:	4651      	mov	r1, sl
 8006f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f06:	4651      	mov	r1, sl
 8006f08:	00ca      	lsls	r2, r1, #3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4642      	mov	r2, r8
 8006f12:	189b      	adds	r3, r3, r2
 8006f14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f18:	464b      	mov	r3, r9
 8006f1a:	460a      	mov	r2, r1
 8006f1c:	eb42 0303 	adc.w	r3, r2, r3
 8006f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f38:	460b      	mov	r3, r1
 8006f3a:	18db      	adds	r3, r3, r3
 8006f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f3e:	4613      	mov	r3, r2
 8006f40:	eb42 0303 	adc.w	r3, r2, r3
 8006f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f4e:	f7f9 fe4b 	bl	8000be8 <__aeabi_uldivmod>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4b0d      	ldr	r3, [pc, #52]	@ (8006f8c <UART_SetConfig+0x2d4>)
 8006f58:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5c:	095b      	lsrs	r3, r3, #5
 8006f5e:	2164      	movs	r1, #100	@ 0x64
 8006f60:	fb01 f303 	mul.w	r3, r1, r3
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	3332      	adds	r3, #50	@ 0x32
 8006f6a:	4a08      	ldr	r2, [pc, #32]	@ (8006f8c <UART_SetConfig+0x2d4>)
 8006f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	f003 0207 	and.w	r2, r3, #7
 8006f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4422      	add	r2, r4
 8006f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f80:	e106      	b.n	8007190 <UART_SetConfig+0x4d8>
 8006f82:	bf00      	nop
 8006f84:	40011000 	.word	0x40011000
 8006f88:	40011400 	.word	0x40011400
 8006f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006fa2:	4642      	mov	r2, r8
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	1891      	adds	r1, r2, r2
 8006fa8:	6239      	str	r1, [r7, #32]
 8006faa:	415b      	adcs	r3, r3
 8006fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fb2:	4641      	mov	r1, r8
 8006fb4:	1854      	adds	r4, r2, r1
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	eb43 0501 	adc.w	r5, r3, r1
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	00eb      	lsls	r3, r5, #3
 8006fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fca:	00e2      	lsls	r2, r4, #3
 8006fcc:	4614      	mov	r4, r2
 8006fce:	461d      	mov	r5, r3
 8006fd0:	4643      	mov	r3, r8
 8006fd2:	18e3      	adds	r3, r4, r3
 8006fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fd8:	464b      	mov	r3, r9
 8006fda:	eb45 0303 	adc.w	r3, r5, r3
 8006fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ffe:	4629      	mov	r1, r5
 8007000:	008b      	lsls	r3, r1, #2
 8007002:	4621      	mov	r1, r4
 8007004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007008:	4621      	mov	r1, r4
 800700a:	008a      	lsls	r2, r1, #2
 800700c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007010:	f7f9 fdea 	bl	8000be8 <__aeabi_uldivmod>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4b60      	ldr	r3, [pc, #384]	@ (800719c <UART_SetConfig+0x4e4>)
 800701a:	fba3 2302 	umull	r2, r3, r3, r2
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	011c      	lsls	r4, r3, #4
 8007022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007026:	2200      	movs	r2, #0
 8007028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800702c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007034:	4642      	mov	r2, r8
 8007036:	464b      	mov	r3, r9
 8007038:	1891      	adds	r1, r2, r2
 800703a:	61b9      	str	r1, [r7, #24]
 800703c:	415b      	adcs	r3, r3
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007044:	4641      	mov	r1, r8
 8007046:	1851      	adds	r1, r2, r1
 8007048:	6139      	str	r1, [r7, #16]
 800704a:	4649      	mov	r1, r9
 800704c:	414b      	adcs	r3, r1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800705c:	4659      	mov	r1, fp
 800705e:	00cb      	lsls	r3, r1, #3
 8007060:	4651      	mov	r1, sl
 8007062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007066:	4651      	mov	r1, sl
 8007068:	00ca      	lsls	r2, r1, #3
 800706a:	4610      	mov	r0, r2
 800706c:	4619      	mov	r1, r3
 800706e:	4603      	mov	r3, r0
 8007070:	4642      	mov	r2, r8
 8007072:	189b      	adds	r3, r3, r2
 8007074:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007078:	464b      	mov	r3, r9
 800707a:	460a      	mov	r2, r1
 800707c:	eb42 0303 	adc.w	r3, r2, r3
 8007080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800708e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800709c:	4649      	mov	r1, r9
 800709e:	008b      	lsls	r3, r1, #2
 80070a0:	4641      	mov	r1, r8
 80070a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a6:	4641      	mov	r1, r8
 80070a8:	008a      	lsls	r2, r1, #2
 80070aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80070ae:	f7f9 fd9b 	bl	8000be8 <__aeabi_uldivmod>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	4b38      	ldr	r3, [pc, #224]	@ (800719c <UART_SetConfig+0x4e4>)
 80070ba:	fba3 2301 	umull	r2, r3, r3, r1
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	2264      	movs	r2, #100	@ 0x64
 80070c2:	fb02 f303 	mul.w	r3, r2, r3
 80070c6:	1acb      	subs	r3, r1, r3
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	3332      	adds	r3, #50	@ 0x32
 80070cc:	4a33      	ldr	r2, [pc, #204]	@ (800719c <UART_SetConfig+0x4e4>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070d8:	441c      	add	r4, r3
 80070da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070de:	2200      	movs	r2, #0
 80070e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80070e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80070e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80070e8:	4642      	mov	r2, r8
 80070ea:	464b      	mov	r3, r9
 80070ec:	1891      	adds	r1, r2, r2
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	415b      	adcs	r3, r3
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070f8:	4641      	mov	r1, r8
 80070fa:	1851      	adds	r1, r2, r1
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	4649      	mov	r1, r9
 8007100:	414b      	adcs	r3, r1
 8007102:	607b      	str	r3, [r7, #4]
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007110:	4659      	mov	r1, fp
 8007112:	00cb      	lsls	r3, r1, #3
 8007114:	4651      	mov	r1, sl
 8007116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800711a:	4651      	mov	r1, sl
 800711c:	00ca      	lsls	r2, r1, #3
 800711e:	4610      	mov	r0, r2
 8007120:	4619      	mov	r1, r3
 8007122:	4603      	mov	r3, r0
 8007124:	4642      	mov	r2, r8
 8007126:	189b      	adds	r3, r3, r2
 8007128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800712a:	464b      	mov	r3, r9
 800712c:	460a      	mov	r2, r1
 800712e:	eb42 0303 	adc.w	r3, r2, r3
 8007132:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	663b      	str	r3, [r7, #96]	@ 0x60
 800713e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800714c:	4649      	mov	r1, r9
 800714e:	008b      	lsls	r3, r1, #2
 8007150:	4641      	mov	r1, r8
 8007152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007156:	4641      	mov	r1, r8
 8007158:	008a      	lsls	r2, r1, #2
 800715a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800715e:	f7f9 fd43 	bl	8000be8 <__aeabi_uldivmod>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4b0d      	ldr	r3, [pc, #52]	@ (800719c <UART_SetConfig+0x4e4>)
 8007168:	fba3 1302 	umull	r1, r3, r3, r2
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	2164      	movs	r1, #100	@ 0x64
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	3332      	adds	r3, #50	@ 0x32
 800717a:	4a08      	ldr	r2, [pc, #32]	@ (800719c <UART_SetConfig+0x4e4>)
 800717c:	fba2 2303 	umull	r2, r3, r2, r3
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	f003 020f 	and.w	r2, r3, #15
 8007186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4422      	add	r2, r4
 800718e:	609a      	str	r2, [r3, #8]
}
 8007190:	bf00      	nop
 8007192:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007196:	46bd      	mov	sp, r7
 8007198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800719c:	51eb851f 	.word	0x51eb851f

080071a0 <__cvt>:
 80071a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a4:	ec57 6b10 	vmov	r6, r7, d0
 80071a8:	2f00      	cmp	r7, #0
 80071aa:	460c      	mov	r4, r1
 80071ac:	4619      	mov	r1, r3
 80071ae:	463b      	mov	r3, r7
 80071b0:	bfbb      	ittet	lt
 80071b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80071b6:	461f      	movlt	r7, r3
 80071b8:	2300      	movge	r3, #0
 80071ba:	232d      	movlt	r3, #45	@ 0x2d
 80071bc:	700b      	strb	r3, [r1, #0]
 80071be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80071c4:	4691      	mov	r9, r2
 80071c6:	f023 0820 	bic.w	r8, r3, #32
 80071ca:	bfbc      	itt	lt
 80071cc:	4632      	movlt	r2, r6
 80071ce:	4616      	movlt	r6, r2
 80071d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80071d4:	d005      	beq.n	80071e2 <__cvt+0x42>
 80071d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80071da:	d100      	bne.n	80071de <__cvt+0x3e>
 80071dc:	3401      	adds	r4, #1
 80071de:	2102      	movs	r1, #2
 80071e0:	e000      	b.n	80071e4 <__cvt+0x44>
 80071e2:	2103      	movs	r1, #3
 80071e4:	ab03      	add	r3, sp, #12
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	ab02      	add	r3, sp, #8
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	ec47 6b10 	vmov	d0, r6, r7
 80071f0:	4653      	mov	r3, sl
 80071f2:	4622      	mov	r2, r4
 80071f4:	f000 fe3c 	bl	8007e70 <_dtoa_r>
 80071f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80071fc:	4605      	mov	r5, r0
 80071fe:	d119      	bne.n	8007234 <__cvt+0x94>
 8007200:	f019 0f01 	tst.w	r9, #1
 8007204:	d00e      	beq.n	8007224 <__cvt+0x84>
 8007206:	eb00 0904 	add.w	r9, r0, r4
 800720a:	2200      	movs	r2, #0
 800720c:	2300      	movs	r3, #0
 800720e:	4630      	mov	r0, r6
 8007210:	4639      	mov	r1, r7
 8007212:	f7f9 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 8007216:	b108      	cbz	r0, 800721c <__cvt+0x7c>
 8007218:	f8cd 900c 	str.w	r9, [sp, #12]
 800721c:	2230      	movs	r2, #48	@ 0x30
 800721e:	9b03      	ldr	r3, [sp, #12]
 8007220:	454b      	cmp	r3, r9
 8007222:	d31e      	bcc.n	8007262 <__cvt+0xc2>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007228:	1b5b      	subs	r3, r3, r5
 800722a:	4628      	mov	r0, r5
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	b004      	add	sp, #16
 8007230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007234:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007238:	eb00 0904 	add.w	r9, r0, r4
 800723c:	d1e5      	bne.n	800720a <__cvt+0x6a>
 800723e:	7803      	ldrb	r3, [r0, #0]
 8007240:	2b30      	cmp	r3, #48	@ 0x30
 8007242:	d10a      	bne.n	800725a <__cvt+0xba>
 8007244:	2200      	movs	r2, #0
 8007246:	2300      	movs	r3, #0
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 fc5c 	bl	8000b08 <__aeabi_dcmpeq>
 8007250:	b918      	cbnz	r0, 800725a <__cvt+0xba>
 8007252:	f1c4 0401 	rsb	r4, r4, #1
 8007256:	f8ca 4000 	str.w	r4, [sl]
 800725a:	f8da 3000 	ldr.w	r3, [sl]
 800725e:	4499      	add	r9, r3
 8007260:	e7d3      	b.n	800720a <__cvt+0x6a>
 8007262:	1c59      	adds	r1, r3, #1
 8007264:	9103      	str	r1, [sp, #12]
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	e7d9      	b.n	800721e <__cvt+0x7e>

0800726a <__exponent>:
 800726a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800726c:	2900      	cmp	r1, #0
 800726e:	bfba      	itte	lt
 8007270:	4249      	neglt	r1, r1
 8007272:	232d      	movlt	r3, #45	@ 0x2d
 8007274:	232b      	movge	r3, #43	@ 0x2b
 8007276:	2909      	cmp	r1, #9
 8007278:	7002      	strb	r2, [r0, #0]
 800727a:	7043      	strb	r3, [r0, #1]
 800727c:	dd29      	ble.n	80072d2 <__exponent+0x68>
 800727e:	f10d 0307 	add.w	r3, sp, #7
 8007282:	461d      	mov	r5, r3
 8007284:	270a      	movs	r7, #10
 8007286:	461a      	mov	r2, r3
 8007288:	fbb1 f6f7 	udiv	r6, r1, r7
 800728c:	fb07 1416 	mls	r4, r7, r6, r1
 8007290:	3430      	adds	r4, #48	@ 0x30
 8007292:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007296:	460c      	mov	r4, r1
 8007298:	2c63      	cmp	r4, #99	@ 0x63
 800729a:	f103 33ff 	add.w	r3, r3, #4294967295
 800729e:	4631      	mov	r1, r6
 80072a0:	dcf1      	bgt.n	8007286 <__exponent+0x1c>
 80072a2:	3130      	adds	r1, #48	@ 0x30
 80072a4:	1e94      	subs	r4, r2, #2
 80072a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072aa:	1c41      	adds	r1, r0, #1
 80072ac:	4623      	mov	r3, r4
 80072ae:	42ab      	cmp	r3, r5
 80072b0:	d30a      	bcc.n	80072c8 <__exponent+0x5e>
 80072b2:	f10d 0309 	add.w	r3, sp, #9
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	42ac      	cmp	r4, r5
 80072ba:	bf88      	it	hi
 80072bc:	2300      	movhi	r3, #0
 80072be:	3302      	adds	r3, #2
 80072c0:	4403      	add	r3, r0
 80072c2:	1a18      	subs	r0, r3, r0
 80072c4:	b003      	add	sp, #12
 80072c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80072cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80072d0:	e7ed      	b.n	80072ae <__exponent+0x44>
 80072d2:	2330      	movs	r3, #48	@ 0x30
 80072d4:	3130      	adds	r1, #48	@ 0x30
 80072d6:	7083      	strb	r3, [r0, #2]
 80072d8:	70c1      	strb	r1, [r0, #3]
 80072da:	1d03      	adds	r3, r0, #4
 80072dc:	e7f1      	b.n	80072c2 <__exponent+0x58>
	...

080072e0 <_printf_float>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	b08d      	sub	sp, #52	@ 0x34
 80072e6:	460c      	mov	r4, r1
 80072e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80072ec:	4616      	mov	r6, r2
 80072ee:	461f      	mov	r7, r3
 80072f0:	4605      	mov	r5, r0
 80072f2:	f000 fcbb 	bl	8007c6c <_localeconv_r>
 80072f6:	6803      	ldr	r3, [r0, #0]
 80072f8:	9304      	str	r3, [sp, #16]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7f8 ffd8 	bl	80002b0 <strlen>
 8007300:	2300      	movs	r3, #0
 8007302:	930a      	str	r3, [sp, #40]	@ 0x28
 8007304:	f8d8 3000 	ldr.w	r3, [r8]
 8007308:	9005      	str	r0, [sp, #20]
 800730a:	3307      	adds	r3, #7
 800730c:	f023 0307 	bic.w	r3, r3, #7
 8007310:	f103 0208 	add.w	r2, r3, #8
 8007314:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007318:	f8d4 b000 	ldr.w	fp, [r4]
 800731c:	f8c8 2000 	str.w	r2, [r8]
 8007320:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007324:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007328:	9307      	str	r3, [sp, #28]
 800732a:	f8cd 8018 	str.w	r8, [sp, #24]
 800732e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007336:	4b9c      	ldr	r3, [pc, #624]	@ (80075a8 <_printf_float+0x2c8>)
 8007338:	f04f 32ff 	mov.w	r2, #4294967295
 800733c:	f7f9 fc16 	bl	8000b6c <__aeabi_dcmpun>
 8007340:	bb70      	cbnz	r0, 80073a0 <_printf_float+0xc0>
 8007342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007346:	4b98      	ldr	r3, [pc, #608]	@ (80075a8 <_printf_float+0x2c8>)
 8007348:	f04f 32ff 	mov.w	r2, #4294967295
 800734c:	f7f9 fbf0 	bl	8000b30 <__aeabi_dcmple>
 8007350:	bb30      	cbnz	r0, 80073a0 <_printf_float+0xc0>
 8007352:	2200      	movs	r2, #0
 8007354:	2300      	movs	r3, #0
 8007356:	4640      	mov	r0, r8
 8007358:	4649      	mov	r1, r9
 800735a:	f7f9 fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800735e:	b110      	cbz	r0, 8007366 <_printf_float+0x86>
 8007360:	232d      	movs	r3, #45	@ 0x2d
 8007362:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007366:	4a91      	ldr	r2, [pc, #580]	@ (80075ac <_printf_float+0x2cc>)
 8007368:	4b91      	ldr	r3, [pc, #580]	@ (80075b0 <_printf_float+0x2d0>)
 800736a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800736e:	bf94      	ite	ls
 8007370:	4690      	movls	r8, r2
 8007372:	4698      	movhi	r8, r3
 8007374:	2303      	movs	r3, #3
 8007376:	6123      	str	r3, [r4, #16]
 8007378:	f02b 0304 	bic.w	r3, fp, #4
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	f04f 0900 	mov.w	r9, #0
 8007382:	9700      	str	r7, [sp, #0]
 8007384:	4633      	mov	r3, r6
 8007386:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007388:	4621      	mov	r1, r4
 800738a:	4628      	mov	r0, r5
 800738c:	f000 f9d2 	bl	8007734 <_printf_common>
 8007390:	3001      	adds	r0, #1
 8007392:	f040 808d 	bne.w	80074b0 <_printf_float+0x1d0>
 8007396:	f04f 30ff 	mov.w	r0, #4294967295
 800739a:	b00d      	add	sp, #52	@ 0x34
 800739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a0:	4642      	mov	r2, r8
 80073a2:	464b      	mov	r3, r9
 80073a4:	4640      	mov	r0, r8
 80073a6:	4649      	mov	r1, r9
 80073a8:	f7f9 fbe0 	bl	8000b6c <__aeabi_dcmpun>
 80073ac:	b140      	cbz	r0, 80073c0 <_printf_float+0xe0>
 80073ae:	464b      	mov	r3, r9
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bfbc      	itt	lt
 80073b4:	232d      	movlt	r3, #45	@ 0x2d
 80073b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073ba:	4a7e      	ldr	r2, [pc, #504]	@ (80075b4 <_printf_float+0x2d4>)
 80073bc:	4b7e      	ldr	r3, [pc, #504]	@ (80075b8 <_printf_float+0x2d8>)
 80073be:	e7d4      	b.n	800736a <_printf_float+0x8a>
 80073c0:	6863      	ldr	r3, [r4, #4]
 80073c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80073c6:	9206      	str	r2, [sp, #24]
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	d13b      	bne.n	8007444 <_printf_float+0x164>
 80073cc:	2306      	movs	r3, #6
 80073ce:	6063      	str	r3, [r4, #4]
 80073d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80073d4:	2300      	movs	r3, #0
 80073d6:	6022      	str	r2, [r4, #0]
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	ab0a      	add	r3, sp, #40	@ 0x28
 80073dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80073e0:	ab09      	add	r3, sp, #36	@ 0x24
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	6861      	ldr	r1, [r4, #4]
 80073e6:	ec49 8b10 	vmov	d0, r8, r9
 80073ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80073ee:	4628      	mov	r0, r5
 80073f0:	f7ff fed6 	bl	80071a0 <__cvt>
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073f8:	2b47      	cmp	r3, #71	@ 0x47
 80073fa:	4680      	mov	r8, r0
 80073fc:	d129      	bne.n	8007452 <_printf_float+0x172>
 80073fe:	1cc8      	adds	r0, r1, #3
 8007400:	db02      	blt.n	8007408 <_printf_float+0x128>
 8007402:	6863      	ldr	r3, [r4, #4]
 8007404:	4299      	cmp	r1, r3
 8007406:	dd41      	ble.n	800748c <_printf_float+0x1ac>
 8007408:	f1aa 0a02 	sub.w	sl, sl, #2
 800740c:	fa5f fa8a 	uxtb.w	sl, sl
 8007410:	3901      	subs	r1, #1
 8007412:	4652      	mov	r2, sl
 8007414:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007418:	9109      	str	r1, [sp, #36]	@ 0x24
 800741a:	f7ff ff26 	bl	800726a <__exponent>
 800741e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007420:	1813      	adds	r3, r2, r0
 8007422:	2a01      	cmp	r2, #1
 8007424:	4681      	mov	r9, r0
 8007426:	6123      	str	r3, [r4, #16]
 8007428:	dc02      	bgt.n	8007430 <_printf_float+0x150>
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	07d2      	lsls	r2, r2, #31
 800742e:	d501      	bpl.n	8007434 <_printf_float+0x154>
 8007430:	3301      	adds	r3, #1
 8007432:	6123      	str	r3, [r4, #16]
 8007434:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0a2      	beq.n	8007382 <_printf_float+0xa2>
 800743c:	232d      	movs	r3, #45	@ 0x2d
 800743e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007442:	e79e      	b.n	8007382 <_printf_float+0xa2>
 8007444:	9a06      	ldr	r2, [sp, #24]
 8007446:	2a47      	cmp	r2, #71	@ 0x47
 8007448:	d1c2      	bne.n	80073d0 <_printf_float+0xf0>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1c0      	bne.n	80073d0 <_printf_float+0xf0>
 800744e:	2301      	movs	r3, #1
 8007450:	e7bd      	b.n	80073ce <_printf_float+0xee>
 8007452:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007456:	d9db      	bls.n	8007410 <_printf_float+0x130>
 8007458:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800745c:	d118      	bne.n	8007490 <_printf_float+0x1b0>
 800745e:	2900      	cmp	r1, #0
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	dd0b      	ble.n	800747c <_printf_float+0x19c>
 8007464:	6121      	str	r1, [r4, #16]
 8007466:	b913      	cbnz	r3, 800746e <_printf_float+0x18e>
 8007468:	6822      	ldr	r2, [r4, #0]
 800746a:	07d0      	lsls	r0, r2, #31
 800746c:	d502      	bpl.n	8007474 <_printf_float+0x194>
 800746e:	3301      	adds	r3, #1
 8007470:	440b      	add	r3, r1
 8007472:	6123      	str	r3, [r4, #16]
 8007474:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007476:	f04f 0900 	mov.w	r9, #0
 800747a:	e7db      	b.n	8007434 <_printf_float+0x154>
 800747c:	b913      	cbnz	r3, 8007484 <_printf_float+0x1a4>
 800747e:	6822      	ldr	r2, [r4, #0]
 8007480:	07d2      	lsls	r2, r2, #31
 8007482:	d501      	bpl.n	8007488 <_printf_float+0x1a8>
 8007484:	3302      	adds	r3, #2
 8007486:	e7f4      	b.n	8007472 <_printf_float+0x192>
 8007488:	2301      	movs	r3, #1
 800748a:	e7f2      	b.n	8007472 <_printf_float+0x192>
 800748c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007492:	4299      	cmp	r1, r3
 8007494:	db05      	blt.n	80074a2 <_printf_float+0x1c2>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	6121      	str	r1, [r4, #16]
 800749a:	07d8      	lsls	r0, r3, #31
 800749c:	d5ea      	bpl.n	8007474 <_printf_float+0x194>
 800749e:	1c4b      	adds	r3, r1, #1
 80074a0:	e7e7      	b.n	8007472 <_printf_float+0x192>
 80074a2:	2900      	cmp	r1, #0
 80074a4:	bfd4      	ite	le
 80074a6:	f1c1 0202 	rsble	r2, r1, #2
 80074aa:	2201      	movgt	r2, #1
 80074ac:	4413      	add	r3, r2
 80074ae:	e7e0      	b.n	8007472 <_printf_float+0x192>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	055a      	lsls	r2, r3, #21
 80074b4:	d407      	bmi.n	80074c6 <_printf_float+0x1e6>
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	4642      	mov	r2, r8
 80074ba:	4631      	mov	r1, r6
 80074bc:	4628      	mov	r0, r5
 80074be:	47b8      	blx	r7
 80074c0:	3001      	adds	r0, #1
 80074c2:	d12b      	bne.n	800751c <_printf_float+0x23c>
 80074c4:	e767      	b.n	8007396 <_printf_float+0xb6>
 80074c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074ca:	f240 80dd 	bls.w	8007688 <_printf_float+0x3a8>
 80074ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074d2:	2200      	movs	r2, #0
 80074d4:	2300      	movs	r3, #0
 80074d6:	f7f9 fb17 	bl	8000b08 <__aeabi_dcmpeq>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d033      	beq.n	8007546 <_printf_float+0x266>
 80074de:	4a37      	ldr	r2, [pc, #220]	@ (80075bc <_printf_float+0x2dc>)
 80074e0:	2301      	movs	r3, #1
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	f43f af54 	beq.w	8007396 <_printf_float+0xb6>
 80074ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80074f2:	4543      	cmp	r3, r8
 80074f4:	db02      	blt.n	80074fc <_printf_float+0x21c>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	07d8      	lsls	r0, r3, #31
 80074fa:	d50f      	bpl.n	800751c <_printf_float+0x23c>
 80074fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007500:	4631      	mov	r1, r6
 8007502:	4628      	mov	r0, r5
 8007504:	47b8      	blx	r7
 8007506:	3001      	adds	r0, #1
 8007508:	f43f af45 	beq.w	8007396 <_printf_float+0xb6>
 800750c:	f04f 0900 	mov.w	r9, #0
 8007510:	f108 38ff 	add.w	r8, r8, #4294967295
 8007514:	f104 0a1a 	add.w	sl, r4, #26
 8007518:	45c8      	cmp	r8, r9
 800751a:	dc09      	bgt.n	8007530 <_printf_float+0x250>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	079b      	lsls	r3, r3, #30
 8007520:	f100 8103 	bmi.w	800772a <_printf_float+0x44a>
 8007524:	68e0      	ldr	r0, [r4, #12]
 8007526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007528:	4298      	cmp	r0, r3
 800752a:	bfb8      	it	lt
 800752c:	4618      	movlt	r0, r3
 800752e:	e734      	b.n	800739a <_printf_float+0xba>
 8007530:	2301      	movs	r3, #1
 8007532:	4652      	mov	r2, sl
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	47b8      	blx	r7
 800753a:	3001      	adds	r0, #1
 800753c:	f43f af2b 	beq.w	8007396 <_printf_float+0xb6>
 8007540:	f109 0901 	add.w	r9, r9, #1
 8007544:	e7e8      	b.n	8007518 <_printf_float+0x238>
 8007546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007548:	2b00      	cmp	r3, #0
 800754a:	dc39      	bgt.n	80075c0 <_printf_float+0x2e0>
 800754c:	4a1b      	ldr	r2, [pc, #108]	@ (80075bc <_printf_float+0x2dc>)
 800754e:	2301      	movs	r3, #1
 8007550:	4631      	mov	r1, r6
 8007552:	4628      	mov	r0, r5
 8007554:	47b8      	blx	r7
 8007556:	3001      	adds	r0, #1
 8007558:	f43f af1d 	beq.w	8007396 <_printf_float+0xb6>
 800755c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007560:	ea59 0303 	orrs.w	r3, r9, r3
 8007564:	d102      	bne.n	800756c <_printf_float+0x28c>
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	07d9      	lsls	r1, r3, #31
 800756a:	d5d7      	bpl.n	800751c <_printf_float+0x23c>
 800756c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f af0d 	beq.w	8007396 <_printf_float+0xb6>
 800757c:	f04f 0a00 	mov.w	sl, #0
 8007580:	f104 0b1a 	add.w	fp, r4, #26
 8007584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007586:	425b      	negs	r3, r3
 8007588:	4553      	cmp	r3, sl
 800758a:	dc01      	bgt.n	8007590 <_printf_float+0x2b0>
 800758c:	464b      	mov	r3, r9
 800758e:	e793      	b.n	80074b8 <_printf_float+0x1d8>
 8007590:	2301      	movs	r3, #1
 8007592:	465a      	mov	r2, fp
 8007594:	4631      	mov	r1, r6
 8007596:	4628      	mov	r0, r5
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	f43f aefb 	beq.w	8007396 <_printf_float+0xb6>
 80075a0:	f10a 0a01 	add.w	sl, sl, #1
 80075a4:	e7ee      	b.n	8007584 <_printf_float+0x2a4>
 80075a6:	bf00      	nop
 80075a8:	7fefffff 	.word	0x7fefffff
 80075ac:	08009ad0 	.word	0x08009ad0
 80075b0:	08009ad4 	.word	0x08009ad4
 80075b4:	08009ad8 	.word	0x08009ad8
 80075b8:	08009adc 	.word	0x08009adc
 80075bc:	08009ae0 	.word	0x08009ae0
 80075c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80075c6:	4553      	cmp	r3, sl
 80075c8:	bfa8      	it	ge
 80075ca:	4653      	movge	r3, sl
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	4699      	mov	r9, r3
 80075d0:	dc36      	bgt.n	8007640 <_printf_float+0x360>
 80075d2:	f04f 0b00 	mov.w	fp, #0
 80075d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075da:	f104 021a 	add.w	r2, r4, #26
 80075de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075e0:	9306      	str	r3, [sp, #24]
 80075e2:	eba3 0309 	sub.w	r3, r3, r9
 80075e6:	455b      	cmp	r3, fp
 80075e8:	dc31      	bgt.n	800764e <_printf_float+0x36e>
 80075ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ec:	459a      	cmp	sl, r3
 80075ee:	dc3a      	bgt.n	8007666 <_printf_float+0x386>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07da      	lsls	r2, r3, #31
 80075f4:	d437      	bmi.n	8007666 <_printf_float+0x386>
 80075f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f8:	ebaa 0903 	sub.w	r9, sl, r3
 80075fc:	9b06      	ldr	r3, [sp, #24]
 80075fe:	ebaa 0303 	sub.w	r3, sl, r3
 8007602:	4599      	cmp	r9, r3
 8007604:	bfa8      	it	ge
 8007606:	4699      	movge	r9, r3
 8007608:	f1b9 0f00 	cmp.w	r9, #0
 800760c:	dc33      	bgt.n	8007676 <_printf_float+0x396>
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007616:	f104 0b1a 	add.w	fp, r4, #26
 800761a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800761c:	ebaa 0303 	sub.w	r3, sl, r3
 8007620:	eba3 0309 	sub.w	r3, r3, r9
 8007624:	4543      	cmp	r3, r8
 8007626:	f77f af79 	ble.w	800751c <_printf_float+0x23c>
 800762a:	2301      	movs	r3, #1
 800762c:	465a      	mov	r2, fp
 800762e:	4631      	mov	r1, r6
 8007630:	4628      	mov	r0, r5
 8007632:	47b8      	blx	r7
 8007634:	3001      	adds	r0, #1
 8007636:	f43f aeae 	beq.w	8007396 <_printf_float+0xb6>
 800763a:	f108 0801 	add.w	r8, r8, #1
 800763e:	e7ec      	b.n	800761a <_printf_float+0x33a>
 8007640:	4642      	mov	r2, r8
 8007642:	4631      	mov	r1, r6
 8007644:	4628      	mov	r0, r5
 8007646:	47b8      	blx	r7
 8007648:	3001      	adds	r0, #1
 800764a:	d1c2      	bne.n	80075d2 <_printf_float+0x2f2>
 800764c:	e6a3      	b.n	8007396 <_printf_float+0xb6>
 800764e:	2301      	movs	r3, #1
 8007650:	4631      	mov	r1, r6
 8007652:	4628      	mov	r0, r5
 8007654:	9206      	str	r2, [sp, #24]
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f ae9c 	beq.w	8007396 <_printf_float+0xb6>
 800765e:	9a06      	ldr	r2, [sp, #24]
 8007660:	f10b 0b01 	add.w	fp, fp, #1
 8007664:	e7bb      	b.n	80075de <_printf_float+0x2fe>
 8007666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800766a:	4631      	mov	r1, r6
 800766c:	4628      	mov	r0, r5
 800766e:	47b8      	blx	r7
 8007670:	3001      	adds	r0, #1
 8007672:	d1c0      	bne.n	80075f6 <_printf_float+0x316>
 8007674:	e68f      	b.n	8007396 <_printf_float+0xb6>
 8007676:	9a06      	ldr	r2, [sp, #24]
 8007678:	464b      	mov	r3, r9
 800767a:	4442      	add	r2, r8
 800767c:	4631      	mov	r1, r6
 800767e:	4628      	mov	r0, r5
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	d1c3      	bne.n	800760e <_printf_float+0x32e>
 8007686:	e686      	b.n	8007396 <_printf_float+0xb6>
 8007688:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800768c:	f1ba 0f01 	cmp.w	sl, #1
 8007690:	dc01      	bgt.n	8007696 <_printf_float+0x3b6>
 8007692:	07db      	lsls	r3, r3, #31
 8007694:	d536      	bpl.n	8007704 <_printf_float+0x424>
 8007696:	2301      	movs	r3, #1
 8007698:	4642      	mov	r2, r8
 800769a:	4631      	mov	r1, r6
 800769c:	4628      	mov	r0, r5
 800769e:	47b8      	blx	r7
 80076a0:	3001      	adds	r0, #1
 80076a2:	f43f ae78 	beq.w	8007396 <_printf_float+0xb6>
 80076a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7
 80076b0:	3001      	adds	r0, #1
 80076b2:	f43f ae70 	beq.w	8007396 <_printf_float+0xb6>
 80076b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076ba:	2200      	movs	r2, #0
 80076bc:	2300      	movs	r3, #0
 80076be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076c2:	f7f9 fa21 	bl	8000b08 <__aeabi_dcmpeq>
 80076c6:	b9c0      	cbnz	r0, 80076fa <_printf_float+0x41a>
 80076c8:	4653      	mov	r3, sl
 80076ca:	f108 0201 	add.w	r2, r8, #1
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	d10c      	bne.n	80076f2 <_printf_float+0x412>
 80076d8:	e65d      	b.n	8007396 <_printf_float+0xb6>
 80076da:	2301      	movs	r3, #1
 80076dc:	465a      	mov	r2, fp
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	f43f ae56 	beq.w	8007396 <_printf_float+0xb6>
 80076ea:	f108 0801 	add.w	r8, r8, #1
 80076ee:	45d0      	cmp	r8, sl
 80076f0:	dbf3      	blt.n	80076da <_printf_float+0x3fa>
 80076f2:	464b      	mov	r3, r9
 80076f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80076f8:	e6df      	b.n	80074ba <_printf_float+0x1da>
 80076fa:	f04f 0800 	mov.w	r8, #0
 80076fe:	f104 0b1a 	add.w	fp, r4, #26
 8007702:	e7f4      	b.n	80076ee <_printf_float+0x40e>
 8007704:	2301      	movs	r3, #1
 8007706:	4642      	mov	r2, r8
 8007708:	e7e1      	b.n	80076ce <_printf_float+0x3ee>
 800770a:	2301      	movs	r3, #1
 800770c:	464a      	mov	r2, r9
 800770e:	4631      	mov	r1, r6
 8007710:	4628      	mov	r0, r5
 8007712:	47b8      	blx	r7
 8007714:	3001      	adds	r0, #1
 8007716:	f43f ae3e 	beq.w	8007396 <_printf_float+0xb6>
 800771a:	f108 0801 	add.w	r8, r8, #1
 800771e:	68e3      	ldr	r3, [r4, #12]
 8007720:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007722:	1a5b      	subs	r3, r3, r1
 8007724:	4543      	cmp	r3, r8
 8007726:	dcf0      	bgt.n	800770a <_printf_float+0x42a>
 8007728:	e6fc      	b.n	8007524 <_printf_float+0x244>
 800772a:	f04f 0800 	mov.w	r8, #0
 800772e:	f104 0919 	add.w	r9, r4, #25
 8007732:	e7f4      	b.n	800771e <_printf_float+0x43e>

08007734 <_printf_common>:
 8007734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007738:	4616      	mov	r6, r2
 800773a:	4698      	mov	r8, r3
 800773c:	688a      	ldr	r2, [r1, #8]
 800773e:	690b      	ldr	r3, [r1, #16]
 8007740:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007744:	4293      	cmp	r3, r2
 8007746:	bfb8      	it	lt
 8007748:	4613      	movlt	r3, r2
 800774a:	6033      	str	r3, [r6, #0]
 800774c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007750:	4607      	mov	r7, r0
 8007752:	460c      	mov	r4, r1
 8007754:	b10a      	cbz	r2, 800775a <_printf_common+0x26>
 8007756:	3301      	adds	r3, #1
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	0699      	lsls	r1, r3, #26
 800775e:	bf42      	ittt	mi
 8007760:	6833      	ldrmi	r3, [r6, #0]
 8007762:	3302      	addmi	r3, #2
 8007764:	6033      	strmi	r3, [r6, #0]
 8007766:	6825      	ldr	r5, [r4, #0]
 8007768:	f015 0506 	ands.w	r5, r5, #6
 800776c:	d106      	bne.n	800777c <_printf_common+0x48>
 800776e:	f104 0a19 	add.w	sl, r4, #25
 8007772:	68e3      	ldr	r3, [r4, #12]
 8007774:	6832      	ldr	r2, [r6, #0]
 8007776:	1a9b      	subs	r3, r3, r2
 8007778:	42ab      	cmp	r3, r5
 800777a:	dc26      	bgt.n	80077ca <_printf_common+0x96>
 800777c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	3b00      	subs	r3, #0
 8007784:	bf18      	it	ne
 8007786:	2301      	movne	r3, #1
 8007788:	0692      	lsls	r2, r2, #26
 800778a:	d42b      	bmi.n	80077e4 <_printf_common+0xb0>
 800778c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007790:	4641      	mov	r1, r8
 8007792:	4638      	mov	r0, r7
 8007794:	47c8      	blx	r9
 8007796:	3001      	adds	r0, #1
 8007798:	d01e      	beq.n	80077d8 <_printf_common+0xa4>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	6922      	ldr	r2, [r4, #16]
 800779e:	f003 0306 	and.w	r3, r3, #6
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	bf02      	ittt	eq
 80077a6:	68e5      	ldreq	r5, [r4, #12]
 80077a8:	6833      	ldreq	r3, [r6, #0]
 80077aa:	1aed      	subeq	r5, r5, r3
 80077ac:	68a3      	ldr	r3, [r4, #8]
 80077ae:	bf0c      	ite	eq
 80077b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b4:	2500      	movne	r5, #0
 80077b6:	4293      	cmp	r3, r2
 80077b8:	bfc4      	itt	gt
 80077ba:	1a9b      	subgt	r3, r3, r2
 80077bc:	18ed      	addgt	r5, r5, r3
 80077be:	2600      	movs	r6, #0
 80077c0:	341a      	adds	r4, #26
 80077c2:	42b5      	cmp	r5, r6
 80077c4:	d11a      	bne.n	80077fc <_printf_common+0xc8>
 80077c6:	2000      	movs	r0, #0
 80077c8:	e008      	b.n	80077dc <_printf_common+0xa8>
 80077ca:	2301      	movs	r3, #1
 80077cc:	4652      	mov	r2, sl
 80077ce:	4641      	mov	r1, r8
 80077d0:	4638      	mov	r0, r7
 80077d2:	47c8      	blx	r9
 80077d4:	3001      	adds	r0, #1
 80077d6:	d103      	bne.n	80077e0 <_printf_common+0xac>
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e0:	3501      	adds	r5, #1
 80077e2:	e7c6      	b.n	8007772 <_printf_common+0x3e>
 80077e4:	18e1      	adds	r1, r4, r3
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	2030      	movs	r0, #48	@ 0x30
 80077ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077ee:	4422      	add	r2, r4
 80077f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077f8:	3302      	adds	r3, #2
 80077fa:	e7c7      	b.n	800778c <_printf_common+0x58>
 80077fc:	2301      	movs	r3, #1
 80077fe:	4622      	mov	r2, r4
 8007800:	4641      	mov	r1, r8
 8007802:	4638      	mov	r0, r7
 8007804:	47c8      	blx	r9
 8007806:	3001      	adds	r0, #1
 8007808:	d0e6      	beq.n	80077d8 <_printf_common+0xa4>
 800780a:	3601      	adds	r6, #1
 800780c:	e7d9      	b.n	80077c2 <_printf_common+0x8e>
	...

08007810 <_printf_i>:
 8007810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007814:	7e0f      	ldrb	r7, [r1, #24]
 8007816:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007818:	2f78      	cmp	r7, #120	@ 0x78
 800781a:	4691      	mov	r9, r2
 800781c:	4680      	mov	r8, r0
 800781e:	460c      	mov	r4, r1
 8007820:	469a      	mov	sl, r3
 8007822:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007826:	d807      	bhi.n	8007838 <_printf_i+0x28>
 8007828:	2f62      	cmp	r7, #98	@ 0x62
 800782a:	d80a      	bhi.n	8007842 <_printf_i+0x32>
 800782c:	2f00      	cmp	r7, #0
 800782e:	f000 80d2 	beq.w	80079d6 <_printf_i+0x1c6>
 8007832:	2f58      	cmp	r7, #88	@ 0x58
 8007834:	f000 80b9 	beq.w	80079aa <_printf_i+0x19a>
 8007838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800783c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007840:	e03a      	b.n	80078b8 <_printf_i+0xa8>
 8007842:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007846:	2b15      	cmp	r3, #21
 8007848:	d8f6      	bhi.n	8007838 <_printf_i+0x28>
 800784a:	a101      	add	r1, pc, #4	@ (adr r1, 8007850 <_printf_i+0x40>)
 800784c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007850:	080078a9 	.word	0x080078a9
 8007854:	080078bd 	.word	0x080078bd
 8007858:	08007839 	.word	0x08007839
 800785c:	08007839 	.word	0x08007839
 8007860:	08007839 	.word	0x08007839
 8007864:	08007839 	.word	0x08007839
 8007868:	080078bd 	.word	0x080078bd
 800786c:	08007839 	.word	0x08007839
 8007870:	08007839 	.word	0x08007839
 8007874:	08007839 	.word	0x08007839
 8007878:	08007839 	.word	0x08007839
 800787c:	080079bd 	.word	0x080079bd
 8007880:	080078e7 	.word	0x080078e7
 8007884:	08007977 	.word	0x08007977
 8007888:	08007839 	.word	0x08007839
 800788c:	08007839 	.word	0x08007839
 8007890:	080079df 	.word	0x080079df
 8007894:	08007839 	.word	0x08007839
 8007898:	080078e7 	.word	0x080078e7
 800789c:	08007839 	.word	0x08007839
 80078a0:	08007839 	.word	0x08007839
 80078a4:	0800797f 	.word	0x0800797f
 80078a8:	6833      	ldr	r3, [r6, #0]
 80078aa:	1d1a      	adds	r2, r3, #4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6032      	str	r2, [r6, #0]
 80078b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078b8:	2301      	movs	r3, #1
 80078ba:	e09d      	b.n	80079f8 <_printf_i+0x1e8>
 80078bc:	6833      	ldr	r3, [r6, #0]
 80078be:	6820      	ldr	r0, [r4, #0]
 80078c0:	1d19      	adds	r1, r3, #4
 80078c2:	6031      	str	r1, [r6, #0]
 80078c4:	0606      	lsls	r6, r0, #24
 80078c6:	d501      	bpl.n	80078cc <_printf_i+0xbc>
 80078c8:	681d      	ldr	r5, [r3, #0]
 80078ca:	e003      	b.n	80078d4 <_printf_i+0xc4>
 80078cc:	0645      	lsls	r5, r0, #25
 80078ce:	d5fb      	bpl.n	80078c8 <_printf_i+0xb8>
 80078d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	da03      	bge.n	80078e0 <_printf_i+0xd0>
 80078d8:	232d      	movs	r3, #45	@ 0x2d
 80078da:	426d      	negs	r5, r5
 80078dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e0:	4859      	ldr	r0, [pc, #356]	@ (8007a48 <_printf_i+0x238>)
 80078e2:	230a      	movs	r3, #10
 80078e4:	e011      	b.n	800790a <_printf_i+0xfa>
 80078e6:	6821      	ldr	r1, [r4, #0]
 80078e8:	6833      	ldr	r3, [r6, #0]
 80078ea:	0608      	lsls	r0, r1, #24
 80078ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80078f0:	d402      	bmi.n	80078f8 <_printf_i+0xe8>
 80078f2:	0649      	lsls	r1, r1, #25
 80078f4:	bf48      	it	mi
 80078f6:	b2ad      	uxthmi	r5, r5
 80078f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80078fa:	4853      	ldr	r0, [pc, #332]	@ (8007a48 <_printf_i+0x238>)
 80078fc:	6033      	str	r3, [r6, #0]
 80078fe:	bf14      	ite	ne
 8007900:	230a      	movne	r3, #10
 8007902:	2308      	moveq	r3, #8
 8007904:	2100      	movs	r1, #0
 8007906:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800790a:	6866      	ldr	r6, [r4, #4]
 800790c:	60a6      	str	r6, [r4, #8]
 800790e:	2e00      	cmp	r6, #0
 8007910:	bfa2      	ittt	ge
 8007912:	6821      	ldrge	r1, [r4, #0]
 8007914:	f021 0104 	bicge.w	r1, r1, #4
 8007918:	6021      	strge	r1, [r4, #0]
 800791a:	b90d      	cbnz	r5, 8007920 <_printf_i+0x110>
 800791c:	2e00      	cmp	r6, #0
 800791e:	d04b      	beq.n	80079b8 <_printf_i+0x1a8>
 8007920:	4616      	mov	r6, r2
 8007922:	fbb5 f1f3 	udiv	r1, r5, r3
 8007926:	fb03 5711 	mls	r7, r3, r1, r5
 800792a:	5dc7      	ldrb	r7, [r0, r7]
 800792c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007930:	462f      	mov	r7, r5
 8007932:	42bb      	cmp	r3, r7
 8007934:	460d      	mov	r5, r1
 8007936:	d9f4      	bls.n	8007922 <_printf_i+0x112>
 8007938:	2b08      	cmp	r3, #8
 800793a:	d10b      	bne.n	8007954 <_printf_i+0x144>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	07df      	lsls	r7, r3, #31
 8007940:	d508      	bpl.n	8007954 <_printf_i+0x144>
 8007942:	6923      	ldr	r3, [r4, #16]
 8007944:	6861      	ldr	r1, [r4, #4]
 8007946:	4299      	cmp	r1, r3
 8007948:	bfde      	ittt	le
 800794a:	2330      	movle	r3, #48	@ 0x30
 800794c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007950:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007954:	1b92      	subs	r2, r2, r6
 8007956:	6122      	str	r2, [r4, #16]
 8007958:	f8cd a000 	str.w	sl, [sp]
 800795c:	464b      	mov	r3, r9
 800795e:	aa03      	add	r2, sp, #12
 8007960:	4621      	mov	r1, r4
 8007962:	4640      	mov	r0, r8
 8007964:	f7ff fee6 	bl	8007734 <_printf_common>
 8007968:	3001      	adds	r0, #1
 800796a:	d14a      	bne.n	8007a02 <_printf_i+0x1f2>
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	b004      	add	sp, #16
 8007972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	f043 0320 	orr.w	r3, r3, #32
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	4833      	ldr	r0, [pc, #204]	@ (8007a4c <_printf_i+0x23c>)
 8007980:	2778      	movs	r7, #120	@ 0x78
 8007982:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	6831      	ldr	r1, [r6, #0]
 800798a:	061f      	lsls	r7, r3, #24
 800798c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007990:	d402      	bmi.n	8007998 <_printf_i+0x188>
 8007992:	065f      	lsls	r7, r3, #25
 8007994:	bf48      	it	mi
 8007996:	b2ad      	uxthmi	r5, r5
 8007998:	6031      	str	r1, [r6, #0]
 800799a:	07d9      	lsls	r1, r3, #31
 800799c:	bf44      	itt	mi
 800799e:	f043 0320 	orrmi.w	r3, r3, #32
 80079a2:	6023      	strmi	r3, [r4, #0]
 80079a4:	b11d      	cbz	r5, 80079ae <_printf_i+0x19e>
 80079a6:	2310      	movs	r3, #16
 80079a8:	e7ac      	b.n	8007904 <_printf_i+0xf4>
 80079aa:	4827      	ldr	r0, [pc, #156]	@ (8007a48 <_printf_i+0x238>)
 80079ac:	e7e9      	b.n	8007982 <_printf_i+0x172>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	f023 0320 	bic.w	r3, r3, #32
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	e7f6      	b.n	80079a6 <_printf_i+0x196>
 80079b8:	4616      	mov	r6, r2
 80079ba:	e7bd      	b.n	8007938 <_printf_i+0x128>
 80079bc:	6833      	ldr	r3, [r6, #0]
 80079be:	6825      	ldr	r5, [r4, #0]
 80079c0:	6961      	ldr	r1, [r4, #20]
 80079c2:	1d18      	adds	r0, r3, #4
 80079c4:	6030      	str	r0, [r6, #0]
 80079c6:	062e      	lsls	r6, r5, #24
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	d501      	bpl.n	80079d0 <_printf_i+0x1c0>
 80079cc:	6019      	str	r1, [r3, #0]
 80079ce:	e002      	b.n	80079d6 <_printf_i+0x1c6>
 80079d0:	0668      	lsls	r0, r5, #25
 80079d2:	d5fb      	bpl.n	80079cc <_printf_i+0x1bc>
 80079d4:	8019      	strh	r1, [r3, #0]
 80079d6:	2300      	movs	r3, #0
 80079d8:	6123      	str	r3, [r4, #16]
 80079da:	4616      	mov	r6, r2
 80079dc:	e7bc      	b.n	8007958 <_printf_i+0x148>
 80079de:	6833      	ldr	r3, [r6, #0]
 80079e0:	1d1a      	adds	r2, r3, #4
 80079e2:	6032      	str	r2, [r6, #0]
 80079e4:	681e      	ldr	r6, [r3, #0]
 80079e6:	6862      	ldr	r2, [r4, #4]
 80079e8:	2100      	movs	r1, #0
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7f8 fc10 	bl	8000210 <memchr>
 80079f0:	b108      	cbz	r0, 80079f6 <_printf_i+0x1e6>
 80079f2:	1b80      	subs	r0, r0, r6
 80079f4:	6060      	str	r0, [r4, #4]
 80079f6:	6863      	ldr	r3, [r4, #4]
 80079f8:	6123      	str	r3, [r4, #16]
 80079fa:	2300      	movs	r3, #0
 80079fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a00:	e7aa      	b.n	8007958 <_printf_i+0x148>
 8007a02:	6923      	ldr	r3, [r4, #16]
 8007a04:	4632      	mov	r2, r6
 8007a06:	4649      	mov	r1, r9
 8007a08:	4640      	mov	r0, r8
 8007a0a:	47d0      	blx	sl
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d0ad      	beq.n	800796c <_printf_i+0x15c>
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	079b      	lsls	r3, r3, #30
 8007a14:	d413      	bmi.n	8007a3e <_printf_i+0x22e>
 8007a16:	68e0      	ldr	r0, [r4, #12]
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	4298      	cmp	r0, r3
 8007a1c:	bfb8      	it	lt
 8007a1e:	4618      	movlt	r0, r3
 8007a20:	e7a6      	b.n	8007970 <_printf_i+0x160>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4632      	mov	r2, r6
 8007a26:	4649      	mov	r1, r9
 8007a28:	4640      	mov	r0, r8
 8007a2a:	47d0      	blx	sl
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d09d      	beq.n	800796c <_printf_i+0x15c>
 8007a30:	3501      	adds	r5, #1
 8007a32:	68e3      	ldr	r3, [r4, #12]
 8007a34:	9903      	ldr	r1, [sp, #12]
 8007a36:	1a5b      	subs	r3, r3, r1
 8007a38:	42ab      	cmp	r3, r5
 8007a3a:	dcf2      	bgt.n	8007a22 <_printf_i+0x212>
 8007a3c:	e7eb      	b.n	8007a16 <_printf_i+0x206>
 8007a3e:	2500      	movs	r5, #0
 8007a40:	f104 0619 	add.w	r6, r4, #25
 8007a44:	e7f5      	b.n	8007a32 <_printf_i+0x222>
 8007a46:	bf00      	nop
 8007a48:	08009ae2 	.word	0x08009ae2
 8007a4c:	08009af3 	.word	0x08009af3

08007a50 <std>:
 8007a50:	2300      	movs	r3, #0
 8007a52:	b510      	push	{r4, lr}
 8007a54:	4604      	mov	r4, r0
 8007a56:	e9c0 3300 	strd	r3, r3, [r0]
 8007a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a5e:	6083      	str	r3, [r0, #8]
 8007a60:	8181      	strh	r1, [r0, #12]
 8007a62:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a64:	81c2      	strh	r2, [r0, #14]
 8007a66:	6183      	str	r3, [r0, #24]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	2208      	movs	r2, #8
 8007a6c:	305c      	adds	r0, #92	@ 0x5c
 8007a6e:	f000 f8f4 	bl	8007c5a <memset>
 8007a72:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <std+0x58>)
 8007a74:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a76:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <std+0x5c>)
 8007a78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <std+0x60>)
 8007a7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <std+0x64>)
 8007a80:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a82:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab8 <std+0x68>)
 8007a84:	6224      	str	r4, [r4, #32]
 8007a86:	429c      	cmp	r4, r3
 8007a88:	d006      	beq.n	8007a98 <std+0x48>
 8007a8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a8e:	4294      	cmp	r4, r2
 8007a90:	d002      	beq.n	8007a98 <std+0x48>
 8007a92:	33d0      	adds	r3, #208	@ 0xd0
 8007a94:	429c      	cmp	r4, r3
 8007a96:	d105      	bne.n	8007aa4 <std+0x54>
 8007a98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa0:	f000 b958 	b.w	8007d54 <__retarget_lock_init_recursive>
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	bf00      	nop
 8007aa8:	08007bd5 	.word	0x08007bd5
 8007aac:	08007bf7 	.word	0x08007bf7
 8007ab0:	08007c2f 	.word	0x08007c2f
 8007ab4:	08007c53 	.word	0x08007c53
 8007ab8:	20000668 	.word	0x20000668

08007abc <stdio_exit_handler>:
 8007abc:	4a02      	ldr	r2, [pc, #8]	@ (8007ac8 <stdio_exit_handler+0xc>)
 8007abe:	4903      	ldr	r1, [pc, #12]	@ (8007acc <stdio_exit_handler+0x10>)
 8007ac0:	4803      	ldr	r0, [pc, #12]	@ (8007ad0 <stdio_exit_handler+0x14>)
 8007ac2:	f000 b869 	b.w	8007b98 <_fwalk_sglue>
 8007ac6:	bf00      	nop
 8007ac8:	200001a4 	.word	0x200001a4
 8007acc:	08009405 	.word	0x08009405
 8007ad0:	200001b4 	.word	0x200001b4

08007ad4 <cleanup_stdio>:
 8007ad4:	6841      	ldr	r1, [r0, #4]
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8007b08 <cleanup_stdio+0x34>)
 8007ad8:	4299      	cmp	r1, r3
 8007ada:	b510      	push	{r4, lr}
 8007adc:	4604      	mov	r4, r0
 8007ade:	d001      	beq.n	8007ae4 <cleanup_stdio+0x10>
 8007ae0:	f001 fc90 	bl	8009404 <_fflush_r>
 8007ae4:	68a1      	ldr	r1, [r4, #8]
 8007ae6:	4b09      	ldr	r3, [pc, #36]	@ (8007b0c <cleanup_stdio+0x38>)
 8007ae8:	4299      	cmp	r1, r3
 8007aea:	d002      	beq.n	8007af2 <cleanup_stdio+0x1e>
 8007aec:	4620      	mov	r0, r4
 8007aee:	f001 fc89 	bl	8009404 <_fflush_r>
 8007af2:	68e1      	ldr	r1, [r4, #12]
 8007af4:	4b06      	ldr	r3, [pc, #24]	@ (8007b10 <cleanup_stdio+0x3c>)
 8007af6:	4299      	cmp	r1, r3
 8007af8:	d004      	beq.n	8007b04 <cleanup_stdio+0x30>
 8007afa:	4620      	mov	r0, r4
 8007afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b00:	f001 bc80 	b.w	8009404 <_fflush_r>
 8007b04:	bd10      	pop	{r4, pc}
 8007b06:	bf00      	nop
 8007b08:	20000668 	.word	0x20000668
 8007b0c:	200006d0 	.word	0x200006d0
 8007b10:	20000738 	.word	0x20000738

08007b14 <global_stdio_init.part.0>:
 8007b14:	b510      	push	{r4, lr}
 8007b16:	4b0b      	ldr	r3, [pc, #44]	@ (8007b44 <global_stdio_init.part.0+0x30>)
 8007b18:	4c0b      	ldr	r4, [pc, #44]	@ (8007b48 <global_stdio_init.part.0+0x34>)
 8007b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007b4c <global_stdio_init.part.0+0x38>)
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	4620      	mov	r0, r4
 8007b20:	2200      	movs	r2, #0
 8007b22:	2104      	movs	r1, #4
 8007b24:	f7ff ff94 	bl	8007a50 <std>
 8007b28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	2109      	movs	r1, #9
 8007b30:	f7ff ff8e 	bl	8007a50 <std>
 8007b34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b38:	2202      	movs	r2, #2
 8007b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b3e:	2112      	movs	r1, #18
 8007b40:	f7ff bf86 	b.w	8007a50 <std>
 8007b44:	200007a0 	.word	0x200007a0
 8007b48:	20000668 	.word	0x20000668
 8007b4c:	08007abd 	.word	0x08007abd

08007b50 <__sfp_lock_acquire>:
 8007b50:	4801      	ldr	r0, [pc, #4]	@ (8007b58 <__sfp_lock_acquire+0x8>)
 8007b52:	f000 b900 	b.w	8007d56 <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	200007a9 	.word	0x200007a9

08007b5c <__sfp_lock_release>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	@ (8007b64 <__sfp_lock_release+0x8>)
 8007b5e:	f000 b8fb 	b.w	8007d58 <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	200007a9 	.word	0x200007a9

08007b68 <__sinit>:
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	f7ff fff0 	bl	8007b50 <__sfp_lock_acquire>
 8007b70:	6a23      	ldr	r3, [r4, #32]
 8007b72:	b11b      	cbz	r3, 8007b7c <__sinit+0x14>
 8007b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b78:	f7ff bff0 	b.w	8007b5c <__sfp_lock_release>
 8007b7c:	4b04      	ldr	r3, [pc, #16]	@ (8007b90 <__sinit+0x28>)
 8007b7e:	6223      	str	r3, [r4, #32]
 8007b80:	4b04      	ldr	r3, [pc, #16]	@ (8007b94 <__sinit+0x2c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1f5      	bne.n	8007b74 <__sinit+0xc>
 8007b88:	f7ff ffc4 	bl	8007b14 <global_stdio_init.part.0>
 8007b8c:	e7f2      	b.n	8007b74 <__sinit+0xc>
 8007b8e:	bf00      	nop
 8007b90:	08007ad5 	.word	0x08007ad5
 8007b94:	200007a0 	.word	0x200007a0

08007b98 <_fwalk_sglue>:
 8007b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	4688      	mov	r8, r1
 8007ba0:	4614      	mov	r4, r2
 8007ba2:	2600      	movs	r6, #0
 8007ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8007bac:	d505      	bpl.n	8007bba <_fwalk_sglue+0x22>
 8007bae:	6824      	ldr	r4, [r4, #0]
 8007bb0:	2c00      	cmp	r4, #0
 8007bb2:	d1f7      	bne.n	8007ba4 <_fwalk_sglue+0xc>
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bba:	89ab      	ldrh	r3, [r5, #12]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d907      	bls.n	8007bd0 <_fwalk_sglue+0x38>
 8007bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	d003      	beq.n	8007bd0 <_fwalk_sglue+0x38>
 8007bc8:	4629      	mov	r1, r5
 8007bca:	4638      	mov	r0, r7
 8007bcc:	47c0      	blx	r8
 8007bce:	4306      	orrs	r6, r0
 8007bd0:	3568      	adds	r5, #104	@ 0x68
 8007bd2:	e7e9      	b.n	8007ba8 <_fwalk_sglue+0x10>

08007bd4 <__sread>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bdc:	f000 f86c 	bl	8007cb8 <_read_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	bfab      	itete	ge
 8007be4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007be6:	89a3      	ldrhlt	r3, [r4, #12]
 8007be8:	181b      	addge	r3, r3, r0
 8007bea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bee:	bfac      	ite	ge
 8007bf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bf2:	81a3      	strhlt	r3, [r4, #12]
 8007bf4:	bd10      	pop	{r4, pc}

08007bf6 <__swrite>:
 8007bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfa:	461f      	mov	r7, r3
 8007bfc:	898b      	ldrh	r3, [r1, #12]
 8007bfe:	05db      	lsls	r3, r3, #23
 8007c00:	4605      	mov	r5, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	4616      	mov	r6, r2
 8007c06:	d505      	bpl.n	8007c14 <__swrite+0x1e>
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f000 f840 	bl	8007c94 <_lseek_r>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	4632      	mov	r2, r6
 8007c22:	463b      	mov	r3, r7
 8007c24:	4628      	mov	r0, r5
 8007c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2a:	f000 b857 	b.w	8007cdc <_write_r>

08007c2e <__sseek>:
 8007c2e:	b510      	push	{r4, lr}
 8007c30:	460c      	mov	r4, r1
 8007c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c36:	f000 f82d 	bl	8007c94 <_lseek_r>
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	bf15      	itete	ne
 8007c40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c4a:	81a3      	strheq	r3, [r4, #12]
 8007c4c:	bf18      	it	ne
 8007c4e:	81a3      	strhne	r3, [r4, #12]
 8007c50:	bd10      	pop	{r4, pc}

08007c52 <__sclose>:
 8007c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c56:	f000 b80d 	b.w	8007c74 <_close_r>

08007c5a <memset>:
 8007c5a:	4402      	add	r2, r0
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d100      	bne.n	8007c64 <memset+0xa>
 8007c62:	4770      	bx	lr
 8007c64:	f803 1b01 	strb.w	r1, [r3], #1
 8007c68:	e7f9      	b.n	8007c5e <memset+0x4>
	...

08007c6c <_localeconv_r>:
 8007c6c:	4800      	ldr	r0, [pc, #0]	@ (8007c70 <_localeconv_r+0x4>)
 8007c6e:	4770      	bx	lr
 8007c70:	200002f0 	.word	0x200002f0

08007c74 <_close_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d06      	ldr	r5, [pc, #24]	@ (8007c90 <_close_r+0x1c>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	602b      	str	r3, [r5, #0]
 8007c80:	f7fa fc6e 	bl	8002560 <_close>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_close_r+0x1a>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_close_r+0x1a>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	200007a4 	.word	0x200007a4

08007c94 <_lseek_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d07      	ldr	r5, [pc, #28]	@ (8007cb4 <_lseek_r+0x20>)
 8007c98:	4604      	mov	r4, r0
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	602a      	str	r2, [r5, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f7fa fc83 	bl	80025ae <_lseek>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_lseek_r+0x1e>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_lseek_r+0x1e>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	200007a4 	.word	0x200007a4

08007cb8 <_read_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4d07      	ldr	r5, [pc, #28]	@ (8007cd8 <_read_r+0x20>)
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	4608      	mov	r0, r1
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	602a      	str	r2, [r5, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f7fa fc2d 	bl	8002526 <_read>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_read_r+0x1e>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_read_r+0x1e>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	200007a4 	.word	0x200007a4

08007cdc <_write_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4d07      	ldr	r5, [pc, #28]	@ (8007cfc <_write_r+0x20>)
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	4608      	mov	r0, r1
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	602a      	str	r2, [r5, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f7fa f97a 	bl	8001fe4 <_write>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_write_r+0x1e>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_write_r+0x1e>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	200007a4 	.word	0x200007a4

08007d00 <__errno>:
 8007d00:	4b01      	ldr	r3, [pc, #4]	@ (8007d08 <__errno+0x8>)
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	200001b0 	.word	0x200001b0

08007d0c <__libc_init_array>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007d44 <__libc_init_array+0x38>)
 8007d10:	4c0d      	ldr	r4, [pc, #52]	@ (8007d48 <__libc_init_array+0x3c>)
 8007d12:	1b64      	subs	r4, r4, r5
 8007d14:	10a4      	asrs	r4, r4, #2
 8007d16:	2600      	movs	r6, #0
 8007d18:	42a6      	cmp	r6, r4
 8007d1a:	d109      	bne.n	8007d30 <__libc_init_array+0x24>
 8007d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007d4c <__libc_init_array+0x40>)
 8007d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007d50 <__libc_init_array+0x44>)
 8007d20:	f001 febe 	bl	8009aa0 <_init>
 8007d24:	1b64      	subs	r4, r4, r5
 8007d26:	10a4      	asrs	r4, r4, #2
 8007d28:	2600      	movs	r6, #0
 8007d2a:	42a6      	cmp	r6, r4
 8007d2c:	d105      	bne.n	8007d3a <__libc_init_array+0x2e>
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d34:	4798      	blx	r3
 8007d36:	3601      	adds	r6, #1
 8007d38:	e7ee      	b.n	8007d18 <__libc_init_array+0xc>
 8007d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3e:	4798      	blx	r3
 8007d40:	3601      	adds	r6, #1
 8007d42:	e7f2      	b.n	8007d2a <__libc_init_array+0x1e>
 8007d44:	08009e48 	.word	0x08009e48
 8007d48:	08009e48 	.word	0x08009e48
 8007d4c:	08009e48 	.word	0x08009e48
 8007d50:	08009e4c 	.word	0x08009e4c

08007d54 <__retarget_lock_init_recursive>:
 8007d54:	4770      	bx	lr

08007d56 <__retarget_lock_acquire_recursive>:
 8007d56:	4770      	bx	lr

08007d58 <__retarget_lock_release_recursive>:
 8007d58:	4770      	bx	lr

08007d5a <quorem>:
 8007d5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5e:	6903      	ldr	r3, [r0, #16]
 8007d60:	690c      	ldr	r4, [r1, #16]
 8007d62:	42a3      	cmp	r3, r4
 8007d64:	4607      	mov	r7, r0
 8007d66:	db7e      	blt.n	8007e66 <quorem+0x10c>
 8007d68:	3c01      	subs	r4, #1
 8007d6a:	f101 0814 	add.w	r8, r1, #20
 8007d6e:	00a3      	lsls	r3, r4, #2
 8007d70:	f100 0514 	add.w	r5, r0, #20
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d84:	3301      	adds	r3, #1
 8007d86:	429a      	cmp	r2, r3
 8007d88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d90:	d32e      	bcc.n	8007df0 <quorem+0x96>
 8007d92:	f04f 0a00 	mov.w	sl, #0
 8007d96:	46c4      	mov	ip, r8
 8007d98:	46ae      	mov	lr, r5
 8007d9a:	46d3      	mov	fp, sl
 8007d9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007da0:	b298      	uxth	r0, r3
 8007da2:	fb06 a000 	mla	r0, r6, r0, sl
 8007da6:	0c02      	lsrs	r2, r0, #16
 8007da8:	0c1b      	lsrs	r3, r3, #16
 8007daa:	fb06 2303 	mla	r3, r6, r3, r2
 8007dae:	f8de 2000 	ldr.w	r2, [lr]
 8007db2:	b280      	uxth	r0, r0
 8007db4:	b292      	uxth	r2, r2
 8007db6:	1a12      	subs	r2, r2, r0
 8007db8:	445a      	add	r2, fp
 8007dba:	f8de 0000 	ldr.w	r0, [lr]
 8007dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007dc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007dd2:	45e1      	cmp	r9, ip
 8007dd4:	f84e 2b04 	str.w	r2, [lr], #4
 8007dd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ddc:	d2de      	bcs.n	8007d9c <quorem+0x42>
 8007dde:	9b00      	ldr	r3, [sp, #0]
 8007de0:	58eb      	ldr	r3, [r5, r3]
 8007de2:	b92b      	cbnz	r3, 8007df0 <quorem+0x96>
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	3b04      	subs	r3, #4
 8007de8:	429d      	cmp	r5, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	d32f      	bcc.n	8007e4e <quorem+0xf4>
 8007dee:	613c      	str	r4, [r7, #16]
 8007df0:	4638      	mov	r0, r7
 8007df2:	f001 f97b 	bl	80090ec <__mcmp>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	db25      	blt.n	8007e46 <quorem+0xec>
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e02:	f8d1 c000 	ldr.w	ip, [r1]
 8007e06:	fa1f fe82 	uxth.w	lr, r2
 8007e0a:	fa1f f38c 	uxth.w	r3, ip
 8007e0e:	eba3 030e 	sub.w	r3, r3, lr
 8007e12:	4403      	add	r3, r0
 8007e14:	0c12      	lsrs	r2, r2, #16
 8007e16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e24:	45c1      	cmp	r9, r8
 8007e26:	f841 3b04 	str.w	r3, [r1], #4
 8007e2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e2e:	d2e6      	bcs.n	8007dfe <quorem+0xa4>
 8007e30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e38:	b922      	cbnz	r2, 8007e44 <quorem+0xea>
 8007e3a:	3b04      	subs	r3, #4
 8007e3c:	429d      	cmp	r5, r3
 8007e3e:	461a      	mov	r2, r3
 8007e40:	d30b      	bcc.n	8007e5a <quorem+0x100>
 8007e42:	613c      	str	r4, [r7, #16]
 8007e44:	3601      	adds	r6, #1
 8007e46:	4630      	mov	r0, r6
 8007e48:	b003      	add	sp, #12
 8007e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	3b04      	subs	r3, #4
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	d1cb      	bne.n	8007dee <quorem+0x94>
 8007e56:	3c01      	subs	r4, #1
 8007e58:	e7c6      	b.n	8007de8 <quorem+0x8e>
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	d1ef      	bne.n	8007e42 <quorem+0xe8>
 8007e62:	3c01      	subs	r4, #1
 8007e64:	e7ea      	b.n	8007e3c <quorem+0xe2>
 8007e66:	2000      	movs	r0, #0
 8007e68:	e7ee      	b.n	8007e48 <quorem+0xee>
 8007e6a:	0000      	movs	r0, r0
 8007e6c:	0000      	movs	r0, r0
	...

08007e70 <_dtoa_r>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	69c7      	ldr	r7, [r0, #28]
 8007e76:	b099      	sub	sp, #100	@ 0x64
 8007e78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e7c:	ec55 4b10 	vmov	r4, r5, d0
 8007e80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e82:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e84:	4683      	mov	fp, r0
 8007e86:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e8a:	b97f      	cbnz	r7, 8007eac <_dtoa_r+0x3c>
 8007e8c:	2010      	movs	r0, #16
 8007e8e:	f000 fdfd 	bl	8008a8c <malloc>
 8007e92:	4602      	mov	r2, r0
 8007e94:	f8cb 001c 	str.w	r0, [fp, #28]
 8007e98:	b920      	cbnz	r0, 8007ea4 <_dtoa_r+0x34>
 8007e9a:	4ba7      	ldr	r3, [pc, #668]	@ (8008138 <_dtoa_r+0x2c8>)
 8007e9c:	21ef      	movs	r1, #239	@ 0xef
 8007e9e:	48a7      	ldr	r0, [pc, #668]	@ (800813c <_dtoa_r+0x2cc>)
 8007ea0:	f001 faf6 	bl	8009490 <__assert_func>
 8007ea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ea8:	6007      	str	r7, [r0, #0]
 8007eaa:	60c7      	str	r7, [r0, #12]
 8007eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007eb0:	6819      	ldr	r1, [r3, #0]
 8007eb2:	b159      	cbz	r1, 8007ecc <_dtoa_r+0x5c>
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	604a      	str	r2, [r1, #4]
 8007eb8:	2301      	movs	r3, #1
 8007eba:	4093      	lsls	r3, r2
 8007ebc:	608b      	str	r3, [r1, #8]
 8007ebe:	4658      	mov	r0, fp
 8007ec0:	f000 feda 	bl	8008c78 <_Bfree>
 8007ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	1e2b      	subs	r3, r5, #0
 8007ece:	bfb9      	ittee	lt
 8007ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ed4:	9303      	strlt	r3, [sp, #12]
 8007ed6:	2300      	movge	r3, #0
 8007ed8:	6033      	strge	r3, [r6, #0]
 8007eda:	9f03      	ldr	r7, [sp, #12]
 8007edc:	4b98      	ldr	r3, [pc, #608]	@ (8008140 <_dtoa_r+0x2d0>)
 8007ede:	bfbc      	itt	lt
 8007ee0:	2201      	movlt	r2, #1
 8007ee2:	6032      	strlt	r2, [r6, #0]
 8007ee4:	43bb      	bics	r3, r7
 8007ee6:	d112      	bne.n	8007f0e <_dtoa_r+0x9e>
 8007ee8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007eea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ef4:	4323      	orrs	r3, r4
 8007ef6:	f000 854d 	beq.w	8008994 <_dtoa_r+0xb24>
 8007efa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007efc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008154 <_dtoa_r+0x2e4>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 854f 	beq.w	80089a4 <_dtoa_r+0xb34>
 8007f06:	f10a 0303 	add.w	r3, sl, #3
 8007f0a:	f000 bd49 	b.w	80089a0 <_dtoa_r+0xb30>
 8007f0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f12:	2200      	movs	r2, #0
 8007f14:	ec51 0b17 	vmov	r0, r1, d7
 8007f18:	2300      	movs	r3, #0
 8007f1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007f1e:	f7f8 fdf3 	bl	8000b08 <__aeabi_dcmpeq>
 8007f22:	4680      	mov	r8, r0
 8007f24:	b158      	cbz	r0, 8007f3e <_dtoa_r+0xce>
 8007f26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f28:	2301      	movs	r3, #1
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f2e:	b113      	cbz	r3, 8007f36 <_dtoa_r+0xc6>
 8007f30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f32:	4b84      	ldr	r3, [pc, #528]	@ (8008144 <_dtoa_r+0x2d4>)
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008158 <_dtoa_r+0x2e8>
 8007f3a:	f000 bd33 	b.w	80089a4 <_dtoa_r+0xb34>
 8007f3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007f42:	aa16      	add	r2, sp, #88	@ 0x58
 8007f44:	a917      	add	r1, sp, #92	@ 0x5c
 8007f46:	4658      	mov	r0, fp
 8007f48:	f001 f980 	bl	800924c <__d2b>
 8007f4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f50:	4681      	mov	r9, r0
 8007f52:	2e00      	cmp	r6, #0
 8007f54:	d077      	beq.n	8008046 <_dtoa_r+0x1d6>
 8007f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f70:	4619      	mov	r1, r3
 8007f72:	2200      	movs	r2, #0
 8007f74:	4b74      	ldr	r3, [pc, #464]	@ (8008148 <_dtoa_r+0x2d8>)
 8007f76:	f7f8 f9a7 	bl	80002c8 <__aeabi_dsub>
 8007f7a:	a369      	add	r3, pc, #420	@ (adr r3, 8008120 <_dtoa_r+0x2b0>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	f7f8 fb5a 	bl	8000638 <__aeabi_dmul>
 8007f84:	a368      	add	r3, pc, #416	@ (adr r3, 8008128 <_dtoa_r+0x2b8>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 f99f 	bl	80002cc <__adddf3>
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4630      	mov	r0, r6
 8007f92:	460d      	mov	r5, r1
 8007f94:	f7f8 fae6 	bl	8000564 <__aeabi_i2d>
 8007f98:	a365      	add	r3, pc, #404	@ (adr r3, 8008130 <_dtoa_r+0x2c0>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 fb4b 	bl	8000638 <__aeabi_dmul>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 f98f 	bl	80002cc <__adddf3>
 8007fae:	4604      	mov	r4, r0
 8007fb0:	460d      	mov	r5, r1
 8007fb2:	f7f8 fdf1 	bl	8000b98 <__aeabi_d2iz>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4607      	mov	r7, r0
 8007fba:	2300      	movs	r3, #0
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f7f8 fdac 	bl	8000b1c <__aeabi_dcmplt>
 8007fc4:	b140      	cbz	r0, 8007fd8 <_dtoa_r+0x168>
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	f7f8 facc 	bl	8000564 <__aeabi_i2d>
 8007fcc:	4622      	mov	r2, r4
 8007fce:	462b      	mov	r3, r5
 8007fd0:	f7f8 fd9a 	bl	8000b08 <__aeabi_dcmpeq>
 8007fd4:	b900      	cbnz	r0, 8007fd8 <_dtoa_r+0x168>
 8007fd6:	3f01      	subs	r7, #1
 8007fd8:	2f16      	cmp	r7, #22
 8007fda:	d851      	bhi.n	8008080 <_dtoa_r+0x210>
 8007fdc:	4b5b      	ldr	r3, [pc, #364]	@ (800814c <_dtoa_r+0x2dc>)
 8007fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fea:	f7f8 fd97 	bl	8000b1c <__aeabi_dcmplt>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d048      	beq.n	8008084 <_dtoa_r+0x214>
 8007ff2:	3f01      	subs	r7, #1
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ffa:	1b9b      	subs	r3, r3, r6
 8007ffc:	1e5a      	subs	r2, r3, #1
 8007ffe:	bf44      	itt	mi
 8008000:	f1c3 0801 	rsbmi	r8, r3, #1
 8008004:	2300      	movmi	r3, #0
 8008006:	9208      	str	r2, [sp, #32]
 8008008:	bf54      	ite	pl
 800800a:	f04f 0800 	movpl.w	r8, #0
 800800e:	9308      	strmi	r3, [sp, #32]
 8008010:	2f00      	cmp	r7, #0
 8008012:	db39      	blt.n	8008088 <_dtoa_r+0x218>
 8008014:	9b08      	ldr	r3, [sp, #32]
 8008016:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008018:	443b      	add	r3, r7
 800801a:	9308      	str	r3, [sp, #32]
 800801c:	2300      	movs	r3, #0
 800801e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008022:	2b09      	cmp	r3, #9
 8008024:	d864      	bhi.n	80080f0 <_dtoa_r+0x280>
 8008026:	2b05      	cmp	r3, #5
 8008028:	bfc4      	itt	gt
 800802a:	3b04      	subgt	r3, #4
 800802c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800802e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008030:	f1a3 0302 	sub.w	r3, r3, #2
 8008034:	bfcc      	ite	gt
 8008036:	2400      	movgt	r4, #0
 8008038:	2401      	movle	r4, #1
 800803a:	2b03      	cmp	r3, #3
 800803c:	d863      	bhi.n	8008106 <_dtoa_r+0x296>
 800803e:	e8df f003 	tbb	[pc, r3]
 8008042:	372a      	.short	0x372a
 8008044:	5535      	.short	0x5535
 8008046:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800804a:	441e      	add	r6, r3
 800804c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008050:	2b20      	cmp	r3, #32
 8008052:	bfc1      	itttt	gt
 8008054:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008058:	409f      	lslgt	r7, r3
 800805a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800805e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008062:	bfd6      	itet	le
 8008064:	f1c3 0320 	rsble	r3, r3, #32
 8008068:	ea47 0003 	orrgt.w	r0, r7, r3
 800806c:	fa04 f003 	lslle.w	r0, r4, r3
 8008070:	f7f8 fa68 	bl	8000544 <__aeabi_ui2d>
 8008074:	2201      	movs	r2, #1
 8008076:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800807a:	3e01      	subs	r6, #1
 800807c:	9214      	str	r2, [sp, #80]	@ 0x50
 800807e:	e777      	b.n	8007f70 <_dtoa_r+0x100>
 8008080:	2301      	movs	r3, #1
 8008082:	e7b8      	b.n	8007ff6 <_dtoa_r+0x186>
 8008084:	9012      	str	r0, [sp, #72]	@ 0x48
 8008086:	e7b7      	b.n	8007ff8 <_dtoa_r+0x188>
 8008088:	427b      	negs	r3, r7
 800808a:	930a      	str	r3, [sp, #40]	@ 0x28
 800808c:	2300      	movs	r3, #0
 800808e:	eba8 0807 	sub.w	r8, r8, r7
 8008092:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008094:	e7c4      	b.n	8008020 <_dtoa_r+0x1b0>
 8008096:	2300      	movs	r3, #0
 8008098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800809a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800809c:	2b00      	cmp	r3, #0
 800809e:	dc35      	bgt.n	800810c <_dtoa_r+0x29c>
 80080a0:	2301      	movs	r3, #1
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	9307      	str	r3, [sp, #28]
 80080a6:	461a      	mov	r2, r3
 80080a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80080aa:	e00b      	b.n	80080c4 <_dtoa_r+0x254>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e7f3      	b.n	8008098 <_dtoa_r+0x228>
 80080b0:	2300      	movs	r3, #0
 80080b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080b6:	18fb      	adds	r3, r7, r3
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	3301      	adds	r3, #1
 80080bc:	2b01      	cmp	r3, #1
 80080be:	9307      	str	r3, [sp, #28]
 80080c0:	bfb8      	it	lt
 80080c2:	2301      	movlt	r3, #1
 80080c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80080c8:	2100      	movs	r1, #0
 80080ca:	2204      	movs	r2, #4
 80080cc:	f102 0514 	add.w	r5, r2, #20
 80080d0:	429d      	cmp	r5, r3
 80080d2:	d91f      	bls.n	8008114 <_dtoa_r+0x2a4>
 80080d4:	6041      	str	r1, [r0, #4]
 80080d6:	4658      	mov	r0, fp
 80080d8:	f000 fd8e 	bl	8008bf8 <_Balloc>
 80080dc:	4682      	mov	sl, r0
 80080de:	2800      	cmp	r0, #0
 80080e0:	d13c      	bne.n	800815c <_dtoa_r+0x2ec>
 80080e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008150 <_dtoa_r+0x2e0>)
 80080e4:	4602      	mov	r2, r0
 80080e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80080ea:	e6d8      	b.n	8007e9e <_dtoa_r+0x2e>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e7e0      	b.n	80080b2 <_dtoa_r+0x242>
 80080f0:	2401      	movs	r4, #1
 80080f2:	2300      	movs	r3, #0
 80080f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80080f8:	f04f 33ff 	mov.w	r3, #4294967295
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	9307      	str	r3, [sp, #28]
 8008100:	2200      	movs	r2, #0
 8008102:	2312      	movs	r3, #18
 8008104:	e7d0      	b.n	80080a8 <_dtoa_r+0x238>
 8008106:	2301      	movs	r3, #1
 8008108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800810a:	e7f5      	b.n	80080f8 <_dtoa_r+0x288>
 800810c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	9307      	str	r3, [sp, #28]
 8008112:	e7d7      	b.n	80080c4 <_dtoa_r+0x254>
 8008114:	3101      	adds	r1, #1
 8008116:	0052      	lsls	r2, r2, #1
 8008118:	e7d8      	b.n	80080cc <_dtoa_r+0x25c>
 800811a:	bf00      	nop
 800811c:	f3af 8000 	nop.w
 8008120:	636f4361 	.word	0x636f4361
 8008124:	3fd287a7 	.word	0x3fd287a7
 8008128:	8b60c8b3 	.word	0x8b60c8b3
 800812c:	3fc68a28 	.word	0x3fc68a28
 8008130:	509f79fb 	.word	0x509f79fb
 8008134:	3fd34413 	.word	0x3fd34413
 8008138:	08009b11 	.word	0x08009b11
 800813c:	08009b28 	.word	0x08009b28
 8008140:	7ff00000 	.word	0x7ff00000
 8008144:	08009ae1 	.word	0x08009ae1
 8008148:	3ff80000 	.word	0x3ff80000
 800814c:	08009c20 	.word	0x08009c20
 8008150:	08009b80 	.word	0x08009b80
 8008154:	08009b0d 	.word	0x08009b0d
 8008158:	08009ae0 	.word	0x08009ae0
 800815c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008160:	6018      	str	r0, [r3, #0]
 8008162:	9b07      	ldr	r3, [sp, #28]
 8008164:	2b0e      	cmp	r3, #14
 8008166:	f200 80a4 	bhi.w	80082b2 <_dtoa_r+0x442>
 800816a:	2c00      	cmp	r4, #0
 800816c:	f000 80a1 	beq.w	80082b2 <_dtoa_r+0x442>
 8008170:	2f00      	cmp	r7, #0
 8008172:	dd33      	ble.n	80081dc <_dtoa_r+0x36c>
 8008174:	4bad      	ldr	r3, [pc, #692]	@ (800842c <_dtoa_r+0x5bc>)
 8008176:	f007 020f 	and.w	r2, r7, #15
 800817a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800817e:	ed93 7b00 	vldr	d7, [r3]
 8008182:	05f8      	lsls	r0, r7, #23
 8008184:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008188:	ea4f 1427 	mov.w	r4, r7, asr #4
 800818c:	d516      	bpl.n	80081bc <_dtoa_r+0x34c>
 800818e:	4ba8      	ldr	r3, [pc, #672]	@ (8008430 <_dtoa_r+0x5c0>)
 8008190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008198:	f7f8 fb78 	bl	800088c <__aeabi_ddiv>
 800819c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a0:	f004 040f 	and.w	r4, r4, #15
 80081a4:	2603      	movs	r6, #3
 80081a6:	4da2      	ldr	r5, [pc, #648]	@ (8008430 <_dtoa_r+0x5c0>)
 80081a8:	b954      	cbnz	r4, 80081c0 <_dtoa_r+0x350>
 80081aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b2:	f7f8 fb6b 	bl	800088c <__aeabi_ddiv>
 80081b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ba:	e028      	b.n	800820e <_dtoa_r+0x39e>
 80081bc:	2602      	movs	r6, #2
 80081be:	e7f2      	b.n	80081a6 <_dtoa_r+0x336>
 80081c0:	07e1      	lsls	r1, r4, #31
 80081c2:	d508      	bpl.n	80081d6 <_dtoa_r+0x366>
 80081c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081cc:	f7f8 fa34 	bl	8000638 <__aeabi_dmul>
 80081d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081d4:	3601      	adds	r6, #1
 80081d6:	1064      	asrs	r4, r4, #1
 80081d8:	3508      	adds	r5, #8
 80081da:	e7e5      	b.n	80081a8 <_dtoa_r+0x338>
 80081dc:	f000 80d2 	beq.w	8008384 <_dtoa_r+0x514>
 80081e0:	427c      	negs	r4, r7
 80081e2:	4b92      	ldr	r3, [pc, #584]	@ (800842c <_dtoa_r+0x5bc>)
 80081e4:	4d92      	ldr	r5, [pc, #584]	@ (8008430 <_dtoa_r+0x5c0>)
 80081e6:	f004 020f 	and.w	r2, r4, #15
 80081ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081f6:	f7f8 fa1f 	bl	8000638 <__aeabi_dmul>
 80081fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081fe:	1124      	asrs	r4, r4, #4
 8008200:	2300      	movs	r3, #0
 8008202:	2602      	movs	r6, #2
 8008204:	2c00      	cmp	r4, #0
 8008206:	f040 80b2 	bne.w	800836e <_dtoa_r+0x4fe>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1d3      	bne.n	80081b6 <_dtoa_r+0x346>
 800820e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 80b7 	beq.w	8008388 <_dtoa_r+0x518>
 800821a:	4b86      	ldr	r3, [pc, #536]	@ (8008434 <_dtoa_r+0x5c4>)
 800821c:	2200      	movs	r2, #0
 800821e:	4620      	mov	r0, r4
 8008220:	4629      	mov	r1, r5
 8008222:	f7f8 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8008226:	2800      	cmp	r0, #0
 8008228:	f000 80ae 	beq.w	8008388 <_dtoa_r+0x518>
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 80aa 	beq.w	8008388 <_dtoa_r+0x518>
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	dd37      	ble.n	80082aa <_dtoa_r+0x43a>
 800823a:	1e7b      	subs	r3, r7, #1
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	4620      	mov	r0, r4
 8008240:	4b7d      	ldr	r3, [pc, #500]	@ (8008438 <_dtoa_r+0x5c8>)
 8008242:	2200      	movs	r2, #0
 8008244:	4629      	mov	r1, r5
 8008246:	f7f8 f9f7 	bl	8000638 <__aeabi_dmul>
 800824a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800824e:	9c00      	ldr	r4, [sp, #0]
 8008250:	3601      	adds	r6, #1
 8008252:	4630      	mov	r0, r6
 8008254:	f7f8 f986 	bl	8000564 <__aeabi_i2d>
 8008258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800825c:	f7f8 f9ec 	bl	8000638 <__aeabi_dmul>
 8008260:	4b76      	ldr	r3, [pc, #472]	@ (800843c <_dtoa_r+0x5cc>)
 8008262:	2200      	movs	r2, #0
 8008264:	f7f8 f832 	bl	80002cc <__adddf3>
 8008268:	4605      	mov	r5, r0
 800826a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800826e:	2c00      	cmp	r4, #0
 8008270:	f040 808d 	bne.w	800838e <_dtoa_r+0x51e>
 8008274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008278:	4b71      	ldr	r3, [pc, #452]	@ (8008440 <_dtoa_r+0x5d0>)
 800827a:	2200      	movs	r2, #0
 800827c:	f7f8 f824 	bl	80002c8 <__aeabi_dsub>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008288:	462a      	mov	r2, r5
 800828a:	4633      	mov	r3, r6
 800828c:	f7f8 fc64 	bl	8000b58 <__aeabi_dcmpgt>
 8008290:	2800      	cmp	r0, #0
 8008292:	f040 828b 	bne.w	80087ac <_dtoa_r+0x93c>
 8008296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800829a:	462a      	mov	r2, r5
 800829c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082a0:	f7f8 fc3c 	bl	8000b1c <__aeabi_dcmplt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f040 8128 	bne.w	80084fa <_dtoa_r+0x68a>
 80082aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80082ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80082b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f2c0 815a 	blt.w	800856e <_dtoa_r+0x6fe>
 80082ba:	2f0e      	cmp	r7, #14
 80082bc:	f300 8157 	bgt.w	800856e <_dtoa_r+0x6fe>
 80082c0:	4b5a      	ldr	r3, [pc, #360]	@ (800842c <_dtoa_r+0x5bc>)
 80082c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082c6:	ed93 7b00 	vldr	d7, [r3]
 80082ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	ed8d 7b00 	vstr	d7, [sp]
 80082d2:	da03      	bge.n	80082dc <_dtoa_r+0x46c>
 80082d4:	9b07      	ldr	r3, [sp, #28]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f340 8101 	ble.w	80084de <_dtoa_r+0x66e>
 80082dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082e0:	4656      	mov	r6, sl
 80082e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 facf 	bl	800088c <__aeabi_ddiv>
 80082ee:	f7f8 fc53 	bl	8000b98 <__aeabi_d2iz>
 80082f2:	4680      	mov	r8, r0
 80082f4:	f7f8 f936 	bl	8000564 <__aeabi_i2d>
 80082f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082fc:	f7f8 f99c 	bl	8000638 <__aeabi_dmul>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4620      	mov	r0, r4
 8008306:	4629      	mov	r1, r5
 8008308:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800830c:	f7f7 ffdc 	bl	80002c8 <__aeabi_dsub>
 8008310:	f806 4b01 	strb.w	r4, [r6], #1
 8008314:	9d07      	ldr	r5, [sp, #28]
 8008316:	eba6 040a 	sub.w	r4, r6, sl
 800831a:	42a5      	cmp	r5, r4
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	f040 8117 	bne.w	8008552 <_dtoa_r+0x6e2>
 8008324:	f7f7 ffd2 	bl	80002cc <__adddf3>
 8008328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800832c:	4604      	mov	r4, r0
 800832e:	460d      	mov	r5, r1
 8008330:	f7f8 fc12 	bl	8000b58 <__aeabi_dcmpgt>
 8008334:	2800      	cmp	r0, #0
 8008336:	f040 80f9 	bne.w	800852c <_dtoa_r+0x6bc>
 800833a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	f7f8 fbe1 	bl	8000b08 <__aeabi_dcmpeq>
 8008346:	b118      	cbz	r0, 8008350 <_dtoa_r+0x4e0>
 8008348:	f018 0f01 	tst.w	r8, #1
 800834c:	f040 80ee 	bne.w	800852c <_dtoa_r+0x6bc>
 8008350:	4649      	mov	r1, r9
 8008352:	4658      	mov	r0, fp
 8008354:	f000 fc90 	bl	8008c78 <_Bfree>
 8008358:	2300      	movs	r3, #0
 800835a:	7033      	strb	r3, [r6, #0]
 800835c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800835e:	3701      	adds	r7, #1
 8008360:	601f      	str	r7, [r3, #0]
 8008362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 831d 	beq.w	80089a4 <_dtoa_r+0xb34>
 800836a:	601e      	str	r6, [r3, #0]
 800836c:	e31a      	b.n	80089a4 <_dtoa_r+0xb34>
 800836e:	07e2      	lsls	r2, r4, #31
 8008370:	d505      	bpl.n	800837e <_dtoa_r+0x50e>
 8008372:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008376:	f7f8 f95f 	bl	8000638 <__aeabi_dmul>
 800837a:	3601      	adds	r6, #1
 800837c:	2301      	movs	r3, #1
 800837e:	1064      	asrs	r4, r4, #1
 8008380:	3508      	adds	r5, #8
 8008382:	e73f      	b.n	8008204 <_dtoa_r+0x394>
 8008384:	2602      	movs	r6, #2
 8008386:	e742      	b.n	800820e <_dtoa_r+0x39e>
 8008388:	9c07      	ldr	r4, [sp, #28]
 800838a:	9704      	str	r7, [sp, #16]
 800838c:	e761      	b.n	8008252 <_dtoa_r+0x3e2>
 800838e:	4b27      	ldr	r3, [pc, #156]	@ (800842c <_dtoa_r+0x5bc>)
 8008390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800839a:	4454      	add	r4, sl
 800839c:	2900      	cmp	r1, #0
 800839e:	d053      	beq.n	8008448 <_dtoa_r+0x5d8>
 80083a0:	4928      	ldr	r1, [pc, #160]	@ (8008444 <_dtoa_r+0x5d4>)
 80083a2:	2000      	movs	r0, #0
 80083a4:	f7f8 fa72 	bl	800088c <__aeabi_ddiv>
 80083a8:	4633      	mov	r3, r6
 80083aa:	462a      	mov	r2, r5
 80083ac:	f7f7 ff8c 	bl	80002c8 <__aeabi_dsub>
 80083b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083b4:	4656      	mov	r6, sl
 80083b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ba:	f7f8 fbed 	bl	8000b98 <__aeabi_d2iz>
 80083be:	4605      	mov	r5, r0
 80083c0:	f7f8 f8d0 	bl	8000564 <__aeabi_i2d>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083cc:	f7f7 ff7c 	bl	80002c8 <__aeabi_dsub>
 80083d0:	3530      	adds	r5, #48	@ 0x30
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083da:	f806 5b01 	strb.w	r5, [r6], #1
 80083de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083e2:	f7f8 fb9b 	bl	8000b1c <__aeabi_dcmplt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d171      	bne.n	80084ce <_dtoa_r+0x65e>
 80083ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083ee:	4911      	ldr	r1, [pc, #68]	@ (8008434 <_dtoa_r+0x5c4>)
 80083f0:	2000      	movs	r0, #0
 80083f2:	f7f7 ff69 	bl	80002c8 <__aeabi_dsub>
 80083f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083fa:	f7f8 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f040 8095 	bne.w	800852e <_dtoa_r+0x6be>
 8008404:	42a6      	cmp	r6, r4
 8008406:	f43f af50 	beq.w	80082aa <_dtoa_r+0x43a>
 800840a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800840e:	4b0a      	ldr	r3, [pc, #40]	@ (8008438 <_dtoa_r+0x5c8>)
 8008410:	2200      	movs	r2, #0
 8008412:	f7f8 f911 	bl	8000638 <__aeabi_dmul>
 8008416:	4b08      	ldr	r3, [pc, #32]	@ (8008438 <_dtoa_r+0x5c8>)
 8008418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800841c:	2200      	movs	r2, #0
 800841e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008422:	f7f8 f909 	bl	8000638 <__aeabi_dmul>
 8008426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800842a:	e7c4      	b.n	80083b6 <_dtoa_r+0x546>
 800842c:	08009c20 	.word	0x08009c20
 8008430:	08009bf8 	.word	0x08009bf8
 8008434:	3ff00000 	.word	0x3ff00000
 8008438:	40240000 	.word	0x40240000
 800843c:	401c0000 	.word	0x401c0000
 8008440:	40140000 	.word	0x40140000
 8008444:	3fe00000 	.word	0x3fe00000
 8008448:	4631      	mov	r1, r6
 800844a:	4628      	mov	r0, r5
 800844c:	f7f8 f8f4 	bl	8000638 <__aeabi_dmul>
 8008450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008454:	9415      	str	r4, [sp, #84]	@ 0x54
 8008456:	4656      	mov	r6, sl
 8008458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800845c:	f7f8 fb9c 	bl	8000b98 <__aeabi_d2iz>
 8008460:	4605      	mov	r5, r0
 8008462:	f7f8 f87f 	bl	8000564 <__aeabi_i2d>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800846e:	f7f7 ff2b 	bl	80002c8 <__aeabi_dsub>
 8008472:	3530      	adds	r5, #48	@ 0x30
 8008474:	f806 5b01 	strb.w	r5, [r6], #1
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	42a6      	cmp	r6, r4
 800847e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	d124      	bne.n	80084d2 <_dtoa_r+0x662>
 8008488:	4bac      	ldr	r3, [pc, #688]	@ (800873c <_dtoa_r+0x8cc>)
 800848a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800848e:	f7f7 ff1d 	bl	80002cc <__adddf3>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800849a:	f7f8 fb5d 	bl	8000b58 <__aeabi_dcmpgt>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d145      	bne.n	800852e <_dtoa_r+0x6be>
 80084a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084a6:	49a5      	ldr	r1, [pc, #660]	@ (800873c <_dtoa_r+0x8cc>)
 80084a8:	2000      	movs	r0, #0
 80084aa:	f7f7 ff0d 	bl	80002c8 <__aeabi_dsub>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084b6:	f7f8 fb31 	bl	8000b1c <__aeabi_dcmplt>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	f43f aef5 	beq.w	80082aa <_dtoa_r+0x43a>
 80084c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80084c2:	1e73      	subs	r3, r6, #1
 80084c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80084c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084ca:	2b30      	cmp	r3, #48	@ 0x30
 80084cc:	d0f8      	beq.n	80084c0 <_dtoa_r+0x650>
 80084ce:	9f04      	ldr	r7, [sp, #16]
 80084d0:	e73e      	b.n	8008350 <_dtoa_r+0x4e0>
 80084d2:	4b9b      	ldr	r3, [pc, #620]	@ (8008740 <_dtoa_r+0x8d0>)
 80084d4:	f7f8 f8b0 	bl	8000638 <__aeabi_dmul>
 80084d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084dc:	e7bc      	b.n	8008458 <_dtoa_r+0x5e8>
 80084de:	d10c      	bne.n	80084fa <_dtoa_r+0x68a>
 80084e0:	4b98      	ldr	r3, [pc, #608]	@ (8008744 <_dtoa_r+0x8d4>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084e8:	f7f8 f8a6 	bl	8000638 <__aeabi_dmul>
 80084ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084f0:	f7f8 fb28 	bl	8000b44 <__aeabi_dcmpge>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f000 8157 	beq.w	80087a8 <_dtoa_r+0x938>
 80084fa:	2400      	movs	r4, #0
 80084fc:	4625      	mov	r5, r4
 80084fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008500:	43db      	mvns	r3, r3
 8008502:	9304      	str	r3, [sp, #16]
 8008504:	4656      	mov	r6, sl
 8008506:	2700      	movs	r7, #0
 8008508:	4621      	mov	r1, r4
 800850a:	4658      	mov	r0, fp
 800850c:	f000 fbb4 	bl	8008c78 <_Bfree>
 8008510:	2d00      	cmp	r5, #0
 8008512:	d0dc      	beq.n	80084ce <_dtoa_r+0x65e>
 8008514:	b12f      	cbz	r7, 8008522 <_dtoa_r+0x6b2>
 8008516:	42af      	cmp	r7, r5
 8008518:	d003      	beq.n	8008522 <_dtoa_r+0x6b2>
 800851a:	4639      	mov	r1, r7
 800851c:	4658      	mov	r0, fp
 800851e:	f000 fbab 	bl	8008c78 <_Bfree>
 8008522:	4629      	mov	r1, r5
 8008524:	4658      	mov	r0, fp
 8008526:	f000 fba7 	bl	8008c78 <_Bfree>
 800852a:	e7d0      	b.n	80084ce <_dtoa_r+0x65e>
 800852c:	9704      	str	r7, [sp, #16]
 800852e:	4633      	mov	r3, r6
 8008530:	461e      	mov	r6, r3
 8008532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008536:	2a39      	cmp	r2, #57	@ 0x39
 8008538:	d107      	bne.n	800854a <_dtoa_r+0x6da>
 800853a:	459a      	cmp	sl, r3
 800853c:	d1f8      	bne.n	8008530 <_dtoa_r+0x6c0>
 800853e:	9a04      	ldr	r2, [sp, #16]
 8008540:	3201      	adds	r2, #1
 8008542:	9204      	str	r2, [sp, #16]
 8008544:	2230      	movs	r2, #48	@ 0x30
 8008546:	f88a 2000 	strb.w	r2, [sl]
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	3201      	adds	r2, #1
 800854e:	701a      	strb	r2, [r3, #0]
 8008550:	e7bd      	b.n	80084ce <_dtoa_r+0x65e>
 8008552:	4b7b      	ldr	r3, [pc, #492]	@ (8008740 <_dtoa_r+0x8d0>)
 8008554:	2200      	movs	r2, #0
 8008556:	f7f8 f86f 	bl	8000638 <__aeabi_dmul>
 800855a:	2200      	movs	r2, #0
 800855c:	2300      	movs	r3, #0
 800855e:	4604      	mov	r4, r0
 8008560:	460d      	mov	r5, r1
 8008562:	f7f8 fad1 	bl	8000b08 <__aeabi_dcmpeq>
 8008566:	2800      	cmp	r0, #0
 8008568:	f43f aebb 	beq.w	80082e2 <_dtoa_r+0x472>
 800856c:	e6f0      	b.n	8008350 <_dtoa_r+0x4e0>
 800856e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008570:	2a00      	cmp	r2, #0
 8008572:	f000 80db 	beq.w	800872c <_dtoa_r+0x8bc>
 8008576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008578:	2a01      	cmp	r2, #1
 800857a:	f300 80bf 	bgt.w	80086fc <_dtoa_r+0x88c>
 800857e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008580:	2a00      	cmp	r2, #0
 8008582:	f000 80b7 	beq.w	80086f4 <_dtoa_r+0x884>
 8008586:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800858a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800858c:	4646      	mov	r6, r8
 800858e:	9a08      	ldr	r2, [sp, #32]
 8008590:	2101      	movs	r1, #1
 8008592:	441a      	add	r2, r3
 8008594:	4658      	mov	r0, fp
 8008596:	4498      	add	r8, r3
 8008598:	9208      	str	r2, [sp, #32]
 800859a:	f000 fc21 	bl	8008de0 <__i2b>
 800859e:	4605      	mov	r5, r0
 80085a0:	b15e      	cbz	r6, 80085ba <_dtoa_r+0x74a>
 80085a2:	9b08      	ldr	r3, [sp, #32]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dd08      	ble.n	80085ba <_dtoa_r+0x74a>
 80085a8:	42b3      	cmp	r3, r6
 80085aa:	9a08      	ldr	r2, [sp, #32]
 80085ac:	bfa8      	it	ge
 80085ae:	4633      	movge	r3, r6
 80085b0:	eba8 0803 	sub.w	r8, r8, r3
 80085b4:	1af6      	subs	r6, r6, r3
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	9308      	str	r3, [sp, #32]
 80085ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085bc:	b1f3      	cbz	r3, 80085fc <_dtoa_r+0x78c>
 80085be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 80b7 	beq.w	8008734 <_dtoa_r+0x8c4>
 80085c6:	b18c      	cbz	r4, 80085ec <_dtoa_r+0x77c>
 80085c8:	4629      	mov	r1, r5
 80085ca:	4622      	mov	r2, r4
 80085cc:	4658      	mov	r0, fp
 80085ce:	f000 fcc7 	bl	8008f60 <__pow5mult>
 80085d2:	464a      	mov	r2, r9
 80085d4:	4601      	mov	r1, r0
 80085d6:	4605      	mov	r5, r0
 80085d8:	4658      	mov	r0, fp
 80085da:	f000 fc17 	bl	8008e0c <__multiply>
 80085de:	4649      	mov	r1, r9
 80085e0:	9004      	str	r0, [sp, #16]
 80085e2:	4658      	mov	r0, fp
 80085e4:	f000 fb48 	bl	8008c78 <_Bfree>
 80085e8:	9b04      	ldr	r3, [sp, #16]
 80085ea:	4699      	mov	r9, r3
 80085ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085ee:	1b1a      	subs	r2, r3, r4
 80085f0:	d004      	beq.n	80085fc <_dtoa_r+0x78c>
 80085f2:	4649      	mov	r1, r9
 80085f4:	4658      	mov	r0, fp
 80085f6:	f000 fcb3 	bl	8008f60 <__pow5mult>
 80085fa:	4681      	mov	r9, r0
 80085fc:	2101      	movs	r1, #1
 80085fe:	4658      	mov	r0, fp
 8008600:	f000 fbee 	bl	8008de0 <__i2b>
 8008604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008606:	4604      	mov	r4, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 81cf 	beq.w	80089ac <_dtoa_r+0xb3c>
 800860e:	461a      	mov	r2, r3
 8008610:	4601      	mov	r1, r0
 8008612:	4658      	mov	r0, fp
 8008614:	f000 fca4 	bl	8008f60 <__pow5mult>
 8008618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861a:	2b01      	cmp	r3, #1
 800861c:	4604      	mov	r4, r0
 800861e:	f300 8095 	bgt.w	800874c <_dtoa_r+0x8dc>
 8008622:	9b02      	ldr	r3, [sp, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 8087 	bne.w	8008738 <_dtoa_r+0x8c8>
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 8089 	bne.w	8008748 <_dtoa_r+0x8d8>
 8008636:	9b03      	ldr	r3, [sp, #12]
 8008638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800863c:	0d1b      	lsrs	r3, r3, #20
 800863e:	051b      	lsls	r3, r3, #20
 8008640:	b12b      	cbz	r3, 800864e <_dtoa_r+0x7de>
 8008642:	9b08      	ldr	r3, [sp, #32]
 8008644:	3301      	adds	r3, #1
 8008646:	9308      	str	r3, [sp, #32]
 8008648:	f108 0801 	add.w	r8, r8, #1
 800864c:	2301      	movs	r3, #1
 800864e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 81b0 	beq.w	80089b8 <_dtoa_r+0xb48>
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800865e:	6918      	ldr	r0, [r3, #16]
 8008660:	f000 fb72 	bl	8008d48 <__hi0bits>
 8008664:	f1c0 0020 	rsb	r0, r0, #32
 8008668:	9b08      	ldr	r3, [sp, #32]
 800866a:	4418      	add	r0, r3
 800866c:	f010 001f 	ands.w	r0, r0, #31
 8008670:	d077      	beq.n	8008762 <_dtoa_r+0x8f2>
 8008672:	f1c0 0320 	rsb	r3, r0, #32
 8008676:	2b04      	cmp	r3, #4
 8008678:	dd6b      	ble.n	8008752 <_dtoa_r+0x8e2>
 800867a:	9b08      	ldr	r3, [sp, #32]
 800867c:	f1c0 001c 	rsb	r0, r0, #28
 8008680:	4403      	add	r3, r0
 8008682:	4480      	add	r8, r0
 8008684:	4406      	add	r6, r0
 8008686:	9308      	str	r3, [sp, #32]
 8008688:	f1b8 0f00 	cmp.w	r8, #0
 800868c:	dd05      	ble.n	800869a <_dtoa_r+0x82a>
 800868e:	4649      	mov	r1, r9
 8008690:	4642      	mov	r2, r8
 8008692:	4658      	mov	r0, fp
 8008694:	f000 fcbe 	bl	8009014 <__lshift>
 8008698:	4681      	mov	r9, r0
 800869a:	9b08      	ldr	r3, [sp, #32]
 800869c:	2b00      	cmp	r3, #0
 800869e:	dd05      	ble.n	80086ac <_dtoa_r+0x83c>
 80086a0:	4621      	mov	r1, r4
 80086a2:	461a      	mov	r2, r3
 80086a4:	4658      	mov	r0, fp
 80086a6:	f000 fcb5 	bl	8009014 <__lshift>
 80086aa:	4604      	mov	r4, r0
 80086ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d059      	beq.n	8008766 <_dtoa_r+0x8f6>
 80086b2:	4621      	mov	r1, r4
 80086b4:	4648      	mov	r0, r9
 80086b6:	f000 fd19 	bl	80090ec <__mcmp>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	da53      	bge.n	8008766 <_dtoa_r+0x8f6>
 80086be:	1e7b      	subs	r3, r7, #1
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	4649      	mov	r1, r9
 80086c4:	2300      	movs	r3, #0
 80086c6:	220a      	movs	r2, #10
 80086c8:	4658      	mov	r0, fp
 80086ca:	f000 faf7 	bl	8008cbc <__multadd>
 80086ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d0:	4681      	mov	r9, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 8172 	beq.w	80089bc <_dtoa_r+0xb4c>
 80086d8:	2300      	movs	r3, #0
 80086da:	4629      	mov	r1, r5
 80086dc:	220a      	movs	r2, #10
 80086de:	4658      	mov	r0, fp
 80086e0:	f000 faec 	bl	8008cbc <__multadd>
 80086e4:	9b00      	ldr	r3, [sp, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	4605      	mov	r5, r0
 80086ea:	dc67      	bgt.n	80087bc <_dtoa_r+0x94c>
 80086ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	dc41      	bgt.n	8008776 <_dtoa_r+0x906>
 80086f2:	e063      	b.n	80087bc <_dtoa_r+0x94c>
 80086f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086fa:	e746      	b.n	800858a <_dtoa_r+0x71a>
 80086fc:	9b07      	ldr	r3, [sp, #28]
 80086fe:	1e5c      	subs	r4, r3, #1
 8008700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008702:	42a3      	cmp	r3, r4
 8008704:	bfbf      	itttt	lt
 8008706:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008708:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800870a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800870c:	1ae3      	sublt	r3, r4, r3
 800870e:	bfb4      	ite	lt
 8008710:	18d2      	addlt	r2, r2, r3
 8008712:	1b1c      	subge	r4, r3, r4
 8008714:	9b07      	ldr	r3, [sp, #28]
 8008716:	bfbc      	itt	lt
 8008718:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800871a:	2400      	movlt	r4, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfb5      	itete	lt
 8008720:	eba8 0603 	sublt.w	r6, r8, r3
 8008724:	9b07      	ldrge	r3, [sp, #28]
 8008726:	2300      	movlt	r3, #0
 8008728:	4646      	movge	r6, r8
 800872a:	e730      	b.n	800858e <_dtoa_r+0x71e>
 800872c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800872e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008730:	4646      	mov	r6, r8
 8008732:	e735      	b.n	80085a0 <_dtoa_r+0x730>
 8008734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008736:	e75c      	b.n	80085f2 <_dtoa_r+0x782>
 8008738:	2300      	movs	r3, #0
 800873a:	e788      	b.n	800864e <_dtoa_r+0x7de>
 800873c:	3fe00000 	.word	0x3fe00000
 8008740:	40240000 	.word	0x40240000
 8008744:	40140000 	.word	0x40140000
 8008748:	9b02      	ldr	r3, [sp, #8]
 800874a:	e780      	b.n	800864e <_dtoa_r+0x7de>
 800874c:	2300      	movs	r3, #0
 800874e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008750:	e782      	b.n	8008658 <_dtoa_r+0x7e8>
 8008752:	d099      	beq.n	8008688 <_dtoa_r+0x818>
 8008754:	9a08      	ldr	r2, [sp, #32]
 8008756:	331c      	adds	r3, #28
 8008758:	441a      	add	r2, r3
 800875a:	4498      	add	r8, r3
 800875c:	441e      	add	r6, r3
 800875e:	9208      	str	r2, [sp, #32]
 8008760:	e792      	b.n	8008688 <_dtoa_r+0x818>
 8008762:	4603      	mov	r3, r0
 8008764:	e7f6      	b.n	8008754 <_dtoa_r+0x8e4>
 8008766:	9b07      	ldr	r3, [sp, #28]
 8008768:	9704      	str	r7, [sp, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	dc20      	bgt.n	80087b0 <_dtoa_r+0x940>
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008772:	2b02      	cmp	r3, #2
 8008774:	dd1e      	ble.n	80087b4 <_dtoa_r+0x944>
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	f47f aec0 	bne.w	80084fe <_dtoa_r+0x68e>
 800877e:	4621      	mov	r1, r4
 8008780:	2205      	movs	r2, #5
 8008782:	4658      	mov	r0, fp
 8008784:	f000 fa9a 	bl	8008cbc <__multadd>
 8008788:	4601      	mov	r1, r0
 800878a:	4604      	mov	r4, r0
 800878c:	4648      	mov	r0, r9
 800878e:	f000 fcad 	bl	80090ec <__mcmp>
 8008792:	2800      	cmp	r0, #0
 8008794:	f77f aeb3 	ble.w	80084fe <_dtoa_r+0x68e>
 8008798:	4656      	mov	r6, sl
 800879a:	2331      	movs	r3, #49	@ 0x31
 800879c:	f806 3b01 	strb.w	r3, [r6], #1
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	3301      	adds	r3, #1
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	e6ae      	b.n	8008506 <_dtoa_r+0x696>
 80087a8:	9c07      	ldr	r4, [sp, #28]
 80087aa:	9704      	str	r7, [sp, #16]
 80087ac:	4625      	mov	r5, r4
 80087ae:	e7f3      	b.n	8008798 <_dtoa_r+0x928>
 80087b0:	9b07      	ldr	r3, [sp, #28]
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8104 	beq.w	80089c4 <_dtoa_r+0xb54>
 80087bc:	2e00      	cmp	r6, #0
 80087be:	dd05      	ble.n	80087cc <_dtoa_r+0x95c>
 80087c0:	4629      	mov	r1, r5
 80087c2:	4632      	mov	r2, r6
 80087c4:	4658      	mov	r0, fp
 80087c6:	f000 fc25 	bl	8009014 <__lshift>
 80087ca:	4605      	mov	r5, r0
 80087cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d05a      	beq.n	8008888 <_dtoa_r+0xa18>
 80087d2:	6869      	ldr	r1, [r5, #4]
 80087d4:	4658      	mov	r0, fp
 80087d6:	f000 fa0f 	bl	8008bf8 <_Balloc>
 80087da:	4606      	mov	r6, r0
 80087dc:	b928      	cbnz	r0, 80087ea <_dtoa_r+0x97a>
 80087de:	4b84      	ldr	r3, [pc, #528]	@ (80089f0 <_dtoa_r+0xb80>)
 80087e0:	4602      	mov	r2, r0
 80087e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087e6:	f7ff bb5a 	b.w	8007e9e <_dtoa_r+0x2e>
 80087ea:	692a      	ldr	r2, [r5, #16]
 80087ec:	3202      	adds	r2, #2
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	f105 010c 	add.w	r1, r5, #12
 80087f4:	300c      	adds	r0, #12
 80087f6:	f000 fe3d 	bl	8009474 <memcpy>
 80087fa:	2201      	movs	r2, #1
 80087fc:	4631      	mov	r1, r6
 80087fe:	4658      	mov	r0, fp
 8008800:	f000 fc08 	bl	8009014 <__lshift>
 8008804:	f10a 0301 	add.w	r3, sl, #1
 8008808:	9307      	str	r3, [sp, #28]
 800880a:	9b00      	ldr	r3, [sp, #0]
 800880c:	4453      	add	r3, sl
 800880e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008810:	9b02      	ldr	r3, [sp, #8]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	462f      	mov	r7, r5
 8008818:	930a      	str	r3, [sp, #40]	@ 0x28
 800881a:	4605      	mov	r5, r0
 800881c:	9b07      	ldr	r3, [sp, #28]
 800881e:	4621      	mov	r1, r4
 8008820:	3b01      	subs	r3, #1
 8008822:	4648      	mov	r0, r9
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	f7ff fa98 	bl	8007d5a <quorem>
 800882a:	4639      	mov	r1, r7
 800882c:	9002      	str	r0, [sp, #8]
 800882e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008832:	4648      	mov	r0, r9
 8008834:	f000 fc5a 	bl	80090ec <__mcmp>
 8008838:	462a      	mov	r2, r5
 800883a:	9008      	str	r0, [sp, #32]
 800883c:	4621      	mov	r1, r4
 800883e:	4658      	mov	r0, fp
 8008840:	f000 fc70 	bl	8009124 <__mdiff>
 8008844:	68c2      	ldr	r2, [r0, #12]
 8008846:	4606      	mov	r6, r0
 8008848:	bb02      	cbnz	r2, 800888c <_dtoa_r+0xa1c>
 800884a:	4601      	mov	r1, r0
 800884c:	4648      	mov	r0, r9
 800884e:	f000 fc4d 	bl	80090ec <__mcmp>
 8008852:	4602      	mov	r2, r0
 8008854:	4631      	mov	r1, r6
 8008856:	4658      	mov	r0, fp
 8008858:	920e      	str	r2, [sp, #56]	@ 0x38
 800885a:	f000 fa0d 	bl	8008c78 <_Bfree>
 800885e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008862:	9e07      	ldr	r6, [sp, #28]
 8008864:	ea43 0102 	orr.w	r1, r3, r2
 8008868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800886a:	4319      	orrs	r1, r3
 800886c:	d110      	bne.n	8008890 <_dtoa_r+0xa20>
 800886e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008872:	d029      	beq.n	80088c8 <_dtoa_r+0xa58>
 8008874:	9b08      	ldr	r3, [sp, #32]
 8008876:	2b00      	cmp	r3, #0
 8008878:	dd02      	ble.n	8008880 <_dtoa_r+0xa10>
 800887a:	9b02      	ldr	r3, [sp, #8]
 800887c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008880:	9b00      	ldr	r3, [sp, #0]
 8008882:	f883 8000 	strb.w	r8, [r3]
 8008886:	e63f      	b.n	8008508 <_dtoa_r+0x698>
 8008888:	4628      	mov	r0, r5
 800888a:	e7bb      	b.n	8008804 <_dtoa_r+0x994>
 800888c:	2201      	movs	r2, #1
 800888e:	e7e1      	b.n	8008854 <_dtoa_r+0x9e4>
 8008890:	9b08      	ldr	r3, [sp, #32]
 8008892:	2b00      	cmp	r3, #0
 8008894:	db04      	blt.n	80088a0 <_dtoa_r+0xa30>
 8008896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008898:	430b      	orrs	r3, r1
 800889a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800889c:	430b      	orrs	r3, r1
 800889e:	d120      	bne.n	80088e2 <_dtoa_r+0xa72>
 80088a0:	2a00      	cmp	r2, #0
 80088a2:	dded      	ble.n	8008880 <_dtoa_r+0xa10>
 80088a4:	4649      	mov	r1, r9
 80088a6:	2201      	movs	r2, #1
 80088a8:	4658      	mov	r0, fp
 80088aa:	f000 fbb3 	bl	8009014 <__lshift>
 80088ae:	4621      	mov	r1, r4
 80088b0:	4681      	mov	r9, r0
 80088b2:	f000 fc1b 	bl	80090ec <__mcmp>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	dc03      	bgt.n	80088c2 <_dtoa_r+0xa52>
 80088ba:	d1e1      	bne.n	8008880 <_dtoa_r+0xa10>
 80088bc:	f018 0f01 	tst.w	r8, #1
 80088c0:	d0de      	beq.n	8008880 <_dtoa_r+0xa10>
 80088c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088c6:	d1d8      	bne.n	800887a <_dtoa_r+0xa0a>
 80088c8:	9a00      	ldr	r2, [sp, #0]
 80088ca:	2339      	movs	r3, #57	@ 0x39
 80088cc:	7013      	strb	r3, [r2, #0]
 80088ce:	4633      	mov	r3, r6
 80088d0:	461e      	mov	r6, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088d8:	2a39      	cmp	r2, #57	@ 0x39
 80088da:	d052      	beq.n	8008982 <_dtoa_r+0xb12>
 80088dc:	3201      	adds	r2, #1
 80088de:	701a      	strb	r2, [r3, #0]
 80088e0:	e612      	b.n	8008508 <_dtoa_r+0x698>
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	dd07      	ble.n	80088f6 <_dtoa_r+0xa86>
 80088e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088ea:	d0ed      	beq.n	80088c8 <_dtoa_r+0xa58>
 80088ec:	9a00      	ldr	r2, [sp, #0]
 80088ee:	f108 0301 	add.w	r3, r8, #1
 80088f2:	7013      	strb	r3, [r2, #0]
 80088f4:	e608      	b.n	8008508 <_dtoa_r+0x698>
 80088f6:	9b07      	ldr	r3, [sp, #28]
 80088f8:	9a07      	ldr	r2, [sp, #28]
 80088fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80088fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008900:	4293      	cmp	r3, r2
 8008902:	d028      	beq.n	8008956 <_dtoa_r+0xae6>
 8008904:	4649      	mov	r1, r9
 8008906:	2300      	movs	r3, #0
 8008908:	220a      	movs	r2, #10
 800890a:	4658      	mov	r0, fp
 800890c:	f000 f9d6 	bl	8008cbc <__multadd>
 8008910:	42af      	cmp	r7, r5
 8008912:	4681      	mov	r9, r0
 8008914:	f04f 0300 	mov.w	r3, #0
 8008918:	f04f 020a 	mov.w	r2, #10
 800891c:	4639      	mov	r1, r7
 800891e:	4658      	mov	r0, fp
 8008920:	d107      	bne.n	8008932 <_dtoa_r+0xac2>
 8008922:	f000 f9cb 	bl	8008cbc <__multadd>
 8008926:	4607      	mov	r7, r0
 8008928:	4605      	mov	r5, r0
 800892a:	9b07      	ldr	r3, [sp, #28]
 800892c:	3301      	adds	r3, #1
 800892e:	9307      	str	r3, [sp, #28]
 8008930:	e774      	b.n	800881c <_dtoa_r+0x9ac>
 8008932:	f000 f9c3 	bl	8008cbc <__multadd>
 8008936:	4629      	mov	r1, r5
 8008938:	4607      	mov	r7, r0
 800893a:	2300      	movs	r3, #0
 800893c:	220a      	movs	r2, #10
 800893e:	4658      	mov	r0, fp
 8008940:	f000 f9bc 	bl	8008cbc <__multadd>
 8008944:	4605      	mov	r5, r0
 8008946:	e7f0      	b.n	800892a <_dtoa_r+0xaba>
 8008948:	9b00      	ldr	r3, [sp, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	bfcc      	ite	gt
 800894e:	461e      	movgt	r6, r3
 8008950:	2601      	movle	r6, #1
 8008952:	4456      	add	r6, sl
 8008954:	2700      	movs	r7, #0
 8008956:	4649      	mov	r1, r9
 8008958:	2201      	movs	r2, #1
 800895a:	4658      	mov	r0, fp
 800895c:	f000 fb5a 	bl	8009014 <__lshift>
 8008960:	4621      	mov	r1, r4
 8008962:	4681      	mov	r9, r0
 8008964:	f000 fbc2 	bl	80090ec <__mcmp>
 8008968:	2800      	cmp	r0, #0
 800896a:	dcb0      	bgt.n	80088ce <_dtoa_r+0xa5e>
 800896c:	d102      	bne.n	8008974 <_dtoa_r+0xb04>
 800896e:	f018 0f01 	tst.w	r8, #1
 8008972:	d1ac      	bne.n	80088ce <_dtoa_r+0xa5e>
 8008974:	4633      	mov	r3, r6
 8008976:	461e      	mov	r6, r3
 8008978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800897c:	2a30      	cmp	r2, #48	@ 0x30
 800897e:	d0fa      	beq.n	8008976 <_dtoa_r+0xb06>
 8008980:	e5c2      	b.n	8008508 <_dtoa_r+0x698>
 8008982:	459a      	cmp	sl, r3
 8008984:	d1a4      	bne.n	80088d0 <_dtoa_r+0xa60>
 8008986:	9b04      	ldr	r3, [sp, #16]
 8008988:	3301      	adds	r3, #1
 800898a:	9304      	str	r3, [sp, #16]
 800898c:	2331      	movs	r3, #49	@ 0x31
 800898e:	f88a 3000 	strb.w	r3, [sl]
 8008992:	e5b9      	b.n	8008508 <_dtoa_r+0x698>
 8008994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008996:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80089f4 <_dtoa_r+0xb84>
 800899a:	b11b      	cbz	r3, 80089a4 <_dtoa_r+0xb34>
 800899c:	f10a 0308 	add.w	r3, sl, #8
 80089a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80089a2:	6013      	str	r3, [r2, #0]
 80089a4:	4650      	mov	r0, sl
 80089a6:	b019      	add	sp, #100	@ 0x64
 80089a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	f77f ae37 	ble.w	8008622 <_dtoa_r+0x7b2>
 80089b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089b8:	2001      	movs	r0, #1
 80089ba:	e655      	b.n	8008668 <_dtoa_r+0x7f8>
 80089bc:	9b00      	ldr	r3, [sp, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f77f aed6 	ble.w	8008770 <_dtoa_r+0x900>
 80089c4:	4656      	mov	r6, sl
 80089c6:	4621      	mov	r1, r4
 80089c8:	4648      	mov	r0, r9
 80089ca:	f7ff f9c6 	bl	8007d5a <quorem>
 80089ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089d2:	f806 8b01 	strb.w	r8, [r6], #1
 80089d6:	9b00      	ldr	r3, [sp, #0]
 80089d8:	eba6 020a 	sub.w	r2, r6, sl
 80089dc:	4293      	cmp	r3, r2
 80089de:	ddb3      	ble.n	8008948 <_dtoa_r+0xad8>
 80089e0:	4649      	mov	r1, r9
 80089e2:	2300      	movs	r3, #0
 80089e4:	220a      	movs	r2, #10
 80089e6:	4658      	mov	r0, fp
 80089e8:	f000 f968 	bl	8008cbc <__multadd>
 80089ec:	4681      	mov	r9, r0
 80089ee:	e7ea      	b.n	80089c6 <_dtoa_r+0xb56>
 80089f0:	08009b80 	.word	0x08009b80
 80089f4:	08009b04 	.word	0x08009b04

080089f8 <_free_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4605      	mov	r5, r0
 80089fc:	2900      	cmp	r1, #0
 80089fe:	d041      	beq.n	8008a84 <_free_r+0x8c>
 8008a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a04:	1f0c      	subs	r4, r1, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bfb8      	it	lt
 8008a0a:	18e4      	addlt	r4, r4, r3
 8008a0c:	f000 f8e8 	bl	8008be0 <__malloc_lock>
 8008a10:	4a1d      	ldr	r2, [pc, #116]	@ (8008a88 <_free_r+0x90>)
 8008a12:	6813      	ldr	r3, [r2, #0]
 8008a14:	b933      	cbnz	r3, 8008a24 <_free_r+0x2c>
 8008a16:	6063      	str	r3, [r4, #4]
 8008a18:	6014      	str	r4, [r2, #0]
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a20:	f000 b8e4 	b.w	8008bec <__malloc_unlock>
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	d908      	bls.n	8008a3a <_free_r+0x42>
 8008a28:	6820      	ldr	r0, [r4, #0]
 8008a2a:	1821      	adds	r1, r4, r0
 8008a2c:	428b      	cmp	r3, r1
 8008a2e:	bf01      	itttt	eq
 8008a30:	6819      	ldreq	r1, [r3, #0]
 8008a32:	685b      	ldreq	r3, [r3, #4]
 8008a34:	1809      	addeq	r1, r1, r0
 8008a36:	6021      	streq	r1, [r4, #0]
 8008a38:	e7ed      	b.n	8008a16 <_free_r+0x1e>
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	b10b      	cbz	r3, 8008a44 <_free_r+0x4c>
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	d9fa      	bls.n	8008a3a <_free_r+0x42>
 8008a44:	6811      	ldr	r1, [r2, #0]
 8008a46:	1850      	adds	r0, r2, r1
 8008a48:	42a0      	cmp	r0, r4
 8008a4a:	d10b      	bne.n	8008a64 <_free_r+0x6c>
 8008a4c:	6820      	ldr	r0, [r4, #0]
 8008a4e:	4401      	add	r1, r0
 8008a50:	1850      	adds	r0, r2, r1
 8008a52:	4283      	cmp	r3, r0
 8008a54:	6011      	str	r1, [r2, #0]
 8008a56:	d1e0      	bne.n	8008a1a <_free_r+0x22>
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	6053      	str	r3, [r2, #4]
 8008a5e:	4408      	add	r0, r1
 8008a60:	6010      	str	r0, [r2, #0]
 8008a62:	e7da      	b.n	8008a1a <_free_r+0x22>
 8008a64:	d902      	bls.n	8008a6c <_free_r+0x74>
 8008a66:	230c      	movs	r3, #12
 8008a68:	602b      	str	r3, [r5, #0]
 8008a6a:	e7d6      	b.n	8008a1a <_free_r+0x22>
 8008a6c:	6820      	ldr	r0, [r4, #0]
 8008a6e:	1821      	adds	r1, r4, r0
 8008a70:	428b      	cmp	r3, r1
 8008a72:	bf04      	itt	eq
 8008a74:	6819      	ldreq	r1, [r3, #0]
 8008a76:	685b      	ldreq	r3, [r3, #4]
 8008a78:	6063      	str	r3, [r4, #4]
 8008a7a:	bf04      	itt	eq
 8008a7c:	1809      	addeq	r1, r1, r0
 8008a7e:	6021      	streq	r1, [r4, #0]
 8008a80:	6054      	str	r4, [r2, #4]
 8008a82:	e7ca      	b.n	8008a1a <_free_r+0x22>
 8008a84:	bd38      	pop	{r3, r4, r5, pc}
 8008a86:	bf00      	nop
 8008a88:	200007b0 	.word	0x200007b0

08008a8c <malloc>:
 8008a8c:	4b02      	ldr	r3, [pc, #8]	@ (8008a98 <malloc+0xc>)
 8008a8e:	4601      	mov	r1, r0
 8008a90:	6818      	ldr	r0, [r3, #0]
 8008a92:	f000 b825 	b.w	8008ae0 <_malloc_r>
 8008a96:	bf00      	nop
 8008a98:	200001b0 	.word	0x200001b0

08008a9c <sbrk_aligned>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4e0f      	ldr	r6, [pc, #60]	@ (8008adc <sbrk_aligned+0x40>)
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	6831      	ldr	r1, [r6, #0]
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	b911      	cbnz	r1, 8008aae <sbrk_aligned+0x12>
 8008aa8:	f000 fcd4 	bl	8009454 <_sbrk_r>
 8008aac:	6030      	str	r0, [r6, #0]
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f000 fccf 	bl	8009454 <_sbrk_r>
 8008ab6:	1c43      	adds	r3, r0, #1
 8008ab8:	d103      	bne.n	8008ac2 <sbrk_aligned+0x26>
 8008aba:	f04f 34ff 	mov.w	r4, #4294967295
 8008abe:	4620      	mov	r0, r4
 8008ac0:	bd70      	pop	{r4, r5, r6, pc}
 8008ac2:	1cc4      	adds	r4, r0, #3
 8008ac4:	f024 0403 	bic.w	r4, r4, #3
 8008ac8:	42a0      	cmp	r0, r4
 8008aca:	d0f8      	beq.n	8008abe <sbrk_aligned+0x22>
 8008acc:	1a21      	subs	r1, r4, r0
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f000 fcc0 	bl	8009454 <_sbrk_r>
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d1f2      	bne.n	8008abe <sbrk_aligned+0x22>
 8008ad8:	e7ef      	b.n	8008aba <sbrk_aligned+0x1e>
 8008ada:	bf00      	nop
 8008adc:	200007ac 	.word	0x200007ac

08008ae0 <_malloc_r>:
 8008ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae4:	1ccd      	adds	r5, r1, #3
 8008ae6:	f025 0503 	bic.w	r5, r5, #3
 8008aea:	3508      	adds	r5, #8
 8008aec:	2d0c      	cmp	r5, #12
 8008aee:	bf38      	it	cc
 8008af0:	250c      	movcc	r5, #12
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	4606      	mov	r6, r0
 8008af6:	db01      	blt.n	8008afc <_malloc_r+0x1c>
 8008af8:	42a9      	cmp	r1, r5
 8008afa:	d904      	bls.n	8008b06 <_malloc_r+0x26>
 8008afc:	230c      	movs	r3, #12
 8008afe:	6033      	str	r3, [r6, #0]
 8008b00:	2000      	movs	r0, #0
 8008b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bdc <_malloc_r+0xfc>
 8008b0a:	f000 f869 	bl	8008be0 <__malloc_lock>
 8008b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b12:	461c      	mov	r4, r3
 8008b14:	bb44      	cbnz	r4, 8008b68 <_malloc_r+0x88>
 8008b16:	4629      	mov	r1, r5
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7ff ffbf 	bl	8008a9c <sbrk_aligned>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	4604      	mov	r4, r0
 8008b22:	d158      	bne.n	8008bd6 <_malloc_r+0xf6>
 8008b24:	f8d8 4000 	ldr.w	r4, [r8]
 8008b28:	4627      	mov	r7, r4
 8008b2a:	2f00      	cmp	r7, #0
 8008b2c:	d143      	bne.n	8008bb6 <_malloc_r+0xd6>
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	d04b      	beq.n	8008bca <_malloc_r+0xea>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	4639      	mov	r1, r7
 8008b36:	4630      	mov	r0, r6
 8008b38:	eb04 0903 	add.w	r9, r4, r3
 8008b3c:	f000 fc8a 	bl	8009454 <_sbrk_r>
 8008b40:	4581      	cmp	r9, r0
 8008b42:	d142      	bne.n	8008bca <_malloc_r+0xea>
 8008b44:	6821      	ldr	r1, [r4, #0]
 8008b46:	1a6d      	subs	r5, r5, r1
 8008b48:	4629      	mov	r1, r5
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7ff ffa6 	bl	8008a9c <sbrk_aligned>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d03a      	beq.n	8008bca <_malloc_r+0xea>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	442b      	add	r3, r5
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	bb62      	cbnz	r2, 8008bbc <_malloc_r+0xdc>
 8008b62:	f8c8 7000 	str.w	r7, [r8]
 8008b66:	e00f      	b.n	8008b88 <_malloc_r+0xa8>
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	1b52      	subs	r2, r2, r5
 8008b6c:	d420      	bmi.n	8008bb0 <_malloc_r+0xd0>
 8008b6e:	2a0b      	cmp	r2, #11
 8008b70:	d917      	bls.n	8008ba2 <_malloc_r+0xc2>
 8008b72:	1961      	adds	r1, r4, r5
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	6025      	str	r5, [r4, #0]
 8008b78:	bf18      	it	ne
 8008b7a:	6059      	strne	r1, [r3, #4]
 8008b7c:	6863      	ldr	r3, [r4, #4]
 8008b7e:	bf08      	it	eq
 8008b80:	f8c8 1000 	streq.w	r1, [r8]
 8008b84:	5162      	str	r2, [r4, r5]
 8008b86:	604b      	str	r3, [r1, #4]
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 f82f 	bl	8008bec <__malloc_unlock>
 8008b8e:	f104 000b 	add.w	r0, r4, #11
 8008b92:	1d23      	adds	r3, r4, #4
 8008b94:	f020 0007 	bic.w	r0, r0, #7
 8008b98:	1ac2      	subs	r2, r0, r3
 8008b9a:	bf1c      	itt	ne
 8008b9c:	1a1b      	subne	r3, r3, r0
 8008b9e:	50a3      	strne	r3, [r4, r2]
 8008ba0:	e7af      	b.n	8008b02 <_malloc_r+0x22>
 8008ba2:	6862      	ldr	r2, [r4, #4]
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	bf0c      	ite	eq
 8008ba8:	f8c8 2000 	streq.w	r2, [r8]
 8008bac:	605a      	strne	r2, [r3, #4]
 8008bae:	e7eb      	b.n	8008b88 <_malloc_r+0xa8>
 8008bb0:	4623      	mov	r3, r4
 8008bb2:	6864      	ldr	r4, [r4, #4]
 8008bb4:	e7ae      	b.n	8008b14 <_malloc_r+0x34>
 8008bb6:	463c      	mov	r4, r7
 8008bb8:	687f      	ldr	r7, [r7, #4]
 8008bba:	e7b6      	b.n	8008b2a <_malloc_r+0x4a>
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d1fb      	bne.n	8008bbc <_malloc_r+0xdc>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	6053      	str	r3, [r2, #4]
 8008bc8:	e7de      	b.n	8008b88 <_malloc_r+0xa8>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	6033      	str	r3, [r6, #0]
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f000 f80c 	bl	8008bec <__malloc_unlock>
 8008bd4:	e794      	b.n	8008b00 <_malloc_r+0x20>
 8008bd6:	6005      	str	r5, [r0, #0]
 8008bd8:	e7d6      	b.n	8008b88 <_malloc_r+0xa8>
 8008bda:	bf00      	nop
 8008bdc:	200007b0 	.word	0x200007b0

08008be0 <__malloc_lock>:
 8008be0:	4801      	ldr	r0, [pc, #4]	@ (8008be8 <__malloc_lock+0x8>)
 8008be2:	f7ff b8b8 	b.w	8007d56 <__retarget_lock_acquire_recursive>
 8008be6:	bf00      	nop
 8008be8:	200007a8 	.word	0x200007a8

08008bec <__malloc_unlock>:
 8008bec:	4801      	ldr	r0, [pc, #4]	@ (8008bf4 <__malloc_unlock+0x8>)
 8008bee:	f7ff b8b3 	b.w	8007d58 <__retarget_lock_release_recursive>
 8008bf2:	bf00      	nop
 8008bf4:	200007a8 	.word	0x200007a8

08008bf8 <_Balloc>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	69c6      	ldr	r6, [r0, #28]
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	460d      	mov	r5, r1
 8008c00:	b976      	cbnz	r6, 8008c20 <_Balloc+0x28>
 8008c02:	2010      	movs	r0, #16
 8008c04:	f7ff ff42 	bl	8008a8c <malloc>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	61e0      	str	r0, [r4, #28]
 8008c0c:	b920      	cbnz	r0, 8008c18 <_Balloc+0x20>
 8008c0e:	4b18      	ldr	r3, [pc, #96]	@ (8008c70 <_Balloc+0x78>)
 8008c10:	4818      	ldr	r0, [pc, #96]	@ (8008c74 <_Balloc+0x7c>)
 8008c12:	216b      	movs	r1, #107	@ 0x6b
 8008c14:	f000 fc3c 	bl	8009490 <__assert_func>
 8008c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c1c:	6006      	str	r6, [r0, #0]
 8008c1e:	60c6      	str	r6, [r0, #12]
 8008c20:	69e6      	ldr	r6, [r4, #28]
 8008c22:	68f3      	ldr	r3, [r6, #12]
 8008c24:	b183      	cbz	r3, 8008c48 <_Balloc+0x50>
 8008c26:	69e3      	ldr	r3, [r4, #28]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c2e:	b9b8      	cbnz	r0, 8008c60 <_Balloc+0x68>
 8008c30:	2101      	movs	r1, #1
 8008c32:	fa01 f605 	lsl.w	r6, r1, r5
 8008c36:	1d72      	adds	r2, r6, #5
 8008c38:	0092      	lsls	r2, r2, #2
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fc46 	bl	80094cc <_calloc_r>
 8008c40:	b160      	cbz	r0, 8008c5c <_Balloc+0x64>
 8008c42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c46:	e00e      	b.n	8008c66 <_Balloc+0x6e>
 8008c48:	2221      	movs	r2, #33	@ 0x21
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 fc3d 	bl	80094cc <_calloc_r>
 8008c52:	69e3      	ldr	r3, [r4, #28]
 8008c54:	60f0      	str	r0, [r6, #12]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e4      	bne.n	8008c26 <_Balloc+0x2e>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	6802      	ldr	r2, [r0, #0]
 8008c62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c66:	2300      	movs	r3, #0
 8008c68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c6c:	e7f7      	b.n	8008c5e <_Balloc+0x66>
 8008c6e:	bf00      	nop
 8008c70:	08009b11 	.word	0x08009b11
 8008c74:	08009b91 	.word	0x08009b91

08008c78 <_Bfree>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	69c6      	ldr	r6, [r0, #28]
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	b976      	cbnz	r6, 8008ca0 <_Bfree+0x28>
 8008c82:	2010      	movs	r0, #16
 8008c84:	f7ff ff02 	bl	8008a8c <malloc>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	61e8      	str	r0, [r5, #28]
 8008c8c:	b920      	cbnz	r0, 8008c98 <_Bfree+0x20>
 8008c8e:	4b09      	ldr	r3, [pc, #36]	@ (8008cb4 <_Bfree+0x3c>)
 8008c90:	4809      	ldr	r0, [pc, #36]	@ (8008cb8 <_Bfree+0x40>)
 8008c92:	218f      	movs	r1, #143	@ 0x8f
 8008c94:	f000 fbfc 	bl	8009490 <__assert_func>
 8008c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c9c:	6006      	str	r6, [r0, #0]
 8008c9e:	60c6      	str	r6, [r0, #12]
 8008ca0:	b13c      	cbz	r4, 8008cb2 <_Bfree+0x3a>
 8008ca2:	69eb      	ldr	r3, [r5, #28]
 8008ca4:	6862      	ldr	r2, [r4, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cac:	6021      	str	r1, [r4, #0]
 8008cae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}
 8008cb4:	08009b11 	.word	0x08009b11
 8008cb8:	08009b91 	.word	0x08009b91

08008cbc <__multadd>:
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	690d      	ldr	r5, [r1, #16]
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	461e      	mov	r6, r3
 8008cc8:	f101 0c14 	add.w	ip, r1, #20
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f8dc 3000 	ldr.w	r3, [ip]
 8008cd2:	b299      	uxth	r1, r3
 8008cd4:	fb02 6101 	mla	r1, r2, r1, r6
 8008cd8:	0c1e      	lsrs	r6, r3, #16
 8008cda:	0c0b      	lsrs	r3, r1, #16
 8008cdc:	fb02 3306 	mla	r3, r2, r6, r3
 8008ce0:	b289      	uxth	r1, r1
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ce8:	4285      	cmp	r5, r0
 8008cea:	f84c 1b04 	str.w	r1, [ip], #4
 8008cee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cf2:	dcec      	bgt.n	8008cce <__multadd+0x12>
 8008cf4:	b30e      	cbz	r6, 8008d3a <__multadd+0x7e>
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	42ab      	cmp	r3, r5
 8008cfa:	dc19      	bgt.n	8008d30 <__multadd+0x74>
 8008cfc:	6861      	ldr	r1, [r4, #4]
 8008cfe:	4638      	mov	r0, r7
 8008d00:	3101      	adds	r1, #1
 8008d02:	f7ff ff79 	bl	8008bf8 <_Balloc>
 8008d06:	4680      	mov	r8, r0
 8008d08:	b928      	cbnz	r0, 8008d16 <__multadd+0x5a>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d40 <__multadd+0x84>)
 8008d0e:	480d      	ldr	r0, [pc, #52]	@ (8008d44 <__multadd+0x88>)
 8008d10:	21ba      	movs	r1, #186	@ 0xba
 8008d12:	f000 fbbd 	bl	8009490 <__assert_func>
 8008d16:	6922      	ldr	r2, [r4, #16]
 8008d18:	3202      	adds	r2, #2
 8008d1a:	f104 010c 	add.w	r1, r4, #12
 8008d1e:	0092      	lsls	r2, r2, #2
 8008d20:	300c      	adds	r0, #12
 8008d22:	f000 fba7 	bl	8009474 <memcpy>
 8008d26:	4621      	mov	r1, r4
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f7ff ffa5 	bl	8008c78 <_Bfree>
 8008d2e:	4644      	mov	r4, r8
 8008d30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d34:	3501      	adds	r5, #1
 8008d36:	615e      	str	r6, [r3, #20]
 8008d38:	6125      	str	r5, [r4, #16]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d40:	08009b80 	.word	0x08009b80
 8008d44:	08009b91 	.word	0x08009b91

08008d48 <__hi0bits>:
 8008d48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	bf36      	itet	cc
 8008d50:	0403      	lslcc	r3, r0, #16
 8008d52:	2000      	movcs	r0, #0
 8008d54:	2010      	movcc	r0, #16
 8008d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d5a:	bf3c      	itt	cc
 8008d5c:	021b      	lslcc	r3, r3, #8
 8008d5e:	3008      	addcc	r0, #8
 8008d60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d64:	bf3c      	itt	cc
 8008d66:	011b      	lslcc	r3, r3, #4
 8008d68:	3004      	addcc	r0, #4
 8008d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d6e:	bf3c      	itt	cc
 8008d70:	009b      	lslcc	r3, r3, #2
 8008d72:	3002      	addcc	r0, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	db05      	blt.n	8008d84 <__hi0bits+0x3c>
 8008d78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d7c:	f100 0001 	add.w	r0, r0, #1
 8008d80:	bf08      	it	eq
 8008d82:	2020      	moveq	r0, #32
 8008d84:	4770      	bx	lr

08008d86 <__lo0bits>:
 8008d86:	6803      	ldr	r3, [r0, #0]
 8008d88:	4602      	mov	r2, r0
 8008d8a:	f013 0007 	ands.w	r0, r3, #7
 8008d8e:	d00b      	beq.n	8008da8 <__lo0bits+0x22>
 8008d90:	07d9      	lsls	r1, r3, #31
 8008d92:	d421      	bmi.n	8008dd8 <__lo0bits+0x52>
 8008d94:	0798      	lsls	r0, r3, #30
 8008d96:	bf49      	itett	mi
 8008d98:	085b      	lsrmi	r3, r3, #1
 8008d9a:	089b      	lsrpl	r3, r3, #2
 8008d9c:	2001      	movmi	r0, #1
 8008d9e:	6013      	strmi	r3, [r2, #0]
 8008da0:	bf5c      	itt	pl
 8008da2:	6013      	strpl	r3, [r2, #0]
 8008da4:	2002      	movpl	r0, #2
 8008da6:	4770      	bx	lr
 8008da8:	b299      	uxth	r1, r3
 8008daa:	b909      	cbnz	r1, 8008db0 <__lo0bits+0x2a>
 8008dac:	0c1b      	lsrs	r3, r3, #16
 8008dae:	2010      	movs	r0, #16
 8008db0:	b2d9      	uxtb	r1, r3
 8008db2:	b909      	cbnz	r1, 8008db8 <__lo0bits+0x32>
 8008db4:	3008      	adds	r0, #8
 8008db6:	0a1b      	lsrs	r3, r3, #8
 8008db8:	0719      	lsls	r1, r3, #28
 8008dba:	bf04      	itt	eq
 8008dbc:	091b      	lsreq	r3, r3, #4
 8008dbe:	3004      	addeq	r0, #4
 8008dc0:	0799      	lsls	r1, r3, #30
 8008dc2:	bf04      	itt	eq
 8008dc4:	089b      	lsreq	r3, r3, #2
 8008dc6:	3002      	addeq	r0, #2
 8008dc8:	07d9      	lsls	r1, r3, #31
 8008dca:	d403      	bmi.n	8008dd4 <__lo0bits+0x4e>
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	f100 0001 	add.w	r0, r0, #1
 8008dd2:	d003      	beq.n	8008ddc <__lo0bits+0x56>
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	4770      	bx	lr
 8008dd8:	2000      	movs	r0, #0
 8008dda:	4770      	bx	lr
 8008ddc:	2020      	movs	r0, #32
 8008dde:	4770      	bx	lr

08008de0 <__i2b>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	460c      	mov	r4, r1
 8008de4:	2101      	movs	r1, #1
 8008de6:	f7ff ff07 	bl	8008bf8 <_Balloc>
 8008dea:	4602      	mov	r2, r0
 8008dec:	b928      	cbnz	r0, 8008dfa <__i2b+0x1a>
 8008dee:	4b05      	ldr	r3, [pc, #20]	@ (8008e04 <__i2b+0x24>)
 8008df0:	4805      	ldr	r0, [pc, #20]	@ (8008e08 <__i2b+0x28>)
 8008df2:	f240 1145 	movw	r1, #325	@ 0x145
 8008df6:	f000 fb4b 	bl	8009490 <__assert_func>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	6144      	str	r4, [r0, #20]
 8008dfe:	6103      	str	r3, [r0, #16]
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	bf00      	nop
 8008e04:	08009b80 	.word	0x08009b80
 8008e08:	08009b91 	.word	0x08009b91

08008e0c <__multiply>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	4614      	mov	r4, r2
 8008e12:	690a      	ldr	r2, [r1, #16]
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	bfa8      	it	ge
 8008e1a:	4623      	movge	r3, r4
 8008e1c:	460f      	mov	r7, r1
 8008e1e:	bfa4      	itt	ge
 8008e20:	460c      	movge	r4, r1
 8008e22:	461f      	movge	r7, r3
 8008e24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e2c:	68a3      	ldr	r3, [r4, #8]
 8008e2e:	6861      	ldr	r1, [r4, #4]
 8008e30:	eb0a 0609 	add.w	r6, sl, r9
 8008e34:	42b3      	cmp	r3, r6
 8008e36:	b085      	sub	sp, #20
 8008e38:	bfb8      	it	lt
 8008e3a:	3101      	addlt	r1, #1
 8008e3c:	f7ff fedc 	bl	8008bf8 <_Balloc>
 8008e40:	b930      	cbnz	r0, 8008e50 <__multiply+0x44>
 8008e42:	4602      	mov	r2, r0
 8008e44:	4b44      	ldr	r3, [pc, #272]	@ (8008f58 <__multiply+0x14c>)
 8008e46:	4845      	ldr	r0, [pc, #276]	@ (8008f5c <__multiply+0x150>)
 8008e48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e4c:	f000 fb20 	bl	8009490 <__assert_func>
 8008e50:	f100 0514 	add.w	r5, r0, #20
 8008e54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e58:	462b      	mov	r3, r5
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	4543      	cmp	r3, r8
 8008e5e:	d321      	bcc.n	8008ea4 <__multiply+0x98>
 8008e60:	f107 0114 	add.w	r1, r7, #20
 8008e64:	f104 0214 	add.w	r2, r4, #20
 8008e68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e70:	9302      	str	r3, [sp, #8]
 8008e72:	1b13      	subs	r3, r2, r4
 8008e74:	3b15      	subs	r3, #21
 8008e76:	f023 0303 	bic.w	r3, r3, #3
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	f104 0715 	add.w	r7, r4, #21
 8008e80:	42ba      	cmp	r2, r7
 8008e82:	bf38      	it	cc
 8008e84:	2304      	movcc	r3, #4
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	9b02      	ldr	r3, [sp, #8]
 8008e8a:	9103      	str	r1, [sp, #12]
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	d80c      	bhi.n	8008eaa <__multiply+0x9e>
 8008e90:	2e00      	cmp	r6, #0
 8008e92:	dd03      	ble.n	8008e9c <__multiply+0x90>
 8008e94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d05b      	beq.n	8008f54 <__multiply+0x148>
 8008e9c:	6106      	str	r6, [r0, #16]
 8008e9e:	b005      	add	sp, #20
 8008ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea4:	f843 2b04 	str.w	r2, [r3], #4
 8008ea8:	e7d8      	b.n	8008e5c <__multiply+0x50>
 8008eaa:	f8b1 a000 	ldrh.w	sl, [r1]
 8008eae:	f1ba 0f00 	cmp.w	sl, #0
 8008eb2:	d024      	beq.n	8008efe <__multiply+0xf2>
 8008eb4:	f104 0e14 	add.w	lr, r4, #20
 8008eb8:	46a9      	mov	r9, r5
 8008eba:	f04f 0c00 	mov.w	ip, #0
 8008ebe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ec2:	f8d9 3000 	ldr.w	r3, [r9]
 8008ec6:	fa1f fb87 	uxth.w	fp, r7
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ed0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ed4:	f8d9 7000 	ldr.w	r7, [r9]
 8008ed8:	4463      	add	r3, ip
 8008eda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ede:	fb0a c70b 	mla	r7, sl, fp, ip
 8008ee2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008eec:	4572      	cmp	r2, lr
 8008eee:	f849 3b04 	str.w	r3, [r9], #4
 8008ef2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ef6:	d8e2      	bhi.n	8008ebe <__multiply+0xb2>
 8008ef8:	9b01      	ldr	r3, [sp, #4]
 8008efa:	f845 c003 	str.w	ip, [r5, r3]
 8008efe:	9b03      	ldr	r3, [sp, #12]
 8008f00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f04:	3104      	adds	r1, #4
 8008f06:	f1b9 0f00 	cmp.w	r9, #0
 8008f0a:	d021      	beq.n	8008f50 <__multiply+0x144>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	f104 0c14 	add.w	ip, r4, #20
 8008f12:	46ae      	mov	lr, r5
 8008f14:	f04f 0a00 	mov.w	sl, #0
 8008f18:	f8bc b000 	ldrh.w	fp, [ip]
 8008f1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f20:	fb09 770b 	mla	r7, r9, fp, r7
 8008f24:	4457      	add	r7, sl
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f2c:	f84e 3b04 	str.w	r3, [lr], #4
 8008f30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f38:	f8be 3000 	ldrh.w	r3, [lr]
 8008f3c:	fb09 330a 	mla	r3, r9, sl, r3
 8008f40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f44:	4562      	cmp	r2, ip
 8008f46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f4a:	d8e5      	bhi.n	8008f18 <__multiply+0x10c>
 8008f4c:	9f01      	ldr	r7, [sp, #4]
 8008f4e:	51eb      	str	r3, [r5, r7]
 8008f50:	3504      	adds	r5, #4
 8008f52:	e799      	b.n	8008e88 <__multiply+0x7c>
 8008f54:	3e01      	subs	r6, #1
 8008f56:	e79b      	b.n	8008e90 <__multiply+0x84>
 8008f58:	08009b80 	.word	0x08009b80
 8008f5c:	08009b91 	.word	0x08009b91

08008f60 <__pow5mult>:
 8008f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	4615      	mov	r5, r2
 8008f66:	f012 0203 	ands.w	r2, r2, #3
 8008f6a:	4607      	mov	r7, r0
 8008f6c:	460e      	mov	r6, r1
 8008f6e:	d007      	beq.n	8008f80 <__pow5mult+0x20>
 8008f70:	4c25      	ldr	r4, [pc, #148]	@ (8009008 <__pow5mult+0xa8>)
 8008f72:	3a01      	subs	r2, #1
 8008f74:	2300      	movs	r3, #0
 8008f76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f7a:	f7ff fe9f 	bl	8008cbc <__multadd>
 8008f7e:	4606      	mov	r6, r0
 8008f80:	10ad      	asrs	r5, r5, #2
 8008f82:	d03d      	beq.n	8009000 <__pow5mult+0xa0>
 8008f84:	69fc      	ldr	r4, [r7, #28]
 8008f86:	b97c      	cbnz	r4, 8008fa8 <__pow5mult+0x48>
 8008f88:	2010      	movs	r0, #16
 8008f8a:	f7ff fd7f 	bl	8008a8c <malloc>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	61f8      	str	r0, [r7, #28]
 8008f92:	b928      	cbnz	r0, 8008fa0 <__pow5mult+0x40>
 8008f94:	4b1d      	ldr	r3, [pc, #116]	@ (800900c <__pow5mult+0xac>)
 8008f96:	481e      	ldr	r0, [pc, #120]	@ (8009010 <__pow5mult+0xb0>)
 8008f98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f9c:	f000 fa78 	bl	8009490 <__assert_func>
 8008fa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fa4:	6004      	str	r4, [r0, #0]
 8008fa6:	60c4      	str	r4, [r0, #12]
 8008fa8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fb0:	b94c      	cbnz	r4, 8008fc6 <__pow5mult+0x66>
 8008fb2:	f240 2171 	movw	r1, #625	@ 0x271
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	f7ff ff12 	bl	8008de0 <__i2b>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	6003      	str	r3, [r0, #0]
 8008fc6:	f04f 0900 	mov.w	r9, #0
 8008fca:	07eb      	lsls	r3, r5, #31
 8008fcc:	d50a      	bpl.n	8008fe4 <__pow5mult+0x84>
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f7ff ff1a 	bl	8008e0c <__multiply>
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4680      	mov	r8, r0
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff fe4b 	bl	8008c78 <_Bfree>
 8008fe2:	4646      	mov	r6, r8
 8008fe4:	106d      	asrs	r5, r5, #1
 8008fe6:	d00b      	beq.n	8009000 <__pow5mult+0xa0>
 8008fe8:	6820      	ldr	r0, [r4, #0]
 8008fea:	b938      	cbnz	r0, 8008ffc <__pow5mult+0x9c>
 8008fec:	4622      	mov	r2, r4
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f7ff ff0b 	bl	8008e0c <__multiply>
 8008ff6:	6020      	str	r0, [r4, #0]
 8008ff8:	f8c0 9000 	str.w	r9, [r0]
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	e7e4      	b.n	8008fca <__pow5mult+0x6a>
 8009000:	4630      	mov	r0, r6
 8009002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009006:	bf00      	nop
 8009008:	08009bec 	.word	0x08009bec
 800900c:	08009b11 	.word	0x08009b11
 8009010:	08009b91 	.word	0x08009b91

08009014 <__lshift>:
 8009014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	460c      	mov	r4, r1
 800901a:	6849      	ldr	r1, [r1, #4]
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009022:	68a3      	ldr	r3, [r4, #8]
 8009024:	4607      	mov	r7, r0
 8009026:	4691      	mov	r9, r2
 8009028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800902c:	f108 0601 	add.w	r6, r8, #1
 8009030:	42b3      	cmp	r3, r6
 8009032:	db0b      	blt.n	800904c <__lshift+0x38>
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff fddf 	bl	8008bf8 <_Balloc>
 800903a:	4605      	mov	r5, r0
 800903c:	b948      	cbnz	r0, 8009052 <__lshift+0x3e>
 800903e:	4602      	mov	r2, r0
 8009040:	4b28      	ldr	r3, [pc, #160]	@ (80090e4 <__lshift+0xd0>)
 8009042:	4829      	ldr	r0, [pc, #164]	@ (80090e8 <__lshift+0xd4>)
 8009044:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009048:	f000 fa22 	bl	8009490 <__assert_func>
 800904c:	3101      	adds	r1, #1
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	e7ee      	b.n	8009030 <__lshift+0x1c>
 8009052:	2300      	movs	r3, #0
 8009054:	f100 0114 	add.w	r1, r0, #20
 8009058:	f100 0210 	add.w	r2, r0, #16
 800905c:	4618      	mov	r0, r3
 800905e:	4553      	cmp	r3, sl
 8009060:	db33      	blt.n	80090ca <__lshift+0xb6>
 8009062:	6920      	ldr	r0, [r4, #16]
 8009064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009068:	f104 0314 	add.w	r3, r4, #20
 800906c:	f019 091f 	ands.w	r9, r9, #31
 8009070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009078:	d02b      	beq.n	80090d2 <__lshift+0xbe>
 800907a:	f1c9 0e20 	rsb	lr, r9, #32
 800907e:	468a      	mov	sl, r1
 8009080:	2200      	movs	r2, #0
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	fa00 f009 	lsl.w	r0, r0, r9
 8009088:	4310      	orrs	r0, r2
 800908a:	f84a 0b04 	str.w	r0, [sl], #4
 800908e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009092:	459c      	cmp	ip, r3
 8009094:	fa22 f20e 	lsr.w	r2, r2, lr
 8009098:	d8f3      	bhi.n	8009082 <__lshift+0x6e>
 800909a:	ebac 0304 	sub.w	r3, ip, r4
 800909e:	3b15      	subs	r3, #21
 80090a0:	f023 0303 	bic.w	r3, r3, #3
 80090a4:	3304      	adds	r3, #4
 80090a6:	f104 0015 	add.w	r0, r4, #21
 80090aa:	4584      	cmp	ip, r0
 80090ac:	bf38      	it	cc
 80090ae:	2304      	movcc	r3, #4
 80090b0:	50ca      	str	r2, [r1, r3]
 80090b2:	b10a      	cbz	r2, 80090b8 <__lshift+0xa4>
 80090b4:	f108 0602 	add.w	r6, r8, #2
 80090b8:	3e01      	subs	r6, #1
 80090ba:	4638      	mov	r0, r7
 80090bc:	612e      	str	r6, [r5, #16]
 80090be:	4621      	mov	r1, r4
 80090c0:	f7ff fdda 	bl	8008c78 <_Bfree>
 80090c4:	4628      	mov	r0, r5
 80090c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ce:	3301      	adds	r3, #1
 80090d0:	e7c5      	b.n	800905e <__lshift+0x4a>
 80090d2:	3904      	subs	r1, #4
 80090d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80090dc:	459c      	cmp	ip, r3
 80090de:	d8f9      	bhi.n	80090d4 <__lshift+0xc0>
 80090e0:	e7ea      	b.n	80090b8 <__lshift+0xa4>
 80090e2:	bf00      	nop
 80090e4:	08009b80 	.word	0x08009b80
 80090e8:	08009b91 	.word	0x08009b91

080090ec <__mcmp>:
 80090ec:	690a      	ldr	r2, [r1, #16]
 80090ee:	4603      	mov	r3, r0
 80090f0:	6900      	ldr	r0, [r0, #16]
 80090f2:	1a80      	subs	r0, r0, r2
 80090f4:	b530      	push	{r4, r5, lr}
 80090f6:	d10e      	bne.n	8009116 <__mcmp+0x2a>
 80090f8:	3314      	adds	r3, #20
 80090fa:	3114      	adds	r1, #20
 80090fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009100:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009104:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009108:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800910c:	4295      	cmp	r5, r2
 800910e:	d003      	beq.n	8009118 <__mcmp+0x2c>
 8009110:	d205      	bcs.n	800911e <__mcmp+0x32>
 8009112:	f04f 30ff 	mov.w	r0, #4294967295
 8009116:	bd30      	pop	{r4, r5, pc}
 8009118:	42a3      	cmp	r3, r4
 800911a:	d3f3      	bcc.n	8009104 <__mcmp+0x18>
 800911c:	e7fb      	b.n	8009116 <__mcmp+0x2a>
 800911e:	2001      	movs	r0, #1
 8009120:	e7f9      	b.n	8009116 <__mcmp+0x2a>
	...

08009124 <__mdiff>:
 8009124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	4689      	mov	r9, r1
 800912a:	4606      	mov	r6, r0
 800912c:	4611      	mov	r1, r2
 800912e:	4648      	mov	r0, r9
 8009130:	4614      	mov	r4, r2
 8009132:	f7ff ffdb 	bl	80090ec <__mcmp>
 8009136:	1e05      	subs	r5, r0, #0
 8009138:	d112      	bne.n	8009160 <__mdiff+0x3c>
 800913a:	4629      	mov	r1, r5
 800913c:	4630      	mov	r0, r6
 800913e:	f7ff fd5b 	bl	8008bf8 <_Balloc>
 8009142:	4602      	mov	r2, r0
 8009144:	b928      	cbnz	r0, 8009152 <__mdiff+0x2e>
 8009146:	4b3f      	ldr	r3, [pc, #252]	@ (8009244 <__mdiff+0x120>)
 8009148:	f240 2137 	movw	r1, #567	@ 0x237
 800914c:	483e      	ldr	r0, [pc, #248]	@ (8009248 <__mdiff+0x124>)
 800914e:	f000 f99f 	bl	8009490 <__assert_func>
 8009152:	2301      	movs	r3, #1
 8009154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009158:	4610      	mov	r0, r2
 800915a:	b003      	add	sp, #12
 800915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009160:	bfbc      	itt	lt
 8009162:	464b      	movlt	r3, r9
 8009164:	46a1      	movlt	r9, r4
 8009166:	4630      	mov	r0, r6
 8009168:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800916c:	bfba      	itte	lt
 800916e:	461c      	movlt	r4, r3
 8009170:	2501      	movlt	r5, #1
 8009172:	2500      	movge	r5, #0
 8009174:	f7ff fd40 	bl	8008bf8 <_Balloc>
 8009178:	4602      	mov	r2, r0
 800917a:	b918      	cbnz	r0, 8009184 <__mdiff+0x60>
 800917c:	4b31      	ldr	r3, [pc, #196]	@ (8009244 <__mdiff+0x120>)
 800917e:	f240 2145 	movw	r1, #581	@ 0x245
 8009182:	e7e3      	b.n	800914c <__mdiff+0x28>
 8009184:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009188:	6926      	ldr	r6, [r4, #16]
 800918a:	60c5      	str	r5, [r0, #12]
 800918c:	f109 0310 	add.w	r3, r9, #16
 8009190:	f109 0514 	add.w	r5, r9, #20
 8009194:	f104 0e14 	add.w	lr, r4, #20
 8009198:	f100 0b14 	add.w	fp, r0, #20
 800919c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	46d9      	mov	r9, fp
 80091a8:	f04f 0c00 	mov.w	ip, #0
 80091ac:	9b01      	ldr	r3, [sp, #4]
 80091ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	fa1f f38a 	uxth.w	r3, sl
 80091bc:	4619      	mov	r1, r3
 80091be:	b283      	uxth	r3, r0
 80091c0:	1acb      	subs	r3, r1, r3
 80091c2:	0c00      	lsrs	r0, r0, #16
 80091c4:	4463      	add	r3, ip
 80091c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091d4:	4576      	cmp	r6, lr
 80091d6:	f849 3b04 	str.w	r3, [r9], #4
 80091da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091de:	d8e5      	bhi.n	80091ac <__mdiff+0x88>
 80091e0:	1b33      	subs	r3, r6, r4
 80091e2:	3b15      	subs	r3, #21
 80091e4:	f023 0303 	bic.w	r3, r3, #3
 80091e8:	3415      	adds	r4, #21
 80091ea:	3304      	adds	r3, #4
 80091ec:	42a6      	cmp	r6, r4
 80091ee:	bf38      	it	cc
 80091f0:	2304      	movcc	r3, #4
 80091f2:	441d      	add	r5, r3
 80091f4:	445b      	add	r3, fp
 80091f6:	461e      	mov	r6, r3
 80091f8:	462c      	mov	r4, r5
 80091fa:	4544      	cmp	r4, r8
 80091fc:	d30e      	bcc.n	800921c <__mdiff+0xf8>
 80091fe:	f108 0103 	add.w	r1, r8, #3
 8009202:	1b49      	subs	r1, r1, r5
 8009204:	f021 0103 	bic.w	r1, r1, #3
 8009208:	3d03      	subs	r5, #3
 800920a:	45a8      	cmp	r8, r5
 800920c:	bf38      	it	cc
 800920e:	2100      	movcc	r1, #0
 8009210:	440b      	add	r3, r1
 8009212:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009216:	b191      	cbz	r1, 800923e <__mdiff+0x11a>
 8009218:	6117      	str	r7, [r2, #16]
 800921a:	e79d      	b.n	8009158 <__mdiff+0x34>
 800921c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009220:	46e6      	mov	lr, ip
 8009222:	0c08      	lsrs	r0, r1, #16
 8009224:	fa1c fc81 	uxtah	ip, ip, r1
 8009228:	4471      	add	r1, lr
 800922a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800922e:	b289      	uxth	r1, r1
 8009230:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009234:	f846 1b04 	str.w	r1, [r6], #4
 8009238:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800923c:	e7dd      	b.n	80091fa <__mdiff+0xd6>
 800923e:	3f01      	subs	r7, #1
 8009240:	e7e7      	b.n	8009212 <__mdiff+0xee>
 8009242:	bf00      	nop
 8009244:	08009b80 	.word	0x08009b80
 8009248:	08009b91 	.word	0x08009b91

0800924c <__d2b>:
 800924c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009250:	460f      	mov	r7, r1
 8009252:	2101      	movs	r1, #1
 8009254:	ec59 8b10 	vmov	r8, r9, d0
 8009258:	4616      	mov	r6, r2
 800925a:	f7ff fccd 	bl	8008bf8 <_Balloc>
 800925e:	4604      	mov	r4, r0
 8009260:	b930      	cbnz	r0, 8009270 <__d2b+0x24>
 8009262:	4602      	mov	r2, r0
 8009264:	4b23      	ldr	r3, [pc, #140]	@ (80092f4 <__d2b+0xa8>)
 8009266:	4824      	ldr	r0, [pc, #144]	@ (80092f8 <__d2b+0xac>)
 8009268:	f240 310f 	movw	r1, #783	@ 0x30f
 800926c:	f000 f910 	bl	8009490 <__assert_func>
 8009270:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009274:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009278:	b10d      	cbz	r5, 800927e <__d2b+0x32>
 800927a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	f1b8 0300 	subs.w	r3, r8, #0
 8009284:	d023      	beq.n	80092ce <__d2b+0x82>
 8009286:	4668      	mov	r0, sp
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	f7ff fd7c 	bl	8008d86 <__lo0bits>
 800928e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009292:	b1d0      	cbz	r0, 80092ca <__d2b+0x7e>
 8009294:	f1c0 0320 	rsb	r3, r0, #32
 8009298:	fa02 f303 	lsl.w	r3, r2, r3
 800929c:	430b      	orrs	r3, r1
 800929e:	40c2      	lsrs	r2, r0
 80092a0:	6163      	str	r3, [r4, #20]
 80092a2:	9201      	str	r2, [sp, #4]
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	61a3      	str	r3, [r4, #24]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	bf0c      	ite	eq
 80092ac:	2201      	moveq	r2, #1
 80092ae:	2202      	movne	r2, #2
 80092b0:	6122      	str	r2, [r4, #16]
 80092b2:	b1a5      	cbz	r5, 80092de <__d2b+0x92>
 80092b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80092b8:	4405      	add	r5, r0
 80092ba:	603d      	str	r5, [r7, #0]
 80092bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80092c0:	6030      	str	r0, [r6, #0]
 80092c2:	4620      	mov	r0, r4
 80092c4:	b003      	add	sp, #12
 80092c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ca:	6161      	str	r1, [r4, #20]
 80092cc:	e7ea      	b.n	80092a4 <__d2b+0x58>
 80092ce:	a801      	add	r0, sp, #4
 80092d0:	f7ff fd59 	bl	8008d86 <__lo0bits>
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	6163      	str	r3, [r4, #20]
 80092d8:	3020      	adds	r0, #32
 80092da:	2201      	movs	r2, #1
 80092dc:	e7e8      	b.n	80092b0 <__d2b+0x64>
 80092de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80092e6:	6038      	str	r0, [r7, #0]
 80092e8:	6918      	ldr	r0, [r3, #16]
 80092ea:	f7ff fd2d 	bl	8008d48 <__hi0bits>
 80092ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092f2:	e7e5      	b.n	80092c0 <__d2b+0x74>
 80092f4:	08009b80 	.word	0x08009b80
 80092f8:	08009b91 	.word	0x08009b91

080092fc <__sflush_r>:
 80092fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009304:	0716      	lsls	r6, r2, #28
 8009306:	4605      	mov	r5, r0
 8009308:	460c      	mov	r4, r1
 800930a:	d454      	bmi.n	80093b6 <__sflush_r+0xba>
 800930c:	684b      	ldr	r3, [r1, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	dc02      	bgt.n	8009318 <__sflush_r+0x1c>
 8009312:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	dd48      	ble.n	80093aa <__sflush_r+0xae>
 8009318:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800931a:	2e00      	cmp	r6, #0
 800931c:	d045      	beq.n	80093aa <__sflush_r+0xae>
 800931e:	2300      	movs	r3, #0
 8009320:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009324:	682f      	ldr	r7, [r5, #0]
 8009326:	6a21      	ldr	r1, [r4, #32]
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	d030      	beq.n	800938e <__sflush_r+0x92>
 800932c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	0759      	lsls	r1, r3, #29
 8009332:	d505      	bpl.n	8009340 <__sflush_r+0x44>
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800933a:	b10b      	cbz	r3, 8009340 <__sflush_r+0x44>
 800933c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	2300      	movs	r3, #0
 8009342:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009344:	6a21      	ldr	r1, [r4, #32]
 8009346:	4628      	mov	r0, r5
 8009348:	47b0      	blx	r6
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	d106      	bne.n	800935e <__sflush_r+0x62>
 8009350:	6829      	ldr	r1, [r5, #0]
 8009352:	291d      	cmp	r1, #29
 8009354:	d82b      	bhi.n	80093ae <__sflush_r+0xb2>
 8009356:	4a2a      	ldr	r2, [pc, #168]	@ (8009400 <__sflush_r+0x104>)
 8009358:	410a      	asrs	r2, r1
 800935a:	07d6      	lsls	r6, r2, #31
 800935c:	d427      	bmi.n	80093ae <__sflush_r+0xb2>
 800935e:	2200      	movs	r2, #0
 8009360:	6062      	str	r2, [r4, #4]
 8009362:	04d9      	lsls	r1, r3, #19
 8009364:	6922      	ldr	r2, [r4, #16]
 8009366:	6022      	str	r2, [r4, #0]
 8009368:	d504      	bpl.n	8009374 <__sflush_r+0x78>
 800936a:	1c42      	adds	r2, r0, #1
 800936c:	d101      	bne.n	8009372 <__sflush_r+0x76>
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	b903      	cbnz	r3, 8009374 <__sflush_r+0x78>
 8009372:	6560      	str	r0, [r4, #84]	@ 0x54
 8009374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009376:	602f      	str	r7, [r5, #0]
 8009378:	b1b9      	cbz	r1, 80093aa <__sflush_r+0xae>
 800937a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800937e:	4299      	cmp	r1, r3
 8009380:	d002      	beq.n	8009388 <__sflush_r+0x8c>
 8009382:	4628      	mov	r0, r5
 8009384:	f7ff fb38 	bl	80089f8 <_free_r>
 8009388:	2300      	movs	r3, #0
 800938a:	6363      	str	r3, [r4, #52]	@ 0x34
 800938c:	e00d      	b.n	80093aa <__sflush_r+0xae>
 800938e:	2301      	movs	r3, #1
 8009390:	4628      	mov	r0, r5
 8009392:	47b0      	blx	r6
 8009394:	4602      	mov	r2, r0
 8009396:	1c50      	adds	r0, r2, #1
 8009398:	d1c9      	bne.n	800932e <__sflush_r+0x32>
 800939a:	682b      	ldr	r3, [r5, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0c6      	beq.n	800932e <__sflush_r+0x32>
 80093a0:	2b1d      	cmp	r3, #29
 80093a2:	d001      	beq.n	80093a8 <__sflush_r+0xac>
 80093a4:	2b16      	cmp	r3, #22
 80093a6:	d11e      	bne.n	80093e6 <__sflush_r+0xea>
 80093a8:	602f      	str	r7, [r5, #0]
 80093aa:	2000      	movs	r0, #0
 80093ac:	e022      	b.n	80093f4 <__sflush_r+0xf8>
 80093ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093b2:	b21b      	sxth	r3, r3
 80093b4:	e01b      	b.n	80093ee <__sflush_r+0xf2>
 80093b6:	690f      	ldr	r7, [r1, #16]
 80093b8:	2f00      	cmp	r7, #0
 80093ba:	d0f6      	beq.n	80093aa <__sflush_r+0xae>
 80093bc:	0793      	lsls	r3, r2, #30
 80093be:	680e      	ldr	r6, [r1, #0]
 80093c0:	bf08      	it	eq
 80093c2:	694b      	ldreq	r3, [r1, #20]
 80093c4:	600f      	str	r7, [r1, #0]
 80093c6:	bf18      	it	ne
 80093c8:	2300      	movne	r3, #0
 80093ca:	eba6 0807 	sub.w	r8, r6, r7
 80093ce:	608b      	str	r3, [r1, #8]
 80093d0:	f1b8 0f00 	cmp.w	r8, #0
 80093d4:	dde9      	ble.n	80093aa <__sflush_r+0xae>
 80093d6:	6a21      	ldr	r1, [r4, #32]
 80093d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093da:	4643      	mov	r3, r8
 80093dc:	463a      	mov	r2, r7
 80093de:	4628      	mov	r0, r5
 80093e0:	47b0      	blx	r6
 80093e2:	2800      	cmp	r0, #0
 80093e4:	dc08      	bgt.n	80093f8 <__sflush_r+0xfc>
 80093e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ee:	81a3      	strh	r3, [r4, #12]
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f8:	4407      	add	r7, r0
 80093fa:	eba8 0800 	sub.w	r8, r8, r0
 80093fe:	e7e7      	b.n	80093d0 <__sflush_r+0xd4>
 8009400:	dfbffffe 	.word	0xdfbffffe

08009404 <_fflush_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	690b      	ldr	r3, [r1, #16]
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	b913      	cbnz	r3, 8009414 <_fflush_r+0x10>
 800940e:	2500      	movs	r5, #0
 8009410:	4628      	mov	r0, r5
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	b118      	cbz	r0, 800941e <_fflush_r+0x1a>
 8009416:	6a03      	ldr	r3, [r0, #32]
 8009418:	b90b      	cbnz	r3, 800941e <_fflush_r+0x1a>
 800941a:	f7fe fba5 	bl	8007b68 <__sinit>
 800941e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0f3      	beq.n	800940e <_fflush_r+0xa>
 8009426:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009428:	07d0      	lsls	r0, r2, #31
 800942a:	d404      	bmi.n	8009436 <_fflush_r+0x32>
 800942c:	0599      	lsls	r1, r3, #22
 800942e:	d402      	bmi.n	8009436 <_fflush_r+0x32>
 8009430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009432:	f7fe fc90 	bl	8007d56 <__retarget_lock_acquire_recursive>
 8009436:	4628      	mov	r0, r5
 8009438:	4621      	mov	r1, r4
 800943a:	f7ff ff5f 	bl	80092fc <__sflush_r>
 800943e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009440:	07da      	lsls	r2, r3, #31
 8009442:	4605      	mov	r5, r0
 8009444:	d4e4      	bmi.n	8009410 <_fflush_r+0xc>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	059b      	lsls	r3, r3, #22
 800944a:	d4e1      	bmi.n	8009410 <_fflush_r+0xc>
 800944c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800944e:	f7fe fc83 	bl	8007d58 <__retarget_lock_release_recursive>
 8009452:	e7dd      	b.n	8009410 <_fflush_r+0xc>

08009454 <_sbrk_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d06      	ldr	r5, [pc, #24]	@ (8009470 <_sbrk_r+0x1c>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	f7f9 f8b2 	bl	80025c8 <_sbrk>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_sbrk_r+0x1a>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_sbrk_r+0x1a>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	200007a4 	.word	0x200007a4

08009474 <memcpy>:
 8009474:	440a      	add	r2, r1
 8009476:	4291      	cmp	r1, r2
 8009478:	f100 33ff 	add.w	r3, r0, #4294967295
 800947c:	d100      	bne.n	8009480 <memcpy+0xc>
 800947e:	4770      	bx	lr
 8009480:	b510      	push	{r4, lr}
 8009482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800948a:	4291      	cmp	r1, r2
 800948c:	d1f9      	bne.n	8009482 <memcpy+0xe>
 800948e:	bd10      	pop	{r4, pc}

08009490 <__assert_func>:
 8009490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009492:	4614      	mov	r4, r2
 8009494:	461a      	mov	r2, r3
 8009496:	4b09      	ldr	r3, [pc, #36]	@ (80094bc <__assert_func+0x2c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4605      	mov	r5, r0
 800949c:	68d8      	ldr	r0, [r3, #12]
 800949e:	b954      	cbnz	r4, 80094b6 <__assert_func+0x26>
 80094a0:	4b07      	ldr	r3, [pc, #28]	@ (80094c0 <__assert_func+0x30>)
 80094a2:	461c      	mov	r4, r3
 80094a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094a8:	9100      	str	r1, [sp, #0]
 80094aa:	462b      	mov	r3, r5
 80094ac:	4905      	ldr	r1, [pc, #20]	@ (80094c4 <__assert_func+0x34>)
 80094ae:	f000 f841 	bl	8009534 <fiprintf>
 80094b2:	f000 f851 	bl	8009558 <abort>
 80094b6:	4b04      	ldr	r3, [pc, #16]	@ (80094c8 <__assert_func+0x38>)
 80094b8:	e7f4      	b.n	80094a4 <__assert_func+0x14>
 80094ba:	bf00      	nop
 80094bc:	200001b0 	.word	0x200001b0
 80094c0:	08009d2d 	.word	0x08009d2d
 80094c4:	08009cff 	.word	0x08009cff
 80094c8:	08009cf2 	.word	0x08009cf2

080094cc <_calloc_r>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	fba1 5402 	umull	r5, r4, r1, r2
 80094d2:	b93c      	cbnz	r4, 80094e4 <_calloc_r+0x18>
 80094d4:	4629      	mov	r1, r5
 80094d6:	f7ff fb03 	bl	8008ae0 <_malloc_r>
 80094da:	4606      	mov	r6, r0
 80094dc:	b928      	cbnz	r0, 80094ea <_calloc_r+0x1e>
 80094de:	2600      	movs	r6, #0
 80094e0:	4630      	mov	r0, r6
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	220c      	movs	r2, #12
 80094e6:	6002      	str	r2, [r0, #0]
 80094e8:	e7f9      	b.n	80094de <_calloc_r+0x12>
 80094ea:	462a      	mov	r2, r5
 80094ec:	4621      	mov	r1, r4
 80094ee:	f7fe fbb4 	bl	8007c5a <memset>
 80094f2:	e7f5      	b.n	80094e0 <_calloc_r+0x14>

080094f4 <__ascii_mbtowc>:
 80094f4:	b082      	sub	sp, #8
 80094f6:	b901      	cbnz	r1, 80094fa <__ascii_mbtowc+0x6>
 80094f8:	a901      	add	r1, sp, #4
 80094fa:	b142      	cbz	r2, 800950e <__ascii_mbtowc+0x1a>
 80094fc:	b14b      	cbz	r3, 8009512 <__ascii_mbtowc+0x1e>
 80094fe:	7813      	ldrb	r3, [r2, #0]
 8009500:	600b      	str	r3, [r1, #0]
 8009502:	7812      	ldrb	r2, [r2, #0]
 8009504:	1e10      	subs	r0, r2, #0
 8009506:	bf18      	it	ne
 8009508:	2001      	movne	r0, #1
 800950a:	b002      	add	sp, #8
 800950c:	4770      	bx	lr
 800950e:	4610      	mov	r0, r2
 8009510:	e7fb      	b.n	800950a <__ascii_mbtowc+0x16>
 8009512:	f06f 0001 	mvn.w	r0, #1
 8009516:	e7f8      	b.n	800950a <__ascii_mbtowc+0x16>

08009518 <__ascii_wctomb>:
 8009518:	4603      	mov	r3, r0
 800951a:	4608      	mov	r0, r1
 800951c:	b141      	cbz	r1, 8009530 <__ascii_wctomb+0x18>
 800951e:	2aff      	cmp	r2, #255	@ 0xff
 8009520:	d904      	bls.n	800952c <__ascii_wctomb+0x14>
 8009522:	228a      	movs	r2, #138	@ 0x8a
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	f04f 30ff 	mov.w	r0, #4294967295
 800952a:	4770      	bx	lr
 800952c:	700a      	strb	r2, [r1, #0]
 800952e:	2001      	movs	r0, #1
 8009530:	4770      	bx	lr
	...

08009534 <fiprintf>:
 8009534:	b40e      	push	{r1, r2, r3}
 8009536:	b503      	push	{r0, r1, lr}
 8009538:	4601      	mov	r1, r0
 800953a:	ab03      	add	r3, sp, #12
 800953c:	4805      	ldr	r0, [pc, #20]	@ (8009554 <fiprintf+0x20>)
 800953e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009542:	6800      	ldr	r0, [r0, #0]
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	f000 f837 	bl	80095b8 <_vfiprintf_r>
 800954a:	b002      	add	sp, #8
 800954c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009550:	b003      	add	sp, #12
 8009552:	4770      	bx	lr
 8009554:	200001b0 	.word	0x200001b0

08009558 <abort>:
 8009558:	b508      	push	{r3, lr}
 800955a:	2006      	movs	r0, #6
 800955c:	f000 fa00 	bl	8009960 <raise>
 8009560:	2001      	movs	r0, #1
 8009562:	f7f8 ffd5 	bl	8002510 <_exit>

08009566 <__sfputc_r>:
 8009566:	6893      	ldr	r3, [r2, #8]
 8009568:	3b01      	subs	r3, #1
 800956a:	2b00      	cmp	r3, #0
 800956c:	b410      	push	{r4}
 800956e:	6093      	str	r3, [r2, #8]
 8009570:	da08      	bge.n	8009584 <__sfputc_r+0x1e>
 8009572:	6994      	ldr	r4, [r2, #24]
 8009574:	42a3      	cmp	r3, r4
 8009576:	db01      	blt.n	800957c <__sfputc_r+0x16>
 8009578:	290a      	cmp	r1, #10
 800957a:	d103      	bne.n	8009584 <__sfputc_r+0x1e>
 800957c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009580:	f000 b932 	b.w	80097e8 <__swbuf_r>
 8009584:	6813      	ldr	r3, [r2, #0]
 8009586:	1c58      	adds	r0, r3, #1
 8009588:	6010      	str	r0, [r2, #0]
 800958a:	7019      	strb	r1, [r3, #0]
 800958c:	4608      	mov	r0, r1
 800958e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009592:	4770      	bx	lr

08009594 <__sfputs_r>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	4606      	mov	r6, r0
 8009598:	460f      	mov	r7, r1
 800959a:	4614      	mov	r4, r2
 800959c:	18d5      	adds	r5, r2, r3
 800959e:	42ac      	cmp	r4, r5
 80095a0:	d101      	bne.n	80095a6 <__sfputs_r+0x12>
 80095a2:	2000      	movs	r0, #0
 80095a4:	e007      	b.n	80095b6 <__sfputs_r+0x22>
 80095a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095aa:	463a      	mov	r2, r7
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff ffda 	bl	8009566 <__sfputc_r>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	d1f3      	bne.n	800959e <__sfputs_r+0xa>
 80095b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095b8 <_vfiprintf_r>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	460d      	mov	r5, r1
 80095be:	b09d      	sub	sp, #116	@ 0x74
 80095c0:	4614      	mov	r4, r2
 80095c2:	4698      	mov	r8, r3
 80095c4:	4606      	mov	r6, r0
 80095c6:	b118      	cbz	r0, 80095d0 <_vfiprintf_r+0x18>
 80095c8:	6a03      	ldr	r3, [r0, #32]
 80095ca:	b90b      	cbnz	r3, 80095d0 <_vfiprintf_r+0x18>
 80095cc:	f7fe facc 	bl	8007b68 <__sinit>
 80095d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	d405      	bmi.n	80095e2 <_vfiprintf_r+0x2a>
 80095d6:	89ab      	ldrh	r3, [r5, #12]
 80095d8:	059a      	lsls	r2, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_vfiprintf_r+0x2a>
 80095dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095de:	f7fe fbba 	bl	8007d56 <__retarget_lock_acquire_recursive>
 80095e2:	89ab      	ldrh	r3, [r5, #12]
 80095e4:	071b      	lsls	r3, r3, #28
 80095e6:	d501      	bpl.n	80095ec <_vfiprintf_r+0x34>
 80095e8:	692b      	ldr	r3, [r5, #16]
 80095ea:	b99b      	cbnz	r3, 8009614 <_vfiprintf_r+0x5c>
 80095ec:	4629      	mov	r1, r5
 80095ee:	4630      	mov	r0, r6
 80095f0:	f000 f938 	bl	8009864 <__swsetup_r>
 80095f4:	b170      	cbz	r0, 8009614 <_vfiprintf_r+0x5c>
 80095f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095f8:	07dc      	lsls	r4, r3, #31
 80095fa:	d504      	bpl.n	8009606 <_vfiprintf_r+0x4e>
 80095fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009600:	b01d      	add	sp, #116	@ 0x74
 8009602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009606:	89ab      	ldrh	r3, [r5, #12]
 8009608:	0598      	lsls	r0, r3, #22
 800960a:	d4f7      	bmi.n	80095fc <_vfiprintf_r+0x44>
 800960c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800960e:	f7fe fba3 	bl	8007d58 <__retarget_lock_release_recursive>
 8009612:	e7f3      	b.n	80095fc <_vfiprintf_r+0x44>
 8009614:	2300      	movs	r3, #0
 8009616:	9309      	str	r3, [sp, #36]	@ 0x24
 8009618:	2320      	movs	r3, #32
 800961a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800961e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009622:	2330      	movs	r3, #48	@ 0x30
 8009624:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80097d4 <_vfiprintf_r+0x21c>
 8009628:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800962c:	f04f 0901 	mov.w	r9, #1
 8009630:	4623      	mov	r3, r4
 8009632:	469a      	mov	sl, r3
 8009634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009638:	b10a      	cbz	r2, 800963e <_vfiprintf_r+0x86>
 800963a:	2a25      	cmp	r2, #37	@ 0x25
 800963c:	d1f9      	bne.n	8009632 <_vfiprintf_r+0x7a>
 800963e:	ebba 0b04 	subs.w	fp, sl, r4
 8009642:	d00b      	beq.n	800965c <_vfiprintf_r+0xa4>
 8009644:	465b      	mov	r3, fp
 8009646:	4622      	mov	r2, r4
 8009648:	4629      	mov	r1, r5
 800964a:	4630      	mov	r0, r6
 800964c:	f7ff ffa2 	bl	8009594 <__sfputs_r>
 8009650:	3001      	adds	r0, #1
 8009652:	f000 80a7 	beq.w	80097a4 <_vfiprintf_r+0x1ec>
 8009656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009658:	445a      	add	r2, fp
 800965a:	9209      	str	r2, [sp, #36]	@ 0x24
 800965c:	f89a 3000 	ldrb.w	r3, [sl]
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 809f 	beq.w	80097a4 <_vfiprintf_r+0x1ec>
 8009666:	2300      	movs	r3, #0
 8009668:	f04f 32ff 	mov.w	r2, #4294967295
 800966c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009670:	f10a 0a01 	add.w	sl, sl, #1
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	9307      	str	r3, [sp, #28]
 8009678:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800967c:	931a      	str	r3, [sp, #104]	@ 0x68
 800967e:	4654      	mov	r4, sl
 8009680:	2205      	movs	r2, #5
 8009682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009686:	4853      	ldr	r0, [pc, #332]	@ (80097d4 <_vfiprintf_r+0x21c>)
 8009688:	f7f6 fdc2 	bl	8000210 <memchr>
 800968c:	9a04      	ldr	r2, [sp, #16]
 800968e:	b9d8      	cbnz	r0, 80096c8 <_vfiprintf_r+0x110>
 8009690:	06d1      	lsls	r1, r2, #27
 8009692:	bf44      	itt	mi
 8009694:	2320      	movmi	r3, #32
 8009696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800969a:	0713      	lsls	r3, r2, #28
 800969c:	bf44      	itt	mi
 800969e:	232b      	movmi	r3, #43	@ 0x2b
 80096a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096a4:	f89a 3000 	ldrb.w	r3, [sl]
 80096a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80096aa:	d015      	beq.n	80096d8 <_vfiprintf_r+0x120>
 80096ac:	9a07      	ldr	r2, [sp, #28]
 80096ae:	4654      	mov	r4, sl
 80096b0:	2000      	movs	r0, #0
 80096b2:	f04f 0c0a 	mov.w	ip, #10
 80096b6:	4621      	mov	r1, r4
 80096b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096bc:	3b30      	subs	r3, #48	@ 0x30
 80096be:	2b09      	cmp	r3, #9
 80096c0:	d94b      	bls.n	800975a <_vfiprintf_r+0x1a2>
 80096c2:	b1b0      	cbz	r0, 80096f2 <_vfiprintf_r+0x13a>
 80096c4:	9207      	str	r2, [sp, #28]
 80096c6:	e014      	b.n	80096f2 <_vfiprintf_r+0x13a>
 80096c8:	eba0 0308 	sub.w	r3, r0, r8
 80096cc:	fa09 f303 	lsl.w	r3, r9, r3
 80096d0:	4313      	orrs	r3, r2
 80096d2:	9304      	str	r3, [sp, #16]
 80096d4:	46a2      	mov	sl, r4
 80096d6:	e7d2      	b.n	800967e <_vfiprintf_r+0xc6>
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	1d19      	adds	r1, r3, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	9103      	str	r1, [sp, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	bfbb      	ittet	lt
 80096e4:	425b      	neglt	r3, r3
 80096e6:	f042 0202 	orrlt.w	r2, r2, #2
 80096ea:	9307      	strge	r3, [sp, #28]
 80096ec:	9307      	strlt	r3, [sp, #28]
 80096ee:	bfb8      	it	lt
 80096f0:	9204      	strlt	r2, [sp, #16]
 80096f2:	7823      	ldrb	r3, [r4, #0]
 80096f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80096f6:	d10a      	bne.n	800970e <_vfiprintf_r+0x156>
 80096f8:	7863      	ldrb	r3, [r4, #1]
 80096fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80096fc:	d132      	bne.n	8009764 <_vfiprintf_r+0x1ac>
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	1d1a      	adds	r2, r3, #4
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	9203      	str	r2, [sp, #12]
 8009706:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800970a:	3402      	adds	r4, #2
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097e4 <_vfiprintf_r+0x22c>
 8009712:	7821      	ldrb	r1, [r4, #0]
 8009714:	2203      	movs	r2, #3
 8009716:	4650      	mov	r0, sl
 8009718:	f7f6 fd7a 	bl	8000210 <memchr>
 800971c:	b138      	cbz	r0, 800972e <_vfiprintf_r+0x176>
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	eba0 000a 	sub.w	r0, r0, sl
 8009724:	2240      	movs	r2, #64	@ 0x40
 8009726:	4082      	lsls	r2, r0
 8009728:	4313      	orrs	r3, r2
 800972a:	3401      	adds	r4, #1
 800972c:	9304      	str	r3, [sp, #16]
 800972e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009732:	4829      	ldr	r0, [pc, #164]	@ (80097d8 <_vfiprintf_r+0x220>)
 8009734:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009738:	2206      	movs	r2, #6
 800973a:	f7f6 fd69 	bl	8000210 <memchr>
 800973e:	2800      	cmp	r0, #0
 8009740:	d03f      	beq.n	80097c2 <_vfiprintf_r+0x20a>
 8009742:	4b26      	ldr	r3, [pc, #152]	@ (80097dc <_vfiprintf_r+0x224>)
 8009744:	bb1b      	cbnz	r3, 800978e <_vfiprintf_r+0x1d6>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	3307      	adds	r3, #7
 800974a:	f023 0307 	bic.w	r3, r3, #7
 800974e:	3308      	adds	r3, #8
 8009750:	9303      	str	r3, [sp, #12]
 8009752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009754:	443b      	add	r3, r7
 8009756:	9309      	str	r3, [sp, #36]	@ 0x24
 8009758:	e76a      	b.n	8009630 <_vfiprintf_r+0x78>
 800975a:	fb0c 3202 	mla	r2, ip, r2, r3
 800975e:	460c      	mov	r4, r1
 8009760:	2001      	movs	r0, #1
 8009762:	e7a8      	b.n	80096b6 <_vfiprintf_r+0xfe>
 8009764:	2300      	movs	r3, #0
 8009766:	3401      	adds	r4, #1
 8009768:	9305      	str	r3, [sp, #20]
 800976a:	4619      	mov	r1, r3
 800976c:	f04f 0c0a 	mov.w	ip, #10
 8009770:	4620      	mov	r0, r4
 8009772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009776:	3a30      	subs	r2, #48	@ 0x30
 8009778:	2a09      	cmp	r2, #9
 800977a:	d903      	bls.n	8009784 <_vfiprintf_r+0x1cc>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0c6      	beq.n	800970e <_vfiprintf_r+0x156>
 8009780:	9105      	str	r1, [sp, #20]
 8009782:	e7c4      	b.n	800970e <_vfiprintf_r+0x156>
 8009784:	fb0c 2101 	mla	r1, ip, r1, r2
 8009788:	4604      	mov	r4, r0
 800978a:	2301      	movs	r3, #1
 800978c:	e7f0      	b.n	8009770 <_vfiprintf_r+0x1b8>
 800978e:	ab03      	add	r3, sp, #12
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	462a      	mov	r2, r5
 8009794:	4b12      	ldr	r3, [pc, #72]	@ (80097e0 <_vfiprintf_r+0x228>)
 8009796:	a904      	add	r1, sp, #16
 8009798:	4630      	mov	r0, r6
 800979a:	f7fd fda1 	bl	80072e0 <_printf_float>
 800979e:	4607      	mov	r7, r0
 80097a0:	1c78      	adds	r0, r7, #1
 80097a2:	d1d6      	bne.n	8009752 <_vfiprintf_r+0x19a>
 80097a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097a6:	07d9      	lsls	r1, r3, #31
 80097a8:	d405      	bmi.n	80097b6 <_vfiprintf_r+0x1fe>
 80097aa:	89ab      	ldrh	r3, [r5, #12]
 80097ac:	059a      	lsls	r2, r3, #22
 80097ae:	d402      	bmi.n	80097b6 <_vfiprintf_r+0x1fe>
 80097b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097b2:	f7fe fad1 	bl	8007d58 <__retarget_lock_release_recursive>
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	065b      	lsls	r3, r3, #25
 80097ba:	f53f af1f 	bmi.w	80095fc <_vfiprintf_r+0x44>
 80097be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097c0:	e71e      	b.n	8009600 <_vfiprintf_r+0x48>
 80097c2:	ab03      	add	r3, sp, #12
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	462a      	mov	r2, r5
 80097c8:	4b05      	ldr	r3, [pc, #20]	@ (80097e0 <_vfiprintf_r+0x228>)
 80097ca:	a904      	add	r1, sp, #16
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7fe f81f 	bl	8007810 <_printf_i>
 80097d2:	e7e4      	b.n	800979e <_vfiprintf_r+0x1e6>
 80097d4:	08009e2f 	.word	0x08009e2f
 80097d8:	08009e39 	.word	0x08009e39
 80097dc:	080072e1 	.word	0x080072e1
 80097e0:	08009595 	.word	0x08009595
 80097e4:	08009e35 	.word	0x08009e35

080097e8 <__swbuf_r>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	460e      	mov	r6, r1
 80097ec:	4614      	mov	r4, r2
 80097ee:	4605      	mov	r5, r0
 80097f0:	b118      	cbz	r0, 80097fa <__swbuf_r+0x12>
 80097f2:	6a03      	ldr	r3, [r0, #32]
 80097f4:	b90b      	cbnz	r3, 80097fa <__swbuf_r+0x12>
 80097f6:	f7fe f9b7 	bl	8007b68 <__sinit>
 80097fa:	69a3      	ldr	r3, [r4, #24]
 80097fc:	60a3      	str	r3, [r4, #8]
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	071a      	lsls	r2, r3, #28
 8009802:	d501      	bpl.n	8009808 <__swbuf_r+0x20>
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	b943      	cbnz	r3, 800981a <__swbuf_r+0x32>
 8009808:	4621      	mov	r1, r4
 800980a:	4628      	mov	r0, r5
 800980c:	f000 f82a 	bl	8009864 <__swsetup_r>
 8009810:	b118      	cbz	r0, 800981a <__swbuf_r+0x32>
 8009812:	f04f 37ff 	mov.w	r7, #4294967295
 8009816:	4638      	mov	r0, r7
 8009818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	6922      	ldr	r2, [r4, #16]
 800981e:	1a98      	subs	r0, r3, r2
 8009820:	6963      	ldr	r3, [r4, #20]
 8009822:	b2f6      	uxtb	r6, r6
 8009824:	4283      	cmp	r3, r0
 8009826:	4637      	mov	r7, r6
 8009828:	dc05      	bgt.n	8009836 <__swbuf_r+0x4e>
 800982a:	4621      	mov	r1, r4
 800982c:	4628      	mov	r0, r5
 800982e:	f7ff fde9 	bl	8009404 <_fflush_r>
 8009832:	2800      	cmp	r0, #0
 8009834:	d1ed      	bne.n	8009812 <__swbuf_r+0x2a>
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	3b01      	subs	r3, #1
 800983a:	60a3      	str	r3, [r4, #8]
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	6022      	str	r2, [r4, #0]
 8009842:	701e      	strb	r6, [r3, #0]
 8009844:	6962      	ldr	r2, [r4, #20]
 8009846:	1c43      	adds	r3, r0, #1
 8009848:	429a      	cmp	r2, r3
 800984a:	d004      	beq.n	8009856 <__swbuf_r+0x6e>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	07db      	lsls	r3, r3, #31
 8009850:	d5e1      	bpl.n	8009816 <__swbuf_r+0x2e>
 8009852:	2e0a      	cmp	r6, #10
 8009854:	d1df      	bne.n	8009816 <__swbuf_r+0x2e>
 8009856:	4621      	mov	r1, r4
 8009858:	4628      	mov	r0, r5
 800985a:	f7ff fdd3 	bl	8009404 <_fflush_r>
 800985e:	2800      	cmp	r0, #0
 8009860:	d0d9      	beq.n	8009816 <__swbuf_r+0x2e>
 8009862:	e7d6      	b.n	8009812 <__swbuf_r+0x2a>

08009864 <__swsetup_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4b29      	ldr	r3, [pc, #164]	@ (800990c <__swsetup_r+0xa8>)
 8009868:	4605      	mov	r5, r0
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	460c      	mov	r4, r1
 800986e:	b118      	cbz	r0, 8009878 <__swsetup_r+0x14>
 8009870:	6a03      	ldr	r3, [r0, #32]
 8009872:	b90b      	cbnz	r3, 8009878 <__swsetup_r+0x14>
 8009874:	f7fe f978 	bl	8007b68 <__sinit>
 8009878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800987c:	0719      	lsls	r1, r3, #28
 800987e:	d422      	bmi.n	80098c6 <__swsetup_r+0x62>
 8009880:	06da      	lsls	r2, r3, #27
 8009882:	d407      	bmi.n	8009894 <__swsetup_r+0x30>
 8009884:	2209      	movs	r2, #9
 8009886:	602a      	str	r2, [r5, #0]
 8009888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	f04f 30ff 	mov.w	r0, #4294967295
 8009892:	e033      	b.n	80098fc <__swsetup_r+0x98>
 8009894:	0758      	lsls	r0, r3, #29
 8009896:	d512      	bpl.n	80098be <__swsetup_r+0x5a>
 8009898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800989a:	b141      	cbz	r1, 80098ae <__swsetup_r+0x4a>
 800989c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098a0:	4299      	cmp	r1, r3
 80098a2:	d002      	beq.n	80098aa <__swsetup_r+0x46>
 80098a4:	4628      	mov	r0, r5
 80098a6:	f7ff f8a7 	bl	80089f8 <_free_r>
 80098aa:	2300      	movs	r3, #0
 80098ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	2300      	movs	r3, #0
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f043 0308 	orr.w	r3, r3, #8
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	6923      	ldr	r3, [r4, #16]
 80098c8:	b94b      	cbnz	r3, 80098de <__swsetup_r+0x7a>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098d4:	d003      	beq.n	80098de <__swsetup_r+0x7a>
 80098d6:	4621      	mov	r1, r4
 80098d8:	4628      	mov	r0, r5
 80098da:	f000 f883 	bl	80099e4 <__smakebuf_r>
 80098de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e2:	f013 0201 	ands.w	r2, r3, #1
 80098e6:	d00a      	beq.n	80098fe <__swsetup_r+0x9a>
 80098e8:	2200      	movs	r2, #0
 80098ea:	60a2      	str	r2, [r4, #8]
 80098ec:	6962      	ldr	r2, [r4, #20]
 80098ee:	4252      	negs	r2, r2
 80098f0:	61a2      	str	r2, [r4, #24]
 80098f2:	6922      	ldr	r2, [r4, #16]
 80098f4:	b942      	cbnz	r2, 8009908 <__swsetup_r+0xa4>
 80098f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098fa:	d1c5      	bne.n	8009888 <__swsetup_r+0x24>
 80098fc:	bd38      	pop	{r3, r4, r5, pc}
 80098fe:	0799      	lsls	r1, r3, #30
 8009900:	bf58      	it	pl
 8009902:	6962      	ldrpl	r2, [r4, #20]
 8009904:	60a2      	str	r2, [r4, #8]
 8009906:	e7f4      	b.n	80098f2 <__swsetup_r+0x8e>
 8009908:	2000      	movs	r0, #0
 800990a:	e7f7      	b.n	80098fc <__swsetup_r+0x98>
 800990c:	200001b0 	.word	0x200001b0

08009910 <_raise_r>:
 8009910:	291f      	cmp	r1, #31
 8009912:	b538      	push	{r3, r4, r5, lr}
 8009914:	4605      	mov	r5, r0
 8009916:	460c      	mov	r4, r1
 8009918:	d904      	bls.n	8009924 <_raise_r+0x14>
 800991a:	2316      	movs	r3, #22
 800991c:	6003      	str	r3, [r0, #0]
 800991e:	f04f 30ff 	mov.w	r0, #4294967295
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009926:	b112      	cbz	r2, 800992e <_raise_r+0x1e>
 8009928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800992c:	b94b      	cbnz	r3, 8009942 <_raise_r+0x32>
 800992e:	4628      	mov	r0, r5
 8009930:	f000 f830 	bl	8009994 <_getpid_r>
 8009934:	4622      	mov	r2, r4
 8009936:	4601      	mov	r1, r0
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800993e:	f000 b817 	b.w	8009970 <_kill_r>
 8009942:	2b01      	cmp	r3, #1
 8009944:	d00a      	beq.n	800995c <_raise_r+0x4c>
 8009946:	1c59      	adds	r1, r3, #1
 8009948:	d103      	bne.n	8009952 <_raise_r+0x42>
 800994a:	2316      	movs	r3, #22
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	2001      	movs	r0, #1
 8009950:	e7e7      	b.n	8009922 <_raise_r+0x12>
 8009952:	2100      	movs	r1, #0
 8009954:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009958:	4620      	mov	r0, r4
 800995a:	4798      	blx	r3
 800995c:	2000      	movs	r0, #0
 800995e:	e7e0      	b.n	8009922 <_raise_r+0x12>

08009960 <raise>:
 8009960:	4b02      	ldr	r3, [pc, #8]	@ (800996c <raise+0xc>)
 8009962:	4601      	mov	r1, r0
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	f7ff bfd3 	b.w	8009910 <_raise_r>
 800996a:	bf00      	nop
 800996c:	200001b0 	.word	0x200001b0

08009970 <_kill_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d07      	ldr	r5, [pc, #28]	@ (8009990 <_kill_r+0x20>)
 8009974:	2300      	movs	r3, #0
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	4611      	mov	r1, r2
 800997c:	602b      	str	r3, [r5, #0]
 800997e:	f7f8 fdb7 	bl	80024f0 <_kill>
 8009982:	1c43      	adds	r3, r0, #1
 8009984:	d102      	bne.n	800998c <_kill_r+0x1c>
 8009986:	682b      	ldr	r3, [r5, #0]
 8009988:	b103      	cbz	r3, 800998c <_kill_r+0x1c>
 800998a:	6023      	str	r3, [r4, #0]
 800998c:	bd38      	pop	{r3, r4, r5, pc}
 800998e:	bf00      	nop
 8009990:	200007a4 	.word	0x200007a4

08009994 <_getpid_r>:
 8009994:	f7f8 bda4 	b.w	80024e0 <_getpid>

08009998 <__swhatbuf_r>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	460c      	mov	r4, r1
 800999c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a0:	2900      	cmp	r1, #0
 80099a2:	b096      	sub	sp, #88	@ 0x58
 80099a4:	4615      	mov	r5, r2
 80099a6:	461e      	mov	r6, r3
 80099a8:	da0d      	bge.n	80099c6 <__swhatbuf_r+0x2e>
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099b0:	f04f 0100 	mov.w	r1, #0
 80099b4:	bf14      	ite	ne
 80099b6:	2340      	movne	r3, #64	@ 0x40
 80099b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099bc:	2000      	movs	r0, #0
 80099be:	6031      	str	r1, [r6, #0]
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	b016      	add	sp, #88	@ 0x58
 80099c4:	bd70      	pop	{r4, r5, r6, pc}
 80099c6:	466a      	mov	r2, sp
 80099c8:	f000 f848 	bl	8009a5c <_fstat_r>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	dbec      	blt.n	80099aa <__swhatbuf_r+0x12>
 80099d0:	9901      	ldr	r1, [sp, #4]
 80099d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099da:	4259      	negs	r1, r3
 80099dc:	4159      	adcs	r1, r3
 80099de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099e2:	e7eb      	b.n	80099bc <__swhatbuf_r+0x24>

080099e4 <__smakebuf_r>:
 80099e4:	898b      	ldrh	r3, [r1, #12]
 80099e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099e8:	079d      	lsls	r5, r3, #30
 80099ea:	4606      	mov	r6, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	d507      	bpl.n	8009a00 <__smakebuf_r+0x1c>
 80099f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	6123      	str	r3, [r4, #16]
 80099f8:	2301      	movs	r3, #1
 80099fa:	6163      	str	r3, [r4, #20]
 80099fc:	b003      	add	sp, #12
 80099fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a00:	ab01      	add	r3, sp, #4
 8009a02:	466a      	mov	r2, sp
 8009a04:	f7ff ffc8 	bl	8009998 <__swhatbuf_r>
 8009a08:	9f00      	ldr	r7, [sp, #0]
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f7ff f866 	bl	8008ae0 <_malloc_r>
 8009a14:	b948      	cbnz	r0, 8009a2a <__smakebuf_r+0x46>
 8009a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a1a:	059a      	lsls	r2, r3, #22
 8009a1c:	d4ee      	bmi.n	80099fc <__smakebuf_r+0x18>
 8009a1e:	f023 0303 	bic.w	r3, r3, #3
 8009a22:	f043 0302 	orr.w	r3, r3, #2
 8009a26:	81a3      	strh	r3, [r4, #12]
 8009a28:	e7e2      	b.n	80099f0 <__smakebuf_r+0xc>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	6020      	str	r0, [r4, #0]
 8009a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	9b01      	ldr	r3, [sp, #4]
 8009a36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a3a:	b15b      	cbz	r3, 8009a54 <__smakebuf_r+0x70>
 8009a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a40:	4630      	mov	r0, r6
 8009a42:	f000 f81d 	bl	8009a80 <_isatty_r>
 8009a46:	b128      	cbz	r0, 8009a54 <__smakebuf_r+0x70>
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	f023 0303 	bic.w	r3, r3, #3
 8009a4e:	f043 0301 	orr.w	r3, r3, #1
 8009a52:	81a3      	strh	r3, [r4, #12]
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	431d      	orrs	r5, r3
 8009a58:	81a5      	strh	r5, [r4, #12]
 8009a5a:	e7cf      	b.n	80099fc <__smakebuf_r+0x18>

08009a5c <_fstat_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4d07      	ldr	r5, [pc, #28]	@ (8009a7c <_fstat_r+0x20>)
 8009a60:	2300      	movs	r3, #0
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	602b      	str	r3, [r5, #0]
 8009a6a:	f7f8 fd85 	bl	8002578 <_fstat>
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	d102      	bne.n	8009a78 <_fstat_r+0x1c>
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	b103      	cbz	r3, 8009a78 <_fstat_r+0x1c>
 8009a76:	6023      	str	r3, [r4, #0]
 8009a78:	bd38      	pop	{r3, r4, r5, pc}
 8009a7a:	bf00      	nop
 8009a7c:	200007a4 	.word	0x200007a4

08009a80 <_isatty_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d06      	ldr	r5, [pc, #24]	@ (8009a9c <_isatty_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	f7f8 fd84 	bl	8002598 <_isatty>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_isatty_r+0x1a>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_isatty_r+0x1a>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	200007a4 	.word	0x200007a4

08009aa0 <_init>:
 8009aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa2:	bf00      	nop
 8009aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa6:	bc08      	pop	{r3}
 8009aa8:	469e      	mov	lr, r3
 8009aaa:	4770      	bx	lr

08009aac <_fini>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	bf00      	nop
 8009ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab2:	bc08      	pop	{r3}
 8009ab4:	469e      	mov	lr, r3
 8009ab6:	4770      	bx	lr
