
video_signals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b94  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08007e34  08007e34  00008e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007fd0  08007fd0  00008fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007fd4  08007fd4  00008fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08007fd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000331c  2400006c  08008044  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003388  08008044  00009388  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018c8c  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e3d  00000000  00000000  00021d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012b0  00000000  00000000  00024b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e7e  00000000  00000000  00025e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003875f  00000000  00000000  00026c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019d1d  00000000  00000000  0005f3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f006  00000000  00000000  00079112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d8118  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005770  00000000  00000000  001d815c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001dd8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007e1c 	.word	0x08007e1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08007e1c 	.word	0x08007e1c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <LoadCLUTForGrayscale>:
	}


	uint32_t myCLUT[CLUT_SIZE];

	void LoadCLUTForGrayscale(LTDC_HandleTypeDef *hltdc, uint32_t layer) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	    for (uint32_t i = 0; i < CLUT_SIZE; i++) {
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	e011      	b.n	80006a4 <LoadCLUTForGrayscale+0x34>
	        uint32_t grayValue = i | (i << 8) | (i << 16) | (0xFF << 24); // ARGB format
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	021a      	lsls	r2, r3, #8
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	431a      	orrs	r2, r3
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	041b      	lsls	r3, r3, #16
 800068c:	4313      	orrs	r3, r2
 800068e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000692:	60fb      	str	r3, [r7, #12]
	        //i-red , i<<8 - green, i<<16- blue -> + alpha (always 0xFF -> 32bit ARGB format
	        myCLUT[i] = grayValue;
 8000694:	491e      	ldr	r1, [pc, #120]	@ (8000710 <LoadCLUTForGrayscale+0xa0>)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for (uint32_t i = 0; i < CLUT_SIZE; i++) {
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	2bff      	cmp	r3, #255	@ 0xff
 80006a8:	d9ea      	bls.n	8000680 <LoadCLUTForGrayscale+0x10>

	        }
	    HAL_LTDC_ConfigCLUT(hltdc, &myCLUT[0], CLUT_SIZE, layer);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006b0:	4917      	ldr	r1, [pc, #92]	@ (8000710 <LoadCLUTForGrayscale+0xa0>)
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fd94 	bl	80021e0 <HAL_LTDC_ConfigCLUT>
	    HAL_StatusTypeDef ReturnValue = HAL_LTDC_EnableCLUT(hltdc, layer);
 80006b8:	6839      	ldr	r1, [r7, #0]
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f001 fdfe 	bl	80022bc <HAL_LTDC_EnableCLUT>
 80006c0:	4603      	mov	r3, r0
 80006c2:	74fb      	strb	r3, [r7, #19]

	    	        switch (ReturnValue) {
 80006c4:	7cfb      	ldrb	r3, [r7, #19]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d81a      	bhi.n	8000700 <LoadCLUTForGrayscale+0x90>
 80006ca:	a201      	add	r2, pc, #4	@ (adr r2, 80006d0 <LoadCLUTForGrayscale+0x60>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e1 	.word	0x080006e1
 80006d4:	080006e9 	.word	0x080006e9
 80006d8:	080006f1 	.word	0x080006f1
 80006dc:	080006f9 	.word	0x080006f9
	    	            case HAL_OK:
	    	                printf("HAL_LTDC_EnableCLUT returned HAL_OK\n\r");
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <LoadCLUTForGrayscale+0xa4>)
 80006e2:	f006 fccf 	bl	8007084 <iprintf>
	    	                break;
 80006e6:	e00f      	b.n	8000708 <LoadCLUTForGrayscale+0x98>
	    	            case HAL_ERROR:
	    	                printf("HAL_LTDC_EnableCLUT returned HAL_ERROR\n\r");
 80006e8:	480b      	ldr	r0, [pc, #44]	@ (8000718 <LoadCLUTForGrayscale+0xa8>)
 80006ea:	f006 fccb 	bl	8007084 <iprintf>
	    	                break;
 80006ee:	e00b      	b.n	8000708 <LoadCLUTForGrayscale+0x98>
	    	            case HAL_BUSY:
	    	                printf("HAL_LTDC_EnableCLUT returned HAL_BUSY\n\r");
 80006f0:	480a      	ldr	r0, [pc, #40]	@ (800071c <LoadCLUTForGrayscale+0xac>)
 80006f2:	f006 fcc7 	bl	8007084 <iprintf>
	    	                break;
 80006f6:	e007      	b.n	8000708 <LoadCLUTForGrayscale+0x98>
	    	            case HAL_TIMEOUT:
	    	                printf("HAL_LTDC_EnableCLUT returned HAL_TIMEOUT\n\r");
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <LoadCLUTForGrayscale+0xb0>)
 80006fa:	f006 fcc3 	bl	8007084 <iprintf>
	    	                break;
 80006fe:	e003      	b.n	8000708 <LoadCLUTForGrayscale+0x98>
	    	            default:
	    	                printf("HAL_LTDC_EnableCLUT returned unknown status\n\r");
 8000700:	4808      	ldr	r0, [pc, #32]	@ (8000724 <LoadCLUTForGrayscale+0xb4>)
 8000702:	f006 fcbf 	bl	8007084 <iprintf>

	    }
	}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	24002e34 	.word	0x24002e34
 8000714:	08007e34 	.word	0x08007e34
 8000718:	08007e5c 	.word	0x08007e5c
 800071c:	08007e88 	.word	0x08007e88
 8000720:	08007eb0 	.word	0x08007eb0
 8000724:	08007edc 	.word	0x08007edc

08000728 <VerifyCLUTEntry>:

	void VerifyCLUTEntry(uint32_t index) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	    if (index < CLUT_SIZE) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2bff      	cmp	r3, #255	@ 0xff
 8000734:	d80a      	bhi.n	800074c <VerifyCLUTEntry+0x24>
	        uint32_t clutEntry = myCLUT[index];
 8000736:	4a09      	ldr	r2, [pc, #36]	@ (800075c <VerifyCLUTEntry+0x34>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073e:	60fb      	str	r3, [r7, #12]
	        printf("CLUT[%lu] = 0x%08lX\n\r", index, clutEntry);
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4806      	ldr	r0, [pc, #24]	@ (8000760 <VerifyCLUTEntry+0x38>)
 8000746:	f006 fc9d 	bl	8007084 <iprintf>
	    } else {
	        printf("Invalid CLUT index\n");
	    }
	}
 800074a:	e002      	b.n	8000752 <VerifyCLUTEntry+0x2a>
	        printf("Invalid CLUT index\n");
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <VerifyCLUTEntry+0x3c>)
 800074e:	f006 fd01 	bl	8007154 <puts>
	}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24002e34 	.word	0x24002e34
 8000760:	08007f0c 	.word	0x08007f0c
 8000764:	08007f24 	.word	0x08007f24

08000768 <testGenerator>:


	void testGenerator(uint8_t* buffer, uint16_t width, uint16_t height){
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	807b      	strh	r3, [r7, #2]
 8000774:	4613      	mov	r3, r2
 8000776:	803b      	strh	r3, [r7, #0]

		for (uint16_t y = 0; y < height; y++) {
 8000778:	2300      	movs	r3, #0
 800077a:	81fb      	strh	r3, [r7, #14]
 800077c:	e017      	b.n	80007ae <testGenerator+0x46>
			for (uint16_t x = 0; x < width; x++) {
 800077e:	2300      	movs	r3, #0
 8000780:	81bb      	strh	r3, [r7, #12]
 8000782:	e00d      	b.n	80007a0 <testGenerator+0x38>

				 buffer[y * width + x] = 0xD3;
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	887a      	ldrh	r2, [r7, #2]
 8000788:	fb03 f202 	mul.w	r2, r3, r2
 800078c:	89bb      	ldrh	r3, [r7, #12]
 800078e:	4413      	add	r3, r2
 8000790:	461a      	mov	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	22d3      	movs	r2, #211	@ 0xd3
 8000798:	701a      	strb	r2, [r3, #0]
			for (uint16_t x = 0; x < width; x++) {
 800079a:	89bb      	ldrh	r3, [r7, #12]
 800079c:	3301      	adds	r3, #1
 800079e:	81bb      	strh	r3, [r7, #12]
 80007a0:	89ba      	ldrh	r2, [r7, #12]
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d3ed      	bcc.n	8000784 <testGenerator+0x1c>
		for (uint16_t y = 0; y < height; y++) {
 80007a8:	89fb      	ldrh	r3, [r7, #14]
 80007aa:	3301      	adds	r3, #1
 80007ac:	81fb      	strh	r3, [r7, #14]
 80007ae:	89fa      	ldrh	r2, [r7, #14]
 80007b0:	883b      	ldrh	r3, [r7, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3e3      	bcc.n	800077e <testGenerator+0x16>
			}
		}

	}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <_write>:


	//UART, printf setup:
	int _write(int file, char *data, int len) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]

	        HAL_UART_Transmit(&huart3, (uint8_t*)data, len, HAL_MAX_DELAY);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <_write+0x28>)
 80007dc:	f004 ff72 	bl	80056c4 <HAL_UART_Transmit>
	        return len;
 80007e0:	687b      	ldr	r3, [r7, #4]

	}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	24000184 	.word	0x24000184

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 ff4d 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f847 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f000 f9fb 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000802:	f000 f97b 	bl	8000afc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000806:	f000 f9c5 	bl	8000b94 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 800080a:	f000 f8bb 	bl	8000984 <MX_I2C4_Init>
  MX_LTDC_Init();
 800080e:	f000 f8f9 	bl	8000a04 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_LTDC_GetState(&hltdc) != HAL_LTDC_STATE_READY)
 8000812:	481a      	ldr	r0, [pc, #104]	@ (800087c <main+0x8c>)
 8000814:	f001 fdba 	bl	800238c <HAL_LTDC_GetState>
 8000818:	4603      	mov	r3, r0
 800081a:	2b01      	cmp	r3, #1
 800081c:	d001      	beq.n	8000822 <main+0x32>
    	  {
    	      Error_Handler(); // Add appropriate error handling
 800081e:	f000 fad3 	bl	8000dc8 <Error_Handler>
    	  }

  printf("Hello, UART debug output!\n\r");
 8000822:	4817      	ldr	r0, [pc, #92]	@ (8000880 <main+0x90>)
 8000824:	f006 fc2e 	bl	8007084 <iprintf>

  LoadCLUTForGrayscale(&hltdc, 0); //layer 0
 8000828:	2100      	movs	r1, #0
 800082a:	4814      	ldr	r0, [pc, #80]	@ (800087c <main+0x8c>)
 800082c:	f7ff ff20 	bl	8000670 <LoadCLUTForGrayscale>
  //for example if imagebuffer == 0x80, it will look at what is the 128th (0x80 in dec)
  //index in the CLUT and have the outputs set accordingly
  //(in this case, put out 128 on the r,g and b pins)

  //generateTestPattern(ImageBuffer, IMAGE_WIDTH, IMAGE_HEIGHT);
  HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_IMMEDIATE);
 8000830:	2101      	movs	r1, #1
 8000832:	4812      	ldr	r0, [pc, #72]	@ (800087c <main+0x8c>)
 8000834:	f001 fd7b 	bl	800232e <HAL_LTDC_Reload>
  testGenerator(ImageBuffer, IMAGE_WIDTH, IMAGE_HEIGHT);
 8000838:	2264      	movs	r2, #100	@ 0x64
 800083a:	2164      	movs	r1, #100	@ 0x64
 800083c:	4811      	ldr	r0, [pc, #68]	@ (8000884 <main+0x94>)
 800083e:	f7ff ff93 	bl	8000768 <testGenerator>


  	  if (HAL_LTDC_GetState(&hltdc) != HAL_LTDC_STATE_READY)
 8000842:	480e      	ldr	r0, [pc, #56]	@ (800087c <main+0x8c>)
 8000844:	f001 fda2 	bl	800238c <HAL_LTDC_GetState>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d004      	beq.n	8000858 <main+0x68>
  	  {
  	      Error_Handler();
 800084e:	f000 fabb 	bl	8000dc8 <Error_Handler>
  	      printf("HIBA");
 8000852:	480d      	ldr	r0, [pc, #52]	@ (8000888 <main+0x98>)
 8000854:	f006 fc16 	bl	8007084 <iprintf>
  	  }


  //Tesztek:

  	for(int i=0; i<30; i++)
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	e009      	b.n	8000872 <main+0x82>
  	VerifyCLUTEntry(ImageBuffer[i]);
 800085e:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <main+0x94>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff5e 	bl	8000728 <VerifyCLUTEntry>
  	for(int i=0; i<30; i++)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b1d      	cmp	r3, #29
 8000876:	ddf2      	ble.n	800085e <main+0x6e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <main+0x88>
 800087c:	240000dc 	.word	0x240000dc
 8000880:	08007f38 	.word	0x08007f38
 8000884:	24000724 	.word	0x24000724
 8000888:	08007f54 	.word	0x08007f54

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b09c      	sub	sp, #112	@ 0x70
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	224c      	movs	r2, #76	@ 0x4c
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f006 fd3a 	bl	8007314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2220      	movs	r2, #32
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 fd34 	bl	8007314 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008ac:	2002      	movs	r0, #2
 80008ae:	f002 f85d 	bl	800296c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b31      	ldr	r3, [pc, #196]	@ (800097c <SystemClock_Config+0xf0>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ba:	4a30      	ldr	r2, [pc, #192]	@ (800097c <SystemClock_Config+0xf0>)
 80008bc:	f023 0301 	bic.w	r3, r3, #1
 80008c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008c2:	4b2e      	ldr	r3, [pc, #184]	@ (800097c <SystemClock_Config+0xf0>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <SystemClock_Config+0xf4>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000980 <SystemClock_Config+0xf4>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b28      	ldr	r3, [pc, #160]	@ (8000980 <SystemClock_Config+0xf4>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e8:	bf00      	nop
 80008ea:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <SystemClock_Config+0xf4>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008f6:	d1f8      	bne.n	80008ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f8:	2301      	movs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	2302      	movs	r3, #2
 8000908:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800090e:	2312      	movs	r3, #18
 8000910:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000916:	2303      	movs	r3, #3
 8000918:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800091e:	230c      	movs	r3, #12
 8000920:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000922:	2302      	movs	r3, #2
 8000924:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000926:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800092a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000930:	4618      	mov	r0, r3
 8000932:	f002 f865 	bl	8002a00 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800093c:	f000 fa44 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	233f      	movs	r3, #63	@ 0x3f
 8000942:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2303      	movs	r3, #3
 8000946:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800094c:	2308      	movs	r3, #8
 800094e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800095c:	2340      	movs	r3, #64	@ 0x40
 800095e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fca5 	bl	80032b4 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000970:	f000 fa2a 	bl	8000dc8 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3770      	adds	r7, #112	@ 0x70
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58000400 	.word	0x58000400
 8000980:	58024800 	.word	0x58024800

08000984 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_I2C4_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <MX_I2C4_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x0040486C;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_I2C4_Init+0x74>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	@ (8000a00 <MX_I2C4_Init+0x7c>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_I2C4_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <MX_I2C4_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009be:	480e      	ldr	r0, [pc, #56]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009c0:	f001 f9d8 	bl	8001d74 <HAL_I2C_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009ca:	f000 f9fd 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009d2:	f001 fa5f 	bl	8001e94 <HAL_I2CEx_ConfigAnalogFilter>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 f9f4 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_I2C4_Init+0x74>)
 80009e4:	f001 faa1 	bl	8001f2a <HAL_I2CEx_ConfigDigitalFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 f9eb 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24000088 	.word	0x24000088
 80009fc:	58001c00 	.word	0x58001c00
 8000a00:	0040486c 	.word	0x0040486c

08000a04 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	@ 0x38
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2234      	movs	r2, #52	@ 0x34
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f006 fc7f 	bl	8007314 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a16:	4b36      	ldr	r3, [pc, #216]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a18:	4a36      	ldr	r2, [pc, #216]	@ (8000af4 <MX_LTDC_Init+0xf0>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a1c:	4b34      	ldr	r3, [pc, #208]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a22:	4b33      	ldr	r3, [pc, #204]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a28:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a2e:	4b30      	ldr	r3, [pc, #192]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 17;
 8000a34:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a36:	2211      	movs	r2, #17
 8000a38:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 13;
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a3c:	220d      	movs	r2, #13
 8000a3e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 34;
 8000a40:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a42:	2222      	movs	r2, #34	@ 0x22
 8000a44:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 25;
 8000a46:	4b2a      	ldr	r3, [pc, #168]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a48:	2219      	movs	r2, #25
 8000a4a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 134;
 8000a4c:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a4e:	2286      	movs	r2, #134	@ 0x86
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 125;
 8000a52:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a54:	227d      	movs	r2, #125	@ 0x7d
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 150;
 8000a58:	4b25      	ldr	r3, [pc, #148]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a5a:	2296      	movs	r2, #150	@ 0x96
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 127;
 8000a5e:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a60:	227f      	movs	r2, #127	@ 0x7f
 8000a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a64:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a6c:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a7c:	481c      	ldr	r0, [pc, #112]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000a7e:	f001 faa1 	bl	8001fc4 <HAL_LTDC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_LTDC_Init+0x88>
  {
    Error_Handler();
 8000a88:	f000 f99e 	bl	8000dc8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 100;
 8000a90:	2364      	movs	r3, #100	@ 0x64
 8000a92:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 100;
 8000a98:	2364      	movs	r3, #100	@ 0x64
 8000a9a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000aa0:	23ff      	movs	r3, #255	@ 0xff
 8000aa2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aac:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = (uint32_t)ImageBuffer;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_LTDC_Init+0xf4>)
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 100;
 8000ab6:	2364      	movs	r3, #100	@ 0x64
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 100;
 8000aba:	2364      	movs	r3, #100	@ 0x64
 8000abc:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <MX_LTDC_Init+0xec>)
 8000ad8:	f001 fb44 	bl	8002164 <HAL_LTDC_ConfigLayer>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_LTDC_Init+0xe2>
  {
    Error_Handler();
 8000ae2:	f000 f971 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	@ 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	240000dc 	.word	0x240000dc
 8000af4:	50001000 	.word	0x50001000
 8000af8:	24000724 	.word	0x24000724

08000afc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b02:	4a23      	ldr	r2, [pc, #140]	@ (8000b90 <MX_USART3_UART_Init+0x94>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b06:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b44:	4811      	ldr	r0, [pc, #68]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b46:	f004 fd6d 	bl	8005624 <HAL_UART_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b50:	f000 f93a 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b54:	2100      	movs	r1, #0
 8000b56:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b58:	f005 fdfd 	bl	8006756 <HAL_UARTEx_SetTxFifoThreshold>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b62:	f000 f931 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b6a:	f005 fe32 	bl	80067d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b74:	f000 f928 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b7a:	f005 fdb3 	bl	80066e4 <HAL_UARTEx_DisableFifoMode>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b84:	f000 f920 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	24000184 	.word	0x24000184
 8000b90:	40004800 	.word	0x40004800

08000b94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9a:	4a16      	ldr	r2, [pc, #88]	@ (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba0:	2209      	movs	r2, #9
 8000ba2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bdc:	f001 fd7e 	bl	80026dc <HAL_PCD_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000be6:	f000 f8ef 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	24000218 	.word	0x24000218
 8000bf4:	40080000 	.word	0x40080000

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	@ 0x38
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0e:	4b68      	ldr	r3, [pc, #416]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	4a66      	ldr	r2, [pc, #408]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1e:	4b64      	ldr	r3, [pc, #400]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	623b      	str	r3, [r7, #32]
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b60      	ldr	r3, [pc, #384]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	4a5f      	ldr	r2, [pc, #380]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4a:	4b59      	ldr	r3, [pc, #356]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	4a57      	ldr	r2, [pc, #348]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c52:	f043 0320 	orr.w	r3, r3, #32
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5a:	4b55      	ldr	r3, [pc, #340]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	f003 0320 	and.w	r3, r3, #32
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c68:	4b51      	ldr	r3, [pc, #324]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	4a50      	ldr	r2, [pc, #320]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c78:	4b4d      	ldr	r3, [pc, #308]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b4a      	ldr	r3, [pc, #296]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a48      	ldr	r2, [pc, #288]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b46      	ldr	r3, [pc, #280]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b42      	ldr	r3, [pc, #264]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	4a41      	ldr	r2, [pc, #260]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a39      	ldr	r2, [pc, #228]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b37      	ldr	r3, [pc, #220]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce0:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	4a32      	ldr	r2, [pc, #200]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <MX_GPIO_Init+0x1b8>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LD1_Pin|USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	21c0      	movs	r1, #192	@ 0xc0
 8000d02:	482c      	ldr	r0, [pc, #176]	@ (8000db4 <MX_GPIO_Init+0x1bc>)
 8000d04:	f001 f81c 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d0e:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <MX_GPIO_Init+0x1c0>)
 8000d10:	f001 f816 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2102      	movs	r1, #2
 8000d18:	4828      	ldr	r0, [pc, #160]	@ (8000dbc <MX_GPIO_Init+0x1c4>)
 8000d1a:	f001 f811 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4823      	ldr	r0, [pc, #140]	@ (8000dc0 <MX_GPIO_Init+0x1c8>)
 8000d34:	f000 fe54 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|USB_OTG_FS_PWR_EN_Pin;
 8000d38:	23c0      	movs	r3, #192	@ 0xc0
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4819      	ldr	r0, [pc, #100]	@ (8000db4 <MX_GPIO_Init+0x1bc>)
 8000d50:	f000 fe46 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <MX_GPIO_Init+0x1c0>)
 8000d6e:	f000 fe37 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d72:	2380      	movs	r3, #128	@ 0x80
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	480f      	ldr	r0, [pc, #60]	@ (8000dc4 <MX_GPIO_Init+0x1cc>)
 8000d88:	f000 fe2a 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_GPIO_Init+0x1c4>)
 8000da4:	f000 fe1c 	bl	80019e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da8:	bf00      	nop
 8000daa:	3738      	adds	r7, #56	@ 0x38
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58021400 	.word	0x58021400
 8000db8:	58020400 	.word	0x58020400
 8000dbc:	58021000 	.word	0x58021000
 8000dc0:	58020800 	.word	0x58020800
 8000dc4:	58021800 	.word	0x58021800

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de0:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_MspInit+0x30>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_MspInit+0x30>)
 8000dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	58024400 	.word	0x58024400

08000e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	22c0      	movs	r2, #192	@ 0xc0
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 fa73 	bl	8007314 <memset>
  if(hi2c->Instance==I2C4)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a27      	ldr	r2, [pc, #156]	@ (8000ed0 <HAL_I2C_MspInit+0xc8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d146      	bne.n	8000ec6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000e38:	f04f 0210 	mov.w	r2, #16
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fdbc 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e5a:	f7ff ffb5 	bl	8000dc8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed4 <HAL_I2C_MspInit+0xcc>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed4 <HAL_I2C_MspInit+0xcc>)
 8000e66:	f043 0320 	orr.w	r3, r3, #32
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <HAL_I2C_MspInit+0xcc>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e7c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e96:	2304      	movs	r3, #4
 8000e98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <HAL_I2C_MspInit+0xd0>)
 8000ea4:	f000 fd9c 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_I2C_MspInit+0xcc>)
 8000eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eae:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <HAL_I2C_MspInit+0xcc>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_I2C_MspInit+0xcc>)
 8000eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	37e8      	adds	r7, #232	@ 0xe8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	58001c00 	.word	0x58001c00
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	58021400 	.word	0x58021400

08000edc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0c0      	sub	sp, #256	@ 0x100
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ef8:	22c0      	movs	r2, #192	@ 0xc0
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fa09 	bl	8007314 <memset>
  if(hltdc->Instance==LTDC)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4ab3      	ldr	r2, [pc, #716]	@ (80011d4 <HAL_LTDC_MspInit+0x2f8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	f040 815d 	bne.w	80011c8 <HAL_LTDC_MspInit+0x2ec>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f0e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 8;
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3N = 151;
 8000f1e:	2397      	movs	r3, #151	@ 0x97
 8000f20:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 128;
 8000f2a:	2380      	movs	r3, #128	@ 0x80
 8000f2c:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f36:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 fd43 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000f4c:	f7ff ff3c 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f50:	4ba1      	ldr	r3, [pc, #644]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000f52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f56:	4aa0      	ldr	r2, [pc, #640]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8000f60:	4b9d      	ldr	r3, [pc, #628]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000f62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	4b9a      	ldr	r3, [pc, #616]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f74:	4a98      	ldr	r2, [pc, #608]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000f76:	f043 0310 	orr.w	r3, r3, #16
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7e:	4b96      	ldr	r3, [pc, #600]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	623b      	str	r3, [r7, #32]
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f8c:	4b92      	ldr	r3, [pc, #584]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	4a91      	ldr	r2, [pc, #580]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000f94:	f043 0320 	orr.w	r3, r3, #32
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9c:	4b8e      	ldr	r3, [pc, #568]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b8b      	ldr	r3, [pc, #556]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb0:	4a89      	ldr	r2, [pc, #548]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fba:	4b87      	ldr	r3, [pc, #540]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b83      	ldr	r3, [pc, #524]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fce:	4a82      	ldr	r2, [pc, #520]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd8:	4b7f      	ldr	r3, [pc, #508]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	4a7a      	ldr	r2, [pc, #488]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff6:	4b78      	ldr	r3, [pc, #480]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001004:	4b74      	ldr	r3, [pc, #464]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	4a73      	ldr	r2, [pc, #460]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001014:	4b70      	ldr	r3, [pc, #448]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001022:	4b6d      	ldr	r3, [pc, #436]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	4a6b      	ldr	r2, [pc, #428]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 800102a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001032:	4b69      	ldr	r3, [pc, #420]	@ (80011d8 <HAL_LTDC_MspInit+0x2fc>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    PG13     ------> LTDC_R0
    PG14     ------> LTDC_B0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8001040:	f645 0320 	movw	r3, #22560	@ 0x5820
 8001044:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800105a:	230e      	movs	r3, #14
 800105c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001060:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001064:	4619      	mov	r1, r3
 8001066:	485d      	ldr	r0, [pc, #372]	@ (80011dc <HAL_LTDC_MspInit+0x300>)
 8001068:	f000 fcba 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800106c:	2340      	movs	r3, #64	@ 0x40
 800106e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001084:	230e      	movs	r3, #14
 8001086:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800108e:	4619      	mov	r1, r3
 8001090:	4852      	ldr	r0, [pc, #328]	@ (80011dc <HAL_LTDC_MspInit+0x300>)
 8001092:	f000 fca5 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b0:	230e      	movs	r3, #14
 80010b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80010ba:	4619      	mov	r1, r3
 80010bc:	4848      	ldr	r0, [pc, #288]	@ (80011e0 <HAL_LTDC_MspInit+0x304>)
 80010be:	f000 fc8f 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80010c2:	f240 43c1 	movw	r3, #1217	@ 0x4c1
 80010c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010dc:	230e      	movs	r3, #14
 80010de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80010e6:	4619      	mov	r1, r3
 80010e8:	483e      	ldr	r0, [pc, #248]	@ (80011e4 <HAL_LTDC_MspInit+0x308>)
 80010ea:	f000 fc79 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80010ee:	f240 437c 	movw	r3, #1148	@ 0x47c
 80010f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                          |GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001108:	230e      	movs	r3, #14
 800110a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001112:	4619      	mov	r1, r3
 8001114:	4834      	ldr	r0, [pc, #208]	@ (80011e8 <HAL_LTDC_MspInit+0x30c>)
 8001116:	f000 fc63 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800111a:	2303      	movs	r3, #3
 800111c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001132:	2309      	movs	r3, #9
 8001134:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800113c:	4619      	mov	r1, r3
 800113e:	482b      	ldr	r0, [pc, #172]	@ (80011ec <HAL_LTDC_MspInit+0x310>)
 8001140:	f000 fc4e 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001144:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001148:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115e:	230e      	movs	r3, #14
 8001160:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001168:	4619      	mov	r1, r3
 800116a:	4820      	ldr	r0, [pc, #128]	@ (80011ec <HAL_LTDC_MspInit+0x310>)
 800116c:	f000 fc38 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001170:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001174:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800118a:	230e      	movs	r3, #14
 800118c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001190:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001194:	4619      	mov	r1, r3
 8001196:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <HAL_LTDC_MspInit+0x314>)
 8001198:	f000 fc22 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 800119c:	f246 4340 	movw	r3, #25664	@ 0x6440
 80011a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b6:	230e      	movs	r3, #14
 80011b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011bc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80011c0:	4619      	mov	r1, r3
 80011c2:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <HAL_LTDC_MspInit+0x318>)
 80011c4:	f000 fc0c 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	50001000 	.word	0x50001000
 80011d8:	58024400 	.word	0x58024400
 80011dc:	58021000 	.word	0x58021000
 80011e0:	58021400 	.word	0x58021400
 80011e4:	58020800 	.word	0x58020800
 80011e8:	58020000 	.word	0x58020000
 80011ec:	58020400 	.word	0x58020400
 80011f0:	58020c00 	.word	0x58020c00
 80011f4:	58021800 	.word	0x58021800

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0ba      	sub	sp, #232	@ 0xe8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	22c0      	movs	r2, #192	@ 0xc0
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f006 f87b 	bl	8007314 <memset>
  if(huart->Instance==USART3)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a27      	ldr	r2, [pc, #156]	@ (80012c0 <HAL_UART_MspInit+0xc8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d146      	bne.n	80012b6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001228:	f04f 0202 	mov.w	r2, #2
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fbc4 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800124a:	f7ff fdbd 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <HAL_UART_MspInit+0xcc>)
 8001250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001254:	4a1b      	ldr	r2, [pc, #108]	@ (80012c4 <HAL_UART_MspInit+0xcc>)
 8001256:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800125a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_UART_MspInit+0xcc>)
 8001260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_UART_MspInit+0xcc>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001272:	4a14      	ldr	r2, [pc, #80]	@ (80012c4 <HAL_UART_MspInit+0xcc>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_UART_MspInit+0xcc>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800128a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800128e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012a4:	2307      	movs	r3, #7
 80012a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <HAL_UART_MspInit+0xd0>)
 80012b2:	f000 fb95 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	37e8      	adds	r7, #232	@ 0xe8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40004800 	.word	0x40004800
 80012c4:	58024400 	.word	0x58024400
 80012c8:	58020c00 	.word	0x58020c00

080012cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ba      	sub	sp, #232	@ 0xe8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	22c0      	movs	r2, #192	@ 0xc0
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 f811 	bl	8007314 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a30      	ldr	r2, [pc, #192]	@ (80013b8 <HAL_PCD_MspInit+0xec>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d159      	bne.n	80013b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001308:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800130c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fb59 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001320:	f7ff fd52 	bl	8000dc8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001324:	f001 fb5c 	bl	80029e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <HAL_PCD_MspInit+0xf0>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132e:	4a23      	ldr	r2, [pc, #140]	@ (80013bc <HAL_PCD_MspInit+0xf0>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001338:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <HAL_PCD_MspInit+0xf0>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800135e:	4619      	mov	r1, r3
 8001360:	4817      	ldr	r0, [pc, #92]	@ (80013c0 <HAL_PCD_MspInit+0xf4>)
 8001362:	f000 fb3d 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001366:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800136a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001380:	230a      	movs	r3, #10
 8001382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <HAL_PCD_MspInit+0xf4>)
 800138e:	f000 fb27 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_PCD_MspInit+0xf0>)
 8001394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001398:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <HAL_PCD_MspInit+0xf0>)
 800139a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800139e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_PCD_MspInit+0xf0>)
 80013a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	37e8      	adds	r7, #232	@ 0xe8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40080000 	.word	0x40080000
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58020000 	.word	0x58020000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <NMI_Handler+0x4>

080013cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141a:	f000 f9ad 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}

08001422 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e00a      	b.n	800144a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001434:	f3af 8000 	nop.w
 8001438:	4601      	mov	r1, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	60ba      	str	r2, [r7, #8]
 8001440:	b2ca      	uxtb	r2, r1
 8001442:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	429a      	cmp	r2, r3
 8001450:	dbf0      	blt.n	8001434 <_read+0x12>
  }

  return len;
 8001452:	687b      	ldr	r3, [r7, #4]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_close>:
  }
  return len;
}

int _close(int file)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001484:	605a      	str	r2, [r3, #4]
  return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_isatty>:

int _isatty(int file)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	@ (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	@ (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f005 ff5c 	bl	80073b0 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24080000 	.word	0x24080000
 8001524:	00000400 	.word	0x00000400
 8001528:	24003234 	.word	0x24003234
 800152c:	24003388 	.word	0x24003388

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001534:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <SystemInit+0xe4>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153a:	4a36      	ldr	r2, [pc, #216]	@ (8001614 <SystemInit+0xe4>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001544:	4b34      	ldr	r3, [pc, #208]	@ (8001618 <SystemInit+0xe8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	2b06      	cmp	r3, #6
 800154e:	d807      	bhi.n	8001560 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001550:	4b31      	ldr	r3, [pc, #196]	@ (8001618 <SystemInit+0xe8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 030f 	bic.w	r3, r3, #15
 8001558:	4a2f      	ldr	r2, [pc, #188]	@ (8001618 <SystemInit+0xe8>)
 800155a:	f043 0307 	orr.w	r3, r3, #7
 800155e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001560:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <SystemInit+0xec>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2d      	ldr	r2, [pc, #180]	@ (800161c <SystemInit+0xec>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800156c:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <SystemInit+0xec>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001572:	4b2a      	ldr	r3, [pc, #168]	@ (800161c <SystemInit+0xec>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4929      	ldr	r1, [pc, #164]	@ (800161c <SystemInit+0xec>)
 8001578:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <SystemInit+0xf0>)
 800157a:	4013      	ands	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800157e:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <SystemInit+0xe8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800158a:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <SystemInit+0xe8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 030f 	bic.w	r3, r3, #15
 8001592:	4a21      	ldr	r2, [pc, #132]	@ (8001618 <SystemInit+0xe8>)
 8001594:	f043 0307 	orr.w	r3, r3, #7
 8001598:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <SystemInit+0xec>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <SystemInit+0xec>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <SystemInit+0xec>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <SystemInit+0xec>)
 80015ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001624 <SystemInit+0xf4>)
 80015b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <SystemInit+0xec>)
 80015b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <SystemInit+0xf8>)
 80015b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <SystemInit+0xec>)
 80015ba:	4a1c      	ldr	r2, [pc, #112]	@ (800162c <SystemInit+0xfc>)
 80015bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <SystemInit+0xec>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <SystemInit+0xec>)
 80015c6:	4a19      	ldr	r2, [pc, #100]	@ (800162c <SystemInit+0xfc>)
 80015c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <SystemInit+0xec>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <SystemInit+0xec>)
 80015d2:	4a16      	ldr	r2, [pc, #88]	@ (800162c <SystemInit+0xfc>)
 80015d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <SystemInit+0xec>)
 80015d8:	2200      	movs	r2, #0
 80015da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <SystemInit+0xec>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <SystemInit+0xec>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <SystemInit+0xec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <SystemInit+0x100>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <SystemInit+0x104>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015fa:	d202      	bcs.n	8001602 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <SystemInit+0x108>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <SystemInit+0x10c>)
 8001604:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001608:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00
 8001618:	52002000 	.word	0x52002000
 800161c:	58024400 	.word	0x58024400
 8001620:	eaf6ed7f 	.word	0xeaf6ed7f
 8001624:	02020200 	.word	0x02020200
 8001628:	01ff0000 	.word	0x01ff0000
 800162c:	01010280 	.word	0x01010280
 8001630:	5c001000 	.word	0x5c001000
 8001634:	ffff0000 	.word	0xffff0000
 8001638:	51008108 	.word	0x51008108
 800163c:	52004000 	.word	0x52004000

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001644:	f7ff ff74 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f005 fea5 	bl	80073bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7ff f8bd 	bl	80007f0 <main>
  bx  lr
 8001676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800167c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001680:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001684:	08007fd8 	.word	0x08007fd8
  ldr r2, =_sbss
 8001688:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800168c:	24003388 	.word	0x24003388

08001690 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC3_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 f96e 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016a0:	f001 ffbe 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_Init+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	4913      	ldr	r1, [pc, #76]	@ (8001700 <HAL_Init+0x6c>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_Init+0x68>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001700 <HAL_Init+0x6c>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_Init+0x70>)
 80016d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001708 <HAL_Init+0x74>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f814 	bl	800170c <HAL_InitTick>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e002      	b.n	80016f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ee:	f7ff fb71 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	58024400 	.word	0x58024400
 8001700:	08007f5c 	.word	0x08007f5c
 8001704:	24000004 	.word	0x24000004
 8001708:	24000000 	.word	0x24000000

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <HAL_InitTick+0x60>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e021      	b.n	8001764 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001720:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <HAL_InitTick+0x64>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <HAL_InitTick+0x60>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f945 	bl	80019c6 <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f91d 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <HAL_InitTick+0x68>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2400000c 	.word	0x2400000c
 8001770:	24000000 	.word	0x24000000
 8001774:	24000008 	.word	0x24000008

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2400000c 	.word	0x2400000c
 800179c:	24003238 	.word	0x24003238

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	24003238 	.word	0x24003238

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_Delay+0x44>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2400000c 	.word	0x2400000c

08001800 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_GetREVID+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0c1b      	lsrs	r3, r3, #16
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	5c001000 	.word	0x5c001000

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	4313      	orrs	r3, r2
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00
 800185c:	05fa0000 	.word	0x05fa0000

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	@ (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	@ 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff47 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff5e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff90 	bl	80018d0 <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5f 	bl	800187c <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffb2 	bl	8001938 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019ee:	4b89      	ldr	r3, [pc, #548]	@ (8001c14 <HAL_GPIO_Init+0x234>)
 80019f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019f2:	e194      	b.n	8001d1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8186 	beq.w	8001d18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d005      	beq.n	8001a24 <HAL_GPIO_Init+0x44>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d130      	bne.n	8001a86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 0201 	and.w	r2, r3, #1
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d017      	beq.n	8001ac2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d123      	bne.n	8001b16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	69b9      	ldr	r1, [r7, #24]
 8001b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0203 	and.w	r2, r3, #3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80e0 	beq.w	8001d18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b58:	4b2f      	ldr	r3, [pc, #188]	@ (8001c18 <HAL_GPIO_Init+0x238>)
 8001b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b5e:	4a2e      	ldr	r2, [pc, #184]	@ (8001c18 <HAL_GPIO_Init+0x238>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b68:	4b2b      	ldr	r3, [pc, #172]	@ (8001c18 <HAL_GPIO_Init+0x238>)
 8001b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b76:	4a29      	ldr	r2, [pc, #164]	@ (8001c1c <HAL_GPIO_Init+0x23c>)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	@ (8001c20 <HAL_GPIO_Init+0x240>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d052      	beq.n	8001c48 <HAL_GPIO_Init+0x268>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c24 <HAL_GPIO_Init+0x244>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d031      	beq.n	8001c0e <HAL_GPIO_Init+0x22e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1e      	ldr	r2, [pc, #120]	@ (8001c28 <HAL_GPIO_Init+0x248>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d02b      	beq.n	8001c0a <HAL_GPIO_Init+0x22a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_GPIO_Init+0x24c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d025      	beq.n	8001c06 <HAL_GPIO_Init+0x226>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c30 <HAL_GPIO_Init+0x250>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01f      	beq.n	8001c02 <HAL_GPIO_Init+0x222>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c34 <HAL_GPIO_Init+0x254>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d019      	beq.n	8001bfe <HAL_GPIO_Init+0x21e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <HAL_GPIO_Init+0x258>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0x21a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	@ (8001c3c <HAL_GPIO_Init+0x25c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_GPIO_Init+0x216>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <HAL_GPIO_Init+0x260>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <HAL_GPIO_Init+0x264>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bea:	2309      	movs	r3, #9
 8001bec:	e02d      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001bee:	230a      	movs	r3, #10
 8001bf0:	e02b      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	e029      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	e027      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	e025      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001bfe:	2305      	movs	r3, #5
 8001c00:	e023      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001c02:	2304      	movs	r3, #4
 8001c04:	e021      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001c06:	2303      	movs	r3, #3
 8001c08:	e01f      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e01d      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e01b      	b.n	8001c4a <HAL_GPIO_Init+0x26a>
 8001c12:	bf00      	nop
 8001c14:	58000080 	.word	0x58000080
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	58000400 	.word	0x58000400
 8001c20:	58020000 	.word	0x58020000
 8001c24:	58020400 	.word	0x58020400
 8001c28:	58020800 	.word	0x58020800
 8001c2c:	58020c00 	.word	0x58020c00
 8001c30:	58021000 	.word	0x58021000
 8001c34:	58021400 	.word	0x58021400
 8001c38:	58021800 	.word	0x58021800
 8001c3c:	58021c00 	.word	0x58021c00
 8001c40:	58022000 	.word	0x58022000
 8001c44:	58022400 	.word	0x58022400
 8001c48:	2300      	movs	r3, #0
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	f002 0203 	and.w	r2, r2, #3
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	4093      	lsls	r3, r2
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c5a:	4938      	ldr	r1, [pc, #224]	@ (8001d3c <HAL_GPIO_Init+0x35c>)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f47f ae63 	bne.w	80019f4 <HAL_GPIO_Init+0x14>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	3724      	adds	r7, #36	@ 0x24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	58000400 	.word	0x58000400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e07f      	b.n	8001e86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff f834 	bl	8000e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	@ 0x24
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	e006      	b.n	8001dfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001dfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d104      	bne.n	8001e0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <HAL_I2C_Init+0x11c>)
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69d9      	ldr	r1, [r3, #28]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1a      	ldr	r2, [r3, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	02008000 	.word	0x02008000

08001e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d138      	bne.n	8001f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e032      	b.n	8001f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2224      	movs	r2, #36	@ 0x24
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6819      	ldr	r1, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e000      	b.n	8001f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d139      	bne.n	8001fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e033      	b.n	8001fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2224      	movs	r2, #36	@ 0x24
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fb4:	2302      	movs	r3, #2
  }
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0bf      	b.n	8002156 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe ff76 	bl	8000edc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002006:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6999      	ldr	r1, [r3, #24]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800201c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6899      	ldr	r1, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b4a      	ldr	r3, [pc, #296]	@ (8002160 <HAL_LTDC_Init+0x19c>)
 8002038:	400b      	ands	r3, r1
 800203a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68d9      	ldr	r1, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b3e      	ldr	r3, [pc, #248]	@ (8002160 <HAL_LTDC_Init+0x19c>)
 8002066:	400b      	ands	r3, r1
 8002068:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	041b      	lsls	r3, r3, #16
 8002070:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68d9      	ldr	r1, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6919      	ldr	r1, [r3, #16]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <HAL_LTDC_Init+0x19c>)
 8002094:	400b      	ands	r3, r1
 8002096:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6919      	ldr	r1, [r3, #16]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6959      	ldr	r1, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <HAL_LTDC_Init+0x19c>)
 80020c2:	400b      	ands	r3, r1
 80020c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6959      	ldr	r1, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80020f4:	041b      	lsls	r3, r3, #16
 80020f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0206 	orr.w	r2, r2, #6
 8002132:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	f000f800 	.word	0xf000f800

08002164 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_LTDC_ConfigLayer+0x1a>
 800217a:	2302      	movs	r3, #2
 800217c:	e02c      	b.n	80021d8 <HAL_LTDC_ConfigLayer+0x74>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2134      	movs	r1, #52	@ 0x34
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4614      	mov	r4, r2
 80021a2:	461d      	mov	r5, r3
 80021a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f8f5 	bl	80023a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bdb0      	pop	{r4, r5, r7, pc}

080021e0 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	@ 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  uint32_t tmp;
  uint32_t counter;
  uint32_t *pcolorlut = pCLUT;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_LTDC_ConfigCLUT+0x20>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e057      	b.n	80022b0 <HAL_LTDC_ConfigCLUT+0xd0>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  for (counter = 0U; (counter < CLUTSize); counter++)
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e03f      	b.n	8002296 <HAL_LTDC_ConfigCLUT+0xb6>
  {
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2134      	movs	r1, #52	@ 0x34
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3348      	adds	r3, #72	@ 0x48
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b06      	cmp	r3, #6
 8002228:	d114      	bne.n	8002254 <HAL_LTDC_ConfigCLUT+0x74>
    {
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	061a      	lsls	r2, r3, #24
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	431a      	orrs	r2, r3
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 8002244:	431a      	orrs	r2, r3
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
      tmp  = (((counter + (16U * counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 800224e:	4313      	orrs	r3, r2
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e010      	b.n	8002276 <HAL_LTDC_ConfigCLUT+0x96>
    }
    else
    {
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	061a      	lsls	r2, r3, #24
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	431a      	orrs	r2, r3
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 8002268:	431a      	orrs	r2, r3
              ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | \
 8002272:	4313      	orrs	r3, r2
 8002274:	61fb      	str	r3, [r7, #28]
    }

    pcolorlut++;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3304      	adds	r3, #4
 800227a:	617b      	str	r3, [r7, #20]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	01db      	lsls	r3, r3, #7
 8002286:	4413      	add	r3, r2
 8002288:	3384      	adds	r3, #132	@ 0x84
 800228a:	461a      	mov	r2, r3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	6413      	str	r3, [r2, #64]	@ 0x40
  for (counter = 0U; (counter < CLUTSize); counter++)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	3301      	adds	r3, #1
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d3bb      	bcc.n	8002216 <HAL_LTDC_ConfigCLUT+0x36>
  }

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3724      	adds	r7, #36	@ 0x24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_LTDC_EnableCLUT+0x18>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e026      	b.n	8002322 <HAL_LTDC_EnableCLUT+0x66>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	01db      	lsls	r3, r3, #7
 80022ee:	4413      	add	r3, r2
 80022f0:	3384      	adds	r3, #132	@ 0x84
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	4611      	mov	r1, r2
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	01d2      	lsls	r2, r2, #7
 80022fe:	440a      	add	r2, r1
 8002300:	3284      	adds	r2, #132	@ 0x84
 8002302:	f043 0310 	orr.w	r3, r3, #16
 8002306:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_LTDC_Reload+0x18>
 8002342:	2302      	movs	r3, #2
 8002344:	e01c      	b.n	8002380 <HAL_LTDC_Reload+0x52>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0208 	orr.w	r2, r2, #8
 8002364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800239a:	b2db      	uxtb	r3, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	@ 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	4413      	add	r3, r2
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	01db      	lsls	r3, r3, #7
 80023d4:	4413      	add	r3, r2
 80023d6:	3384      	adds	r3, #132	@ 0x84
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	4611      	mov	r1, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	01d2      	lsls	r2, r2, #7
 80023e4:	440a      	add	r2, r1
 80023e6:	3284      	adds	r2, #132	@ 0x84
 80023e8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80023ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0c1b      	lsrs	r3, r3, #16
 80023fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80023fe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002400:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	01db      	lsls	r3, r3, #7
 800240c:	440b      	add	r3, r1
 800240e:	3384      	adds	r3, #132	@ 0x84
 8002410:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002416:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002426:	4413      	add	r3, r2
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	01db      	lsls	r3, r3, #7
 8002436:	4413      	add	r3, r2
 8002438:	3384      	adds	r3, #132	@ 0x84
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	4611      	mov	r1, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	01d2      	lsls	r2, r2, #7
 8002446:	440a      	add	r2, r1
 8002448:	3284      	adds	r2, #132	@ 0x84
 800244a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800244e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800245e:	4413      	add	r3, r2
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4619      	mov	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	01db      	lsls	r3, r3, #7
 800246c:	440b      	add	r3, r1
 800246e:	3384      	adds	r3, #132	@ 0x84
 8002470:	4619      	mov	r1, r3
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	01db      	lsls	r3, r3, #7
 8002482:	4413      	add	r3, r2
 8002484:	3384      	adds	r3, #132	@ 0x84
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4611      	mov	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	01d2      	lsls	r2, r2, #7
 8002492:	440a      	add	r2, r1
 8002494:	3284      	adds	r2, #132	@ 0x84
 8002496:	f023 0307 	bic.w	r3, r3, #7
 800249a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	01db      	lsls	r3, r3, #7
 80024a6:	4413      	add	r3, r2
 80024a8:	3384      	adds	r3, #132	@ 0x84
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	061b      	lsls	r3, r3, #24
 80024cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	01db      	lsls	r3, r3, #7
 80024d8:	4413      	add	r3, r2
 80024da:	3384      	adds	r3, #132	@ 0x84
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	01db      	lsls	r3, r3, #7
 80024e8:	4413      	add	r3, r2
 80024ea:	3384      	adds	r3, #132	@ 0x84
 80024ec:	461a      	mov	r2, r3
 80024ee:	2300      	movs	r3, #0
 80024f0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024f8:	461a      	mov	r2, r3
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	01db      	lsls	r3, r3, #7
 800250c:	440b      	add	r3, r1
 800250e:	3384      	adds	r3, #132	@ 0x84
 8002510:	4619      	mov	r1, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	01db      	lsls	r3, r3, #7
 8002522:	4413      	add	r3, r2
 8002524:	3384      	adds	r3, #132	@ 0x84
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4611      	mov	r1, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	01d2      	lsls	r2, r2, #7
 8002532:	440a      	add	r2, r1
 8002534:	3284      	adds	r2, #132	@ 0x84
 8002536:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800253a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	01db      	lsls	r3, r3, #7
 8002546:	4413      	add	r3, r2
 8002548:	3384      	adds	r3, #132	@ 0x84
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	01db      	lsls	r3, r3, #7
 800255c:	4413      	add	r3, r2
 800255e:	3384      	adds	r3, #132	@ 0x84
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4619      	mov	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	01db      	lsls	r3, r3, #7
 800256c:	440b      	add	r3, r1
 800256e:	3384      	adds	r3, #132	@ 0x84
 8002570:	4619      	mov	r1, r3
 8002572:	4b58      	ldr	r3, [pc, #352]	@ (80026d4 <LTDC_SetConfig+0x32c>)
 8002574:	4013      	ands	r3, r2
 8002576:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	68f9      	ldr	r1, [r7, #12]
 8002582:	6809      	ldr	r1, [r1, #0]
 8002584:	4608      	mov	r0, r1
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	01c9      	lsls	r1, r1, #7
 800258a:	4401      	add	r1, r0
 800258c:	3184      	adds	r1, #132	@ 0x84
 800258e:	4313      	orrs	r3, r2
 8002590:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	01db      	lsls	r3, r3, #7
 800259c:	4413      	add	r3, r2
 800259e:	3384      	adds	r3, #132	@ 0x84
 80025a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	01db      	lsls	r3, r3, #7
 80025ac:	4413      	add	r3, r2
 80025ae:	3384      	adds	r3, #132	@ 0x84
 80025b0:	461a      	mov	r2, r3
 80025b2:	2300      	movs	r3, #0
 80025b4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	01db      	lsls	r3, r3, #7
 80025c0:	4413      	add	r3, r2
 80025c2:	3384      	adds	r3, #132	@ 0x84
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80025d4:	2304      	movs	r3, #4
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	e01b      	b.n	8002612 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80025e2:	2303      	movs	r3, #3
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e014      	b.n	8002612 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d00b      	beq.n	8002608 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d007      	beq.n	8002608 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d003      	beq.n	8002608 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002604:	2b07      	cmp	r3, #7
 8002606:	d102      	bne.n	800260e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002608:	2302      	movs	r3, #2
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	e001      	b.n	8002612 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800260e:	2301      	movs	r3, #1
 8002610:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	01db      	lsls	r3, r3, #7
 800261c:	4413      	add	r3, r2
 800261e:	3384      	adds	r3, #132	@ 0x84
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	4611      	mov	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	01d2      	lsls	r2, r2, #7
 800262c:	440a      	add	r2, r1
 800262e:	3284      	adds	r2, #132	@ 0x84
 8002630:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002634:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1acb      	subs	r3, r1, r3
 800264c:	69f9      	ldr	r1, [r7, #28]
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	3307      	adds	r3, #7
 8002654:	68f9      	ldr	r1, [r7, #12]
 8002656:	6809      	ldr	r1, [r1, #0]
 8002658:	4608      	mov	r0, r1
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	01c9      	lsls	r1, r1, #7
 800265e:	4401      	add	r1, r0
 8002660:	3184      	adds	r1, #132	@ 0x84
 8002662:	4313      	orrs	r3, r2
 8002664:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	01db      	lsls	r3, r3, #7
 8002670:	4413      	add	r3, r2
 8002672:	3384      	adds	r3, #132	@ 0x84
 8002674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	01db      	lsls	r3, r3, #7
 8002680:	440b      	add	r3, r1
 8002682:	3384      	adds	r3, #132	@ 0x84
 8002684:	4619      	mov	r1, r3
 8002686:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <LTDC_SetConfig+0x330>)
 8002688:	4013      	ands	r3, r2
 800268a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	01db      	lsls	r3, r3, #7
 8002696:	4413      	add	r3, r2
 8002698:	3384      	adds	r3, #132	@ 0x84
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	4413      	add	r3, r2
 80026ae:	3384      	adds	r3, #132	@ 0x84
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	4611      	mov	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	01d2      	lsls	r2, r2, #7
 80026bc:	440a      	add	r2, r1
 80026be:	3284      	adds	r2, #132	@ 0x84
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6013      	str	r3, [r2, #0]
}
 80026c6:	bf00      	nop
 80026c8:	3724      	adds	r7, #36	@ 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	fffff8f8 	.word	0xfffff8f8
 80026d8:	fffff800 	.word	0xfffff800

080026dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026de:	b08f      	sub	sp, #60	@ 0x3c
 80026e0:	af0a      	add	r7, sp, #40	@ 0x28
 80026e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e116      	b.n	800291c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7fe fddf 	bl	80012cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f004 f94b 	bl	80069c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	687e      	ldr	r6, [r7, #4]
 800273a:	466d      	mov	r5, sp
 800273c:	f106 0410 	add.w	r4, r6, #16
 8002740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002748:	e894 0003 	ldmia.w	r4, {r0, r1}
 800274c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002750:	1d33      	adds	r3, r6, #4
 8002752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002754:	6838      	ldr	r0, [r7, #0]
 8002756:	f004 f8c9 	bl	80068ec <USB_CoreInit>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0d7      	b.n	800291c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f004 f939 	bl	80069ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002778:	2300      	movs	r3, #0
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	e04a      	b.n	8002814 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	333d      	adds	r3, #61	@ 0x3d
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	333c      	adds	r3, #60	@ 0x3c
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	b298      	uxth	r0, r3
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	3356      	adds	r3, #86	@ 0x56
 80027ba:	4602      	mov	r2, r0
 80027bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	3340      	adds	r3, #64	@ 0x40
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3344      	adds	r3, #68	@ 0x44
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3348      	adds	r3, #72	@ 0x48
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	334c      	adds	r3, #76	@ 0x4c
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	3301      	adds	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3af      	bcc.n	800277e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e044      	b.n	80028ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002892:	7bfa      	ldrb	r2, [r7, #15]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	3301      	adds	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d3b5      	bcc.n	8002824 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	687e      	ldr	r6, [r7, #4]
 80028c0:	466d      	mov	r5, sp
 80028c2:	f106 0410 	add.w	r4, r6, #16
 80028c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028d6:	1d33      	adds	r3, r6, #4
 80028d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028da:	6838      	ldr	r0, [r7, #0]
 80028dc:	f004 f8d2 	bl	8006a84 <USB_DevInit>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e014      	b.n	800291c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f80a 	bl	8002924 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fa90 	bl	8006e3a <USB_DevDisconnect>

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002924 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002952:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_PCDEx_ActivateLPM+0x44>)
 8002954:	4313      	orrs	r3, r2
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	10000003 	.word	0x10000003

0800296c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <HAL_PWREx_ConfigSupply+0x70>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b04      	cmp	r3, #4
 800297e:	d00a      	beq.n	8002996 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002980:	4b16      	ldr	r3, [pc, #88]	@ (80029dc <HAL_PWREx_ConfigSupply+0x70>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01f      	b.n	80029d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e01d      	b.n	80029d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_PWREx_ConfigSupply+0x70>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	490f      	ldr	r1, [pc, #60]	@ (80029dc <HAL_PWREx_ConfigSupply+0x70>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029a6:	f7fe fefb 	bl	80017a0 <HAL_GetTick>
 80029aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029ac:	e009      	b.n	80029c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029ae:	f7fe fef7 	bl	80017a0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029bc:	d901      	bls.n	80029c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e007      	b.n	80029d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_PWREx_ConfigSupply+0x70>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ce:	d1ee      	bne.n	80029ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	58024800 	.word	0x58024800

080029e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80029ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ee:	60d3      	str	r3, [r2, #12]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	58024800 	.word	0x58024800

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	@ 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f000 bc48 	b.w	80032a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8088 	beq.w	8002b32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a22:	4b99      	ldr	r3, [pc, #612]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a2c:	4b96      	ldr	r3, [pc, #600]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d007      	beq.n	8002a48 <HAL_RCC_OscConfig+0x48>
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	2b18      	cmp	r3, #24
 8002a3c:	d111      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62>
 8002a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b8f      	ldr	r3, [pc, #572]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d06d      	beq.n	8002b30 <HAL_RCC_OscConfig+0x130>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d169      	bne.n	8002b30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f000 bc21 	b.w	80032a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x7a>
 8002a6c:	4b86      	ldr	r3, [pc, #536]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a85      	ldr	r2, [pc, #532]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e02e      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x9c>
 8002a82:	4b81      	ldr	r3, [pc, #516]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a80      	ldr	r2, [pc, #512]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7d      	ldr	r2, [pc, #500]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0xc0>
 8002aa6:	4b78      	ldr	r3, [pc, #480]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a77      	ldr	r2, [pc, #476]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b75      	ldr	r3, [pc, #468]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a74      	ldr	r2, [pc, #464]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002ac0:	4b71      	ldr	r3, [pc, #452]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a70      	ldr	r2, [pc, #448]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b6e      	ldr	r3, [pc, #440]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fe5e 	bl	80017a0 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fe5a 	bl	80017a0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e3d4      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002afa:	4b63      	ldr	r3, [pc, #396]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fe4a 	bl	80017a0 <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fe46 	bl	80017a0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e3c0      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b22:	4b59      	ldr	r3, [pc, #356]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x110>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80ca 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b40:	4b51      	ldr	r3, [pc, #324]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_RCC_OscConfig+0x166>
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2b18      	cmp	r3, #24
 8002b5a:	d156      	bne.n	8002c0a <HAL_RCC_OscConfig+0x20a>
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d151      	bne.n	8002c0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b66:	4b48      	ldr	r3, [pc, #288]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e392      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b7e:	4b42      	ldr	r3, [pc, #264]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0219 	bic.w	r2, r3, #25
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	493f      	ldr	r1, [pc, #252]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fe06 	bl	80017a0 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b98:	f7fe fe02 	bl	80017a0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e37c      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002baa:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	f7fe fe23 	bl	8001800 <HAL_GetREVID>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d817      	bhi.n	8002bf4 <HAL_RCC_OscConfig+0x1f4>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b40      	cmp	r3, #64	@ 0x40
 8002bca:	d108      	bne.n	8002bde <HAL_RCC_OscConfig+0x1de>
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bdc:	e07a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	031b      	lsls	r3, r3, #12
 8002bec:	4926      	ldr	r1, [pc, #152]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf2:	e06f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	4921      	ldr	r1, [pc, #132]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c08:	e064      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d047      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c12:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0219 	bic.w	r2, r3, #25
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	491a      	ldr	r1, [pc, #104]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fdbc 	bl	80017a0 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fdb8 	bl	80017a0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e332      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3e:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	f7fe fdd9 	bl	8001800 <HAL_GetREVID>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d819      	bhi.n	8002c8c <HAL_RCC_OscConfig+0x28c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b40      	cmp	r3, #64	@ 0x40
 8002c5e:	d108      	bne.n	8002c72 <HAL_RCC_OscConfig+0x272>
 8002c60:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c68:	4a07      	ldr	r2, [pc, #28]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c6e:	6053      	str	r3, [r2, #4]
 8002c70:	e030      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
 8002c72:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	031b      	lsls	r3, r3, #12
 8002c80:	4901      	ldr	r1, [pc, #4]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
 8002c86:	e025      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
 8002c88:	58024400 	.word	0x58024400
 8002c8c:	4b9a      	ldr	r3, [pc, #616]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	4997      	ldr	r1, [pc, #604]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	e018      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4b95      	ldr	r3, [pc, #596]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a94      	ldr	r2, [pc, #592]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe fd77 	bl	80017a0 <HAL_GetTick>
 8002cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fd73 	bl	80017a0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e2ed      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cc8:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a9 	beq.w	8002e34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce2:	4b85      	ldr	r3, [pc, #532]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cec:	4b82      	ldr	r3, [pc, #520]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d007      	beq.n	8002d08 <HAL_RCC_OscConfig+0x308>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b18      	cmp	r3, #24
 8002cfc:	d13a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x374>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d135      	bne.n	8002d74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d08:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x320>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2b80      	cmp	r3, #128	@ 0x80
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e2c1      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d20:	f7fe fd6e 	bl	8001800 <HAL_GetREVID>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d817      	bhi.n	8002d5e <HAL_RCC_OscConfig+0x35e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d108      	bne.n	8002d48 <HAL_RCC_OscConfig+0x348>
 8002d36:	4b70      	ldr	r3, [pc, #448]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d46:	e075      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d48:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	069b      	lsls	r3, r3, #26
 8002d56:	4968      	ldr	r1, [pc, #416]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d5c:	e06a      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d5e:	4b66      	ldr	r3, [pc, #408]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	061b      	lsls	r3, r3, #24
 8002d6c:	4962      	ldr	r1, [pc, #392]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d72:	e05f      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d042      	beq.n	8002e02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fd0a 	bl	80017a0 <HAL_GetTick>
 8002d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d90:	f7fe fd06 	bl	80017a0 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e280      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002da2:	4b55      	ldr	r3, [pc, #340]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dae:	f7fe fd27 	bl	8001800 <HAL_GetREVID>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d817      	bhi.n	8002dec <HAL_RCC_OscConfig+0x3ec>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d108      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3d6>
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002dd2:	6053      	str	r3, [r2, #4]
 8002dd4:	e02e      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
 8002dd6:	4b48      	ldr	r3, [pc, #288]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	4944      	ldr	r1, [pc, #272]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
 8002dea:	e023      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
 8002dec:	4b42      	ldr	r3, [pc, #264]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	493f      	ldr	r1, [pc, #252]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
 8002e00:	e018      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3c      	ldr	r2, [pc, #240]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fcc7 	bl	80017a0 <HAL_GetTick>
 8002e12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e16:	f7fe fcc3 	bl	80017a0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e23d      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e28:	4b33      	ldr	r3, [pc, #204]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d036      	beq.n	8002eae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d019      	beq.n	8002e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe fca4 	bl	80017a0 <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fca0 	bl	80017a0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e21a      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x45c>
 8002e7a:	e018      	b.n	8002eae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e80:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fc8a 	bl	80017a0 <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fe fc86 	bl	80017a0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e200      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d039      	beq.n	8002f2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01c      	beq.n	8002efc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fc67 	bl	80017a0 <HAL_GetTick>
 8002ed2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed6:	f7fe fc63 	bl	80017a0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1dd      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ee8:	4b03      	ldr	r3, [pc, #12]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x4d6>
 8002ef4:	e01b      	b.n	8002f2e <HAL_RCC_OscConfig+0x52e>
 8002ef6:	bf00      	nop
 8002ef8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002efc:	4b9b      	ldr	r3, [pc, #620]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a9a      	ldr	r2, [pc, #616]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f08:	f7fe fc4a 	bl	80017a0 <HAL_GetTick>
 8002f0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f10:	f7fe fc46 	bl	80017a0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1c0      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f22:	4b92      	ldr	r3, [pc, #584]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8081 	beq.w	800303e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8003170 <HAL_RCC_OscConfig+0x770>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a8b      	ldr	r2, [pc, #556]	@ (8003170 <HAL_RCC_OscConfig+0x770>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f48:	f7fe fc2a 	bl	80017a0 <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f50:	f7fe fc26 	bl	80017a0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1a0      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f62:	4b83      	ldr	r3, [pc, #524]	@ (8003170 <HAL_RCC_OscConfig+0x770>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d106      	bne.n	8002f84 <HAL_RCC_OscConfig+0x584>
 8002f76:	4b7d      	ldr	r3, [pc, #500]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f82:	e02d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x5a6>
 8002f8c:	4b77      	ldr	r3, [pc, #476]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	4a76      	ldr	r2, [pc, #472]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f98:	4b74      	ldr	r3, [pc, #464]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a73      	ldr	r2, [pc, #460]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x5c8>
 8002fae:	4b6f      	ldr	r3, [pc, #444]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fba:	4b6c      	ldr	r3, [pc, #432]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
 8002fc8:	4b68      	ldr	r3, [pc, #416]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a67      	ldr	r2, [pc, #412]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	4b65      	ldr	r3, [pc, #404]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	4a64      	ldr	r2, [pc, #400]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fbda 	bl	80017a0 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fbd6 	bl	80017a0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e14e      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003006:	4b59      	ldr	r3, [pc, #356]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ee      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x5f0>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fbc4 	bl	80017a0 <HAL_GetTick>
 8003018:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe fbc0 	bl	80017a0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e138      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003032:	4b4e      	ldr	r3, [pc, #312]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ee      	bne.n	800301c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 812d 	beq.w	80032a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003048:	4b48      	ldr	r3, [pc, #288]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003050:	2b18      	cmp	r3, #24
 8003052:	f000 80bd 	beq.w	80031d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	2b02      	cmp	r3, #2
 800305c:	f040 809e 	bne.w	800319c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b42      	ldr	r3, [pc, #264]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a41      	ldr	r2, [pc, #260]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800306a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fb98 	bl	80017a0 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fb94 	bl	80017a0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e10e      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003086:	4b39      	ldr	r3, [pc, #228]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003092:	4b36      	ldr	r3, [pc, #216]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003096:	4b37      	ldr	r3, [pc, #220]	@ (8003174 <HAL_RCC_OscConfig+0x774>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	430a      	orrs	r2, r1
 80030a6:	4931      	ldr	r1, [pc, #196]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	3b01      	subs	r3, #1
 80030b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	3b01      	subs	r3, #1
 80030bc:	025b      	lsls	r3, r3, #9
 80030be:	b29b      	uxth	r3, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	3b01      	subs	r3, #1
 80030d6:	061b      	lsls	r3, r3, #24
 80030d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80030dc:	4923      	ldr	r1, [pc, #140]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80030e2:	4b22      	ldr	r3, [pc, #136]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e6:	4a21      	ldr	r2, [pc, #132]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030ee:	4b1f      	ldr	r3, [pc, #124]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030f2:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <HAL_RCC_OscConfig+0x778>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030fa:	00d2      	lsls	r2, r2, #3
 80030fc:	491b      	ldr	r1, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003102:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	f023 020c 	bic.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	4917      	ldr	r1, [pc, #92]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003110:	4313      	orrs	r3, r2
 8003112:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003114:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003118:	f023 0202 	bic.w	r2, r3, #2
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	4912      	ldr	r1, [pc, #72]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003126:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312a:	4a10      	ldr	r2, [pc, #64]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003136:	4a0d      	ldr	r2, [pc, #52]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800313e:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	4a07      	ldr	r2, [pc, #28]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003156:	4b05      	ldr	r3, [pc, #20]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a04      	ldr	r2, [pc, #16]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 800315c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe fb1d 	bl	80017a0 <HAL_GetTick>
 8003166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003168:	e011      	b.n	800318e <HAL_RCC_OscConfig+0x78e>
 800316a:	bf00      	nop
 800316c:	58024400 	.word	0x58024400
 8003170:	58024800 	.word	0x58024800
 8003174:	fffffc0c 	.word	0xfffffc0c
 8003178:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fb10 	bl	80017a0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e08a      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318e:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x77c>
 800319a:	e082      	b.n	80032a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	4b43      	ldr	r3, [pc, #268]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a42      	ldr	r2, [pc, #264]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 80031a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fafa 	bl	80017a0 <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe faf6 	bl	80017a0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e070      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c2:	4b3a      	ldr	r3, [pc, #232]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x7b0>
 80031ce:	e068      	b.n	80032a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031d0:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 80031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031d6:	4b35      	ldr	r3, [pc, #212]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d031      	beq.n	8003248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0203 	and.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d12a      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d122      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d11a      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	0a5b      	lsrs	r3, r3, #9
 8003216:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800321e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d111      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d108      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	0e1b      	lsrs	r3, r3, #24
 800323a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003242:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e02b      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800324c:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 800324e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003256:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	429a      	cmp	r2, r3
 8003260:	d01f      	beq.n	80032a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	4a11      	ldr	r2, [pc, #68]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800326e:	f7fe fa97 	bl	80017a0 <HAL_GetTick>
 8003272:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003274:	bf00      	nop
 8003276:	f7fe fa93 	bl	80017a0 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	4293      	cmp	r3, r2
 8003280:	d0f9      	beq.n	8003276 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003286:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <HAL_RCC_OscConfig+0x8b0>)
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800328e:	00d2      	lsls	r2, r2, #3
 8003290:	4906      	ldr	r1, [pc, #24]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003292:	4313      	orrs	r3, r2
 8003294:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003296:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	4a04      	ldr	r2, [pc, #16]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3730      	adds	r7, #48	@ 0x30
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	58024400 	.word	0x58024400
 80032b0:	ffff0007 	.word	0xffff0007

080032b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e19c      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b8a      	ldr	r3, [pc, #552]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d910      	bls.n	80032f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b87      	ldr	r3, [pc, #540]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 020f 	bic.w	r2, r3, #15
 80032de:	4985      	ldr	r1, [pc, #532]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b83      	ldr	r3, [pc, #524]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e184      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d010      	beq.n	8003326 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	4b7b      	ldr	r3, [pc, #492]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003310:	429a      	cmp	r2, r3
 8003312:	d908      	bls.n	8003326 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003314:	4b78      	ldr	r3, [pc, #480]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	4975      	ldr	r1, [pc, #468]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003322:	4313      	orrs	r3, r2
 8003324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d010      	beq.n	8003354 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	4b70      	ldr	r3, [pc, #448]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800333e:	429a      	cmp	r2, r3
 8003340:	d908      	bls.n	8003354 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003342:	4b6d      	ldr	r3, [pc, #436]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	496a      	ldr	r1, [pc, #424]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003350:	4313      	orrs	r3, r2
 8003352:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d010      	beq.n	8003382 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	4b64      	ldr	r3, [pc, #400]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800336c:	429a      	cmp	r2, r3
 800336e:	d908      	bls.n	8003382 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003370:	4b61      	ldr	r3, [pc, #388]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	495e      	ldr	r1, [pc, #376]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 800337e:	4313      	orrs	r3, r2
 8003380:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	4b59      	ldr	r3, [pc, #356]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800339a:	429a      	cmp	r2, r3
 800339c:	d908      	bls.n	80033b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800339e:	4b56      	ldr	r3, [pc, #344]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4953      	ldr	r1, [pc, #332]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	4b4d      	ldr	r3, [pc, #308]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d908      	bls.n	80033de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033cc:	4b4a      	ldr	r3, [pc, #296]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f023 020f 	bic.w	r2, r3, #15
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4947      	ldr	r1, [pc, #284]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d055      	beq.n	8003496 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033ea:	4b43      	ldr	r3, [pc, #268]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4940      	ldr	r1, [pc, #256]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d107      	bne.n	8003414 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003404:	4b3c      	ldr	r3, [pc, #240]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d121      	bne.n	8003454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0f6      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d107      	bne.n	800342c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800341c:	4b36      	ldr	r3, [pc, #216]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d115      	bne.n	8003454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0ea      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003434:	4b30      	ldr	r3, [pc, #192]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0de      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003444:	4b2c      	ldr	r3, [pc, #176]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0d6      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003454:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f023 0207 	bic.w	r2, r3, #7
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4925      	ldr	r1, [pc, #148]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003466:	f7fe f99b 	bl	80017a0 <HAL_GetTick>
 800346a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346c:	e00a      	b.n	8003484 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346e:	f7fe f997 	bl	80017a0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0be      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003484:	4b1c      	ldr	r3, [pc, #112]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	429a      	cmp	r2, r3
 8003494:	d1eb      	bne.n	800346e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d010      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	4b14      	ldr	r3, [pc, #80]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d208      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b2:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f023 020f 	bic.w	r2, r3, #15
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	490e      	ldr	r1, [pc, #56]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d214      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b08      	ldr	r3, [pc, #32]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 020f 	bic.w	r2, r3, #15
 80034da:	4906      	ldr	r1, [pc, #24]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b04      	ldr	r3, [pc, #16]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e086      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
 80034f4:	52002000 	.word	0x52002000
 80034f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	4b3f      	ldr	r3, [pc, #252]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003514:	429a      	cmp	r2, r3
 8003516:	d208      	bcs.n	800352a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003518:	4b3c      	ldr	r3, [pc, #240]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	4939      	ldr	r1, [pc, #228]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003526:	4313      	orrs	r3, r2
 8003528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	4b34      	ldr	r3, [pc, #208]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003542:	429a      	cmp	r2, r3
 8003544:	d208      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003546:	4b31      	ldr	r3, [pc, #196]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	492e      	ldr	r1, [pc, #184]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003554:	4313      	orrs	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d010      	beq.n	8003586 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	4b28      	ldr	r3, [pc, #160]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003570:	429a      	cmp	r2, r3
 8003572:	d208      	bcs.n	8003586 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003574:	4b25      	ldr	r3, [pc, #148]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	4922      	ldr	r1, [pc, #136]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003582:	4313      	orrs	r3, r2
 8003584:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d010      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	4b1d      	ldr	r3, [pc, #116]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800359e:	429a      	cmp	r2, r3
 80035a0:	d208      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035a2:	4b1a      	ldr	r3, [pc, #104]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4917      	ldr	r1, [pc, #92]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035b4:	f000 f834 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b14      	ldr	r3, [pc, #80]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	4912      	ldr	r1, [pc, #72]	@ (8003610 <HAL_RCC_ClockConfig+0x35c>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
 80035d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035d2:	4b0e      	ldr	r3, [pc, #56]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	4a0d      	ldr	r2, [pc, #52]	@ (8003610 <HAL_RCC_ClockConfig+0x35c>)
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003614 <HAL_RCC_ClockConfig+0x360>)
 80035ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003618 <HAL_RCC_ClockConfig+0x364>)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80035f2:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <HAL_RCC_ClockConfig+0x368>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe f888 	bl	800170c <HAL_InitTick>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	58024400 	.word	0x58024400
 8003610:	08007f5c 	.word	0x08007f5c
 8003614:	24000004 	.word	0x24000004
 8003618:	24000000 	.word	0x24000000
 800361c:	24000008 	.word	0x24000008

08003620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	@ 0x24
 8003624:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003626:	4bb3      	ldr	r3, [pc, #716]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800362e:	2b18      	cmp	r3, #24
 8003630:	f200 8155 	bhi.w	80038de <HAL_RCC_GetSysClockFreq+0x2be>
 8003634:	a201      	add	r2, pc, #4	@ (adr r2, 800363c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	080036a1 	.word	0x080036a1
 8003640:	080038df 	.word	0x080038df
 8003644:	080038df 	.word	0x080038df
 8003648:	080038df 	.word	0x080038df
 800364c:	080038df 	.word	0x080038df
 8003650:	080038df 	.word	0x080038df
 8003654:	080038df 	.word	0x080038df
 8003658:	080038df 	.word	0x080038df
 800365c:	080036c7 	.word	0x080036c7
 8003660:	080038df 	.word	0x080038df
 8003664:	080038df 	.word	0x080038df
 8003668:	080038df 	.word	0x080038df
 800366c:	080038df 	.word	0x080038df
 8003670:	080038df 	.word	0x080038df
 8003674:	080038df 	.word	0x080038df
 8003678:	080038df 	.word	0x080038df
 800367c:	080036cd 	.word	0x080036cd
 8003680:	080038df 	.word	0x080038df
 8003684:	080038df 	.word	0x080038df
 8003688:	080038df 	.word	0x080038df
 800368c:	080038df 	.word	0x080038df
 8003690:	080038df 	.word	0x080038df
 8003694:	080038df 	.word	0x080038df
 8003698:	080038df 	.word	0x080038df
 800369c:	080036d3 	.word	0x080036d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036a0:	4b94      	ldr	r3, [pc, #592]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036ac:	4b91      	ldr	r3, [pc, #580]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	08db      	lsrs	r3, r3, #3
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	4a90      	ldr	r2, [pc, #576]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
 80036bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036be:	e111      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036c0:	4b8d      	ldr	r3, [pc, #564]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036c2:	61bb      	str	r3, [r7, #24]
      break;
 80036c4:	e10e      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036c6:	4b8d      	ldr	r3, [pc, #564]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036c8:	61bb      	str	r3, [r7, #24]
      break;
 80036ca:	e10b      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036ce:	61bb      	str	r3, [r7, #24]
      break;
 80036d0:	e108      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036d2:	4b88      	ldr	r3, [pc, #544]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036dc:	4b85      	ldr	r3, [pc, #532]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036e8:	4b82      	ldr	r3, [pc, #520]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036f2:	4b80      	ldr	r3, [pc, #512]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f6:	08db      	lsrs	r3, r3, #3
 80036f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80e1 	beq.w	80038d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b02      	cmp	r3, #2
 800371a:	f000 8083 	beq.w	8003824 <HAL_RCC_GetSysClockFreq+0x204>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b02      	cmp	r3, #2
 8003722:	f200 80a1 	bhi.w	8003868 <HAL_RCC_GetSysClockFreq+0x248>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x114>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d056      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003732:	e099      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003734:	4b6f      	ldr	r3, [pc, #444]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02d      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003740:	4b6c      	ldr	r3, [pc, #432]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	08db      	lsrs	r3, r3, #3
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	4a6b      	ldr	r2, [pc, #428]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376a:	4b62      	ldr	r3, [pc, #392]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377a:	ed97 6a02 	vldr	s12, [r7, #8]
 800377e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800378e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800379a:	e087      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003908 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ae:	4b51      	ldr	r3, [pc, #324]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037de:	e065      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800390c <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f2:	4b40      	ldr	r3, [pc, #256]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003802:	ed97 6a02 	vldr	s12, [r7, #8]
 8003806:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003822:	e043      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003910 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003836:	4b2f      	ldr	r3, [pc, #188]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003846:	ed97 6a02 	vldr	s12, [r7, #8]
 800384a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800384e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800385a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003866:	e021      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003872:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800390c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387a:	4b1e      	ldr	r3, [pc, #120]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388a:	ed97 6a02 	vldr	s12, [r7, #8]
 800388e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800389e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038ac:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	0a5b      	lsrs	r3, r3, #9
 80038b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038b6:	3301      	adds	r3, #1
 80038b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	ee07 3a90 	vmov	s15, r3
 80038c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d0:	ee17 3a90 	vmov	r3, s15
 80038d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038d6:	e005      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	61bb      	str	r3, [r7, #24]
      break;
 80038dc:	e002      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038de:	4b07      	ldr	r3, [pc, #28]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038e0:	61bb      	str	r3, [r7, #24]
      break;
 80038e2:	bf00      	nop
  }

  return sysclockfreq;
 80038e4:	69bb      	ldr	r3, [r7, #24]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	@ 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	58024400 	.word	0x58024400
 80038f8:	03d09000 	.word	0x03d09000
 80038fc:	003d0900 	.word	0x003d0900
 8003900:	007a1200 	.word	0x007a1200
 8003904:	46000000 	.word	0x46000000
 8003908:	4c742400 	.word	0x4c742400
 800390c:	4a742400 	.word	0x4a742400
 8003910:	4af42400 	.word	0x4af42400

08003914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800391a:	f7ff fe81 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <HAL_RCC_GetHCLKFreq+0x50>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490f      	ldr	r1, [pc, #60]	@ (8003968 <HAL_RCC_GetHCLKFreq+0x54>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003938:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <HAL_RCC_GetHCLKFreq+0x50>)
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	4a09      	ldr	r2, [pc, #36]	@ (8003968 <HAL_RCC_GetHCLKFreq+0x54>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	fa22 f303 	lsr.w	r3, r2, r3
 800394e:	4a07      	ldr	r2, [pc, #28]	@ (800396c <HAL_RCC_GetHCLKFreq+0x58>)
 8003950:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003952:	4a07      	ldr	r2, [pc, #28]	@ (8003970 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <HAL_RCC_GetHCLKFreq+0x58>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	58024400 	.word	0x58024400
 8003968:	08007f5c 	.word	0x08007f5c
 800396c:	24000004 	.word	0x24000004
 8003970:	24000000 	.word	0x24000000

08003974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003978:	f7ff ffcc 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4904      	ldr	r1, [pc, #16]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x28>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	58024400 	.word	0x58024400
 800399c:	08007f5c 	.word	0x08007f5c

080039a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039a4:	f7ff ffb6 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4904      	ldr	r1, [pc, #16]	@ (80039c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	58024400 	.word	0x58024400
 80039c8:	08007f5c 	.word	0x08007f5c

080039cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b0ca      	sub	sp, #296	@ 0x128
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80039f0:	2500      	movs	r5, #0
 80039f2:	ea54 0305 	orrs.w	r3, r4, r5
 80039f6:	d049      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a02:	d02f      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a08:	d828      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a0e:	d01a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a14:	d822      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a1e:	d007      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a20:	e01c      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a22:	4bb8      	ldr	r3, [pc, #736]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	4ab7      	ldr	r2, [pc, #732]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a2e:	e01a      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a34:	3308      	adds	r3, #8
 8003a36:	2102      	movs	r1, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fc8f 	bl	800535c <RCCEx_PLL2_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a44:	e00f      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	3328      	adds	r3, #40	@ 0x28
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fd36 	bl	80054c0 <RCCEx_PLL3_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a5a:	e004      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a6e:	4ba5      	ldr	r3, [pc, #660]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a7c:	4aa1      	ldr	r2, [pc, #644]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a82:	e003      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a98:	f04f 0900 	mov.w	r9, #0
 8003a9c:	ea58 0309 	orrs.w	r3, r8, r9
 8003aa0:	d047      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d82a      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003aac:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ac9 	.word	0x08003ac9
 8003ab8:	08003ad7 	.word	0x08003ad7
 8003abc:	08003aed 	.word	0x08003aed
 8003ac0:	08003b0b 	.word	0x08003b0b
 8003ac4:	08003b0b 	.word	0x08003b0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	4a8d      	ldr	r2, [pc, #564]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ad4:	e01a      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	3308      	adds	r3, #8
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 fc3c 	bl	800535c <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aea:	e00f      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af0:	3328      	adds	r3, #40	@ 0x28
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f001 fce3 	bl	80054c0 <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b00:	e004      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b14:	4b7b      	ldr	r3, [pc, #492]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b18:	f023 0107 	bic.w	r1, r3, #7
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	4a78      	ldr	r2, [pc, #480]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003b3e:	f04f 0b00 	mov.w	fp, #0
 8003b42:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b46:	d04c      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b52:	d030      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b58:	d829      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b5c:	d02d      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b60:	d825      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b62:	2b80      	cmp	r3, #128	@ 0x80
 8003b64:	d018      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b66:	2b80      	cmp	r3, #128	@ 0x80
 8003b68:	d821      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b6e:	2b40      	cmp	r3, #64	@ 0x40
 8003b70:	d007      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b72:	e01c      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b74:	4b63      	ldr	r3, [pc, #396]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	4a62      	ldr	r2, [pc, #392]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b80:	e01c      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	3308      	adds	r3, #8
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fbe6 	bl	800535c <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	3328      	adds	r3, #40	@ 0x28
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fc8d 	bl	80054c0 <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bac:	e006      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd2:	4a4c      	ldr	r2, [pc, #304]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003bee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003bf8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d053      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c0e:	d035      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c14:	d82e      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c1a:	d031      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c20:	d828      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c26:	d01a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c2c:	d822      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003c32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c36:	d007      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c38:	e01c      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3a:	4b32      	ldr	r3, [pc, #200]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	4a31      	ldr	r2, [pc, #196]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c46:	e01c      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 fb83 	bl	800535c <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c5c:	e011      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3328      	adds	r3, #40	@ 0x28
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fc2a 	bl	80054c0 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c72:	e006      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c7a:	e002      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003cb6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003cc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d056      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003cd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cd6:	d038      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003cd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cdc:	d831      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce2:	d034      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ce4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce8:	d82b      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cee:	d01d      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003cf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf4:	d825      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003cfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d00:	e01f      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d02:	bf00      	nop
 8003d04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4ba2      	ldr	r3, [pc, #648]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	4aa1      	ldr	r2, [pc, #644]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d14:	e01c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fb1c 	bl	800535c <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d2a:	e011      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	3328      	adds	r3, #40	@ 0x28
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 fbc3 	bl	80054c0 <RCCEx_PLL3_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d40:	e006      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d48:	e002      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d58:	4b8e      	ldr	r3, [pc, #568]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d68:	4a8a      	ldr	r2, [pc, #552]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6e:	e003      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d92:	460b      	mov	r3, r1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	d03a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9e:	2b30      	cmp	r3, #48	@ 0x30
 8003da0:	d01f      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003da2:	2b30      	cmp	r3, #48	@ 0x30
 8003da4:	d819      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d00c      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d815      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d019      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d111      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db6:	4b77      	ldr	r3, [pc, #476]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dba:	4a76      	ldr	r2, [pc, #472]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003dc2:	e011      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	3308      	adds	r3, #8
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 fac5 	bl	800535c <RCCEx_PLL2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003dd8:	e006      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de0:	e002      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003df0:	4b68      	ldr	r3, [pc, #416]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	4a65      	ldr	r2, [pc, #404]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d051      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e38:	d035      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3e:	d82e      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e44:	d031      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e4a:	d828      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e50:	d01a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e56:	d822      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e60:	d007      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e62:	e01c      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e64:	4b4b      	ldr	r3, [pc, #300]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	4a4a      	ldr	r2, [pc, #296]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e70:	e01c      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e76:	3308      	adds	r3, #8
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fa6e 	bl	800535c <RCCEx_PLL2_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e86:	e011      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8c:	3328      	adds	r3, #40	@ 0x28
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fb15 	bl	80054c0 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003eb4:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec2:	4a34      	ldr	r2, [pc, #208]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003ede:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ee8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003eec:	460b      	mov	r3, r1
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	d056      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efc:	d033      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003efe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f02:	d82c      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f08:	d02f      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f0e:	d826      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f14:	d02b      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f1a:	d820      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f20:	d012      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f26:	d81a      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f30:	d115      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	3308      	adds	r3, #8
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 fa0e 	bl	800535c <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f46:	e015      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4c:	3328      	adds	r3, #40	@ 0x28
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fab5 	bl	80054c0 <RCCEx_PLL3_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f64:	e006      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f66:	bf00      	nop
 8003f68:	e004      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f6a:	bf00      	nop
 8003f6c:	e002      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10d      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f8a:	4a02      	ldr	r2, [pc, #8]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f90:	e006      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d055      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fcc:	d033      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fd2:	d82c      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd8:	d02f      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fde:	d826      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fe0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fe4:	d02b      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003fe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fea:	d820      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ff0:	d012      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ff6:	d81a      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d022      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004000:	d115      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	3308      	adds	r3, #8
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f001 f9a6 	bl	800535c <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004016:	e015      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401c:	3328      	adds	r3, #40	@ 0x28
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f001 fa4d 	bl	80054c0 <RCCEx_PLL3_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800402c:	e00a      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004034:	e006      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004036:	bf00      	nop
 8004038:	e004      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800404c:	4ba3      	ldr	r3, [pc, #652]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004050:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004058:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800405c:	4a9f      	ldr	r2, [pc, #636]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405e:	430b      	orrs	r3, r1
 8004060:	6593      	str	r3, [r2, #88]	@ 0x58
 8004062:	e003      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004086:	460b      	mov	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	d037      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004096:	d00e      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800409c:	d816      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80040a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040a6:	d111      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a8:	4b8c      	ldr	r3, [pc, #560]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	4a8b      	ldr	r2, [pc, #556]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040b4:	e00f      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ba:	3308      	adds	r3, #8
 80040bc:	2101      	movs	r1, #1
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 f94c 	bl	800535c <RCCEx_PLL2_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040ca:	e004      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80040d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040de:	4b7f      	ldr	r3, [pc, #508]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a7b      	ldr	r2, [pc, #492]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004112:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d039      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004122:	2b03      	cmp	r3, #3
 8004124:	d81c      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004126:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004169 	.word	0x08004169
 8004130:	0800413d 	.word	0x0800413d
 8004134:	0800414b 	.word	0x0800414b
 8004138:	08004169 	.word	0x08004169
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413c:	4b67      	ldr	r3, [pc, #412]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	4a66      	ldr	r2, [pc, #408]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004148:	e00f      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414e:	3308      	adds	r3, #8
 8004150:	2102      	movs	r1, #2
 8004152:	4618      	mov	r0, r3
 8004154:	f001 f902 	bl	800535c <RCCEx_PLL2_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800415e:	e004      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004166:	e000      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004172:	4b5a      	ldr	r3, [pc, #360]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	f023 0103 	bic.w	r1, r3, #3
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004180:	4a56      	ldr	r2, [pc, #344]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004182:	430b      	orrs	r3, r1
 8004184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004186:	e003      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800419c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80041aa:	460b      	mov	r3, r1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f000 809f 	beq.w	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b2:	4b4b      	ldr	r3, [pc, #300]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4a      	ldr	r2, [pc, #296]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041be:	f7fd faef 	bl	80017a0 <HAL_GetTick>
 80041c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c6:	e00b      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fd faea 	bl	80017a0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b64      	cmp	r3, #100	@ 0x64
 80041d6:	d903      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041de:	e005      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041e0:	4b3f      	ldr	r3, [pc, #252]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ed      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80041ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d179      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041f4:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004200:	4053      	eors	r3, r2
 8004202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004206:	2b00      	cmp	r3, #0
 8004208:	d015      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800420a:	4b34      	ldr	r3, [pc, #208]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004212:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004216:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421a:	4a30      	ldr	r2, [pc, #192]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004220:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004222:	4b2e      	ldr	r3, [pc, #184]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	4a2d      	ldr	r2, [pc, #180]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800422e:	4a2b      	ldr	r2, [pc, #172]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004234:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800423e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004242:	d118      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd faac 	bl	80017a0 <HAL_GetTick>
 8004248:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800424c:	e00d      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fd faa7 	bl	80017a0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004258:	1ad2      	subs	r2, r2, r3
 800425a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800425e:	429a      	cmp	r2, r3
 8004260:	d903      	bls.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004268:	e005      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800426a:	4b1c      	ldr	r3, [pc, #112]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0eb      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	2b00      	cmp	r3, #0
 800427c:	d129      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800428e:	d10e      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004290:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042a0:	091a      	lsrs	r2, r3, #4
 80042a2:	4b10      	ldr	r3, [pc, #64]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	4a0d      	ldr	r2, [pc, #52]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6113      	str	r3, [r2, #16]
 80042ac:	e005      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	4a0a      	ldr	r2, [pc, #40]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042b8:	6113      	str	r3, [r2, #16]
 80042ba:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ca:	4a04      	ldr	r2, [pc, #16]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d0:	e00e      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80042da:	e009      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80042dc:	58024400 	.word	0x58024400
 80042e0:	58024800 	.word	0x58024800
 80042e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f002 0301 	and.w	r3, r2, #1
 80042fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004306:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800430a:	460b      	mov	r3, r1
 800430c:	4313      	orrs	r3, r2
 800430e:	f000 8089 	beq.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004318:	2b28      	cmp	r3, #40	@ 0x28
 800431a:	d86b      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800431c:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	080043fd 	.word	0x080043fd
 8004328:	080043f5 	.word	0x080043f5
 800432c:	080043f5 	.word	0x080043f5
 8004330:	080043f5 	.word	0x080043f5
 8004334:	080043f5 	.word	0x080043f5
 8004338:	080043f5 	.word	0x080043f5
 800433c:	080043f5 	.word	0x080043f5
 8004340:	080043f5 	.word	0x080043f5
 8004344:	080043c9 	.word	0x080043c9
 8004348:	080043f5 	.word	0x080043f5
 800434c:	080043f5 	.word	0x080043f5
 8004350:	080043f5 	.word	0x080043f5
 8004354:	080043f5 	.word	0x080043f5
 8004358:	080043f5 	.word	0x080043f5
 800435c:	080043f5 	.word	0x080043f5
 8004360:	080043f5 	.word	0x080043f5
 8004364:	080043df 	.word	0x080043df
 8004368:	080043f5 	.word	0x080043f5
 800436c:	080043f5 	.word	0x080043f5
 8004370:	080043f5 	.word	0x080043f5
 8004374:	080043f5 	.word	0x080043f5
 8004378:	080043f5 	.word	0x080043f5
 800437c:	080043f5 	.word	0x080043f5
 8004380:	080043f5 	.word	0x080043f5
 8004384:	080043fd 	.word	0x080043fd
 8004388:	080043f5 	.word	0x080043f5
 800438c:	080043f5 	.word	0x080043f5
 8004390:	080043f5 	.word	0x080043f5
 8004394:	080043f5 	.word	0x080043f5
 8004398:	080043f5 	.word	0x080043f5
 800439c:	080043f5 	.word	0x080043f5
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	080043f5 	.word	0x080043f5
 80043ac:	080043f5 	.word	0x080043f5
 80043b0:	080043f5 	.word	0x080043f5
 80043b4:	080043f5 	.word	0x080043f5
 80043b8:	080043f5 	.word	0x080043f5
 80043bc:	080043f5 	.word	0x080043f5
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	080043fd 	.word	0x080043fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043cc:	3308      	adds	r3, #8
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 ffc3 	bl	800535c <RCCEx_PLL2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043dc:	e00f      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	3328      	adds	r3, #40	@ 0x28
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 f86a 	bl	80054c0 <RCCEx_PLL3_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043f2:	e004      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80043fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004406:	4bbf      	ldr	r3, [pc, #764]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004414:	4abb      	ldr	r2, [pc, #748]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6553      	str	r3, [r2, #84]	@ 0x54
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 0302 	and.w	r3, r2, #2
 8004430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800443a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d041      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800444a:	2b05      	cmp	r3, #5
 800444c:	d824      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	080044a1 	.word	0x080044a1
 8004458:	0800446d 	.word	0x0800446d
 800445c:	08004483 	.word	0x08004483
 8004460:	080044a1 	.word	0x080044a1
 8004464:	080044a1 	.word	0x080044a1
 8004468:	080044a1 	.word	0x080044a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004470:	3308      	adds	r3, #8
 8004472:	2101      	movs	r1, #1
 8004474:	4618      	mov	r0, r3
 8004476:	f000 ff71 	bl	800535c <RCCEx_PLL2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004480:	e00f      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	3328      	adds	r3, #40	@ 0x28
 8004488:	2101      	movs	r1, #1
 800448a:	4618      	mov	r0, r3
 800448c:	f001 f818 	bl	80054c0 <RCCEx_PLL3_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004496:	e004      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800449e:	e000      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80044a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044aa:	4b96      	ldr	r3, [pc, #600]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ae:	f023 0107 	bic.w	r1, r3, #7
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044b8:	4a92      	ldr	r2, [pc, #584]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ba:	430b      	orrs	r3, r1
 80044bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80044be:	e003      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f002 0304 	and.w	r3, r2, #4
 80044d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d044      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d825      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80044f4:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	08004549 	.word	0x08004549
 8004500:	08004515 	.word	0x08004515
 8004504:	0800452b 	.word	0x0800452b
 8004508:	08004549 	.word	0x08004549
 800450c:	08004549 	.word	0x08004549
 8004510:	08004549 	.word	0x08004549
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	3308      	adds	r3, #8
 800451a:	2101      	movs	r1, #1
 800451c:	4618      	mov	r0, r3
 800451e:	f000 ff1d 	bl	800535c <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004528:	e00f      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	3328      	adds	r3, #40	@ 0x28
 8004530:	2101      	movs	r1, #1
 8004532:	4618      	mov	r0, r3
 8004534:	f000 ffc4 	bl	80054c0 <RCCEx_PLL3_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800453e:	e004      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004552:	4b6c      	ldr	r3, [pc, #432]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004556:	f023 0107 	bic.w	r1, r3, #7
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004562:	4a68      	ldr	r2, [pc, #416]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6593      	str	r3, [r2, #88]	@ 0x58
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f002 0320 	and.w	r3, r2, #32
 800457e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004582:	2300      	movs	r3, #0
 8004584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d055      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800459e:	d033      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80045a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045a4:	d82c      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045aa:	d02f      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b0:	d826      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045b6:	d02b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80045b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045bc:	d820      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c2:	d012      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80045c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c8:	d81a      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d022      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80045ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d2:	d115      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d8:	3308      	adds	r3, #8
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 febd 	bl	800535c <RCCEx_PLL2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045e8:	e015      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	3328      	adds	r3, #40	@ 0x28
 80045f0:	2102      	movs	r1, #2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 ff64 	bl	80054c0 <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045fe:	e00a      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004606:	e006      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004608:	bf00      	nop
 800460a:	e004      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800460c:	bf00      	nop
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800461e:	4b39      	ldr	r3, [pc, #228]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004622:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462e:	4a35      	ldr	r2, [pc, #212]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004630:	430b      	orrs	r3, r1
 8004632:	6553      	str	r3, [r2, #84]	@ 0x54
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800464a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800464e:	2300      	movs	r3, #0
 8004650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004654:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004658:	460b      	mov	r3, r1
 800465a:	4313      	orrs	r3, r2
 800465c:	d058      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004666:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800466a:	d033      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800466c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004670:	d82c      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004676:	d02f      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467c:	d826      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800467e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004682:	d02b      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004684:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004688:	d820      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800468a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800468e:	d012      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004694:	d81a      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d022      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469e:	d115      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a4:	3308      	adds	r3, #8
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fe57 	bl	800535c <RCCEx_PLL2_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046b4:	e015      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	3328      	adds	r3, #40	@ 0x28
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fefe 	bl	80054c0 <RCCEx_PLL3_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046ca:	e00a      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d2:	e006      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046d4:	bf00      	nop
 80046d6:	e004      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046d8:	bf00      	nop
 80046da:	e002      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10e      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046ea:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046fa:	4a02      	ldr	r2, [pc, #8]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004702:	bf00      	nop
 8004704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800471c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004726:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d055      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004738:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800473c:	d033      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800473e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004742:	d82c      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004748:	d02f      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474e:	d826      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004750:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004754:	d02b      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004756:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800475a:	d820      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800475c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004760:	d012      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004766:	d81a      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d022      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800476c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004770:	d115      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004776:	3308      	adds	r3, #8
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fdee 	bl	800535c <RCCEx_PLL2_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004786:	e015      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478c:	3328      	adds	r3, #40	@ 0x28
 800478e:	2102      	movs	r1, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fe95 	bl	80054c0 <RCCEx_PLL3_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800479c:	e00a      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047a4:	e006      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047a6:	bf00      	nop
 80047a8:	e004      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047aa:	bf00      	nop
 80047ac:	e002      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047ae:	bf00      	nop
 80047b0:	e000      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047cc:	4a9d      	ldr	r2, [pc, #628]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d2:	e003      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f002 0308 	and.w	r3, r2, #8
 80047e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80047f6:	460b      	mov	r3, r1
 80047f8:	4313      	orrs	r3, r2
 80047fa:	d01e      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004808:	d10c      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	3328      	adds	r3, #40	@ 0x28
 8004810:	2102      	movs	r1, #2
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fe54 	bl	80054c0 <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004824:	4b87      	ldr	r3, [pc, #540]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004828:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004834:	4a83      	ldr	r2, [pc, #524]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004836:	430b      	orrs	r3, r1
 8004838:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f002 0310 	and.w	r3, r2, #16
 8004846:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004850:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d01e      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004866:	d10c      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486c:	3328      	adds	r3, #40	@ 0x28
 800486e:	2102      	movs	r1, #2
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fe25 	bl	80054c0 <RCCEx_PLL3_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004882:	4b70      	ldr	r3, [pc, #448]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004892:	4a6c      	ldr	r2, [pc, #432]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004894:	430b      	orrs	r3, r1
 8004896:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80048a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80048b2:	460b      	mov	r3, r1
 80048b4:	4313      	orrs	r3, r2
 80048b6:	d03e      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80048b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048c4:	d022      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80048c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048ca:	d81b      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d4:	d00b      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80048d6:	e015      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	3308      	adds	r3, #8
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fd3b 	bl	800535c <RCCEx_PLL2_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048ec:	e00f      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	3328      	adds	r3, #40	@ 0x28
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fde2 	bl	80054c0 <RCCEx_PLL3_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004916:	4b4b      	ldr	r3, [pc, #300]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004926:	4a47      	ldr	r2, [pc, #284]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004928:	430b      	orrs	r3, r1
 800492a:	6593      	str	r3, [r2, #88]	@ 0x58
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004942:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004944:	2300      	movs	r3, #0
 8004946:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004948:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800494c:	460b      	mov	r3, r1
 800494e:	4313      	orrs	r3, r2
 8004950:	d03b      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800495e:	d01f      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004960:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004964:	d818      	bhi.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496a:	d003      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800496c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004970:	d007      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004972:	e011      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004974:	4b33      	ldr	r3, [pc, #204]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004978:	4a32      	ldr	r2, [pc, #200]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800497e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004980:	e00f      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	3328      	adds	r3, #40	@ 0x28
 8004988:	2101      	movs	r1, #1
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fd98 	bl	80054c0 <RCCEx_PLL3_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004996:	e004      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800499e:	e000      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80049a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049aa:	4b26      	ldr	r3, [pc, #152]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ba:	4a22      	ldr	r2, [pc, #136]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	6553      	str	r3, [r2, #84]	@ 0x54
 80049c0:	e003      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80049d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80049d8:	2300      	movs	r3, #0
 80049da:	677b      	str	r3, [r7, #116]	@ 0x74
 80049dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d034      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f4:	d007      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80049f6:	e011      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f8:	4b12      	ldr	r3, [pc, #72]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	4a11      	ldr	r2, [pc, #68]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a04:	e00e      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fca4 	bl	800535c <RCCEx_PLL2_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a1a:	e003      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10d      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3a:	4a02      	ldr	r2, [pc, #8]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a40:	e006      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a5e:	2300      	movs	r3, #0
 8004a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a66:	460b      	mov	r3, r1
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	d00c      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a70:	3328      	adds	r3, #40	@ 0x28
 8004a72:	2102      	movs	r1, #2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fd23 	bl	80054c0 <RCCEx_PLL3_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a92:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a94:	2300      	movs	r3, #0
 8004a96:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d038      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aae:	d018      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ab4:	d811      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aba:	d014      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac0:	d80b      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d011      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aca:	d106      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004acc:	4bc3      	ldr	r3, [pc, #780]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	4ac2      	ldr	r2, [pc, #776]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ad8:	e008      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ae0:	e004      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ae2:	bf00      	nop
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004af4:	4bb9      	ldr	r3, [pc, #740]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b04:	4ab5      	ldr	r2, [pc, #724]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b22:	2300      	movs	r3, #0
 8004b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b30:	4baa      	ldr	r3, [pc, #680]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3e:	4aa7      	ldr	r2, [pc, #668]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b52:	2300      	movs	r3, #0
 8004b54:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b60:	4b9e      	ldr	r3, [pc, #632]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b70:	4a9a      	ldr	r2, [pc, #616]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b84:	2300      	movs	r3, #0
 8004b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b92:	4b92      	ldr	r3, [pc, #584]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b96:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba0:	4a8e      	ldr	r2, [pc, #568]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	d00e      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bc2:	4b86      	ldr	r3, [pc, #536]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	4a85      	ldr	r2, [pc, #532]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bcc:	6113      	str	r3, [r2, #16]
 8004bce:	4b83      	ldr	r3, [pc, #524]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd0:	6919      	ldr	r1, [r3, #16]
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bda:	4a80      	ldr	r2, [pc, #512]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004bec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bee:	2300      	movs	r3, #0
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bfc:	4b77      	ldr	r3, [pc, #476]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c00:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	4a74      	ldr	r2, [pc, #464]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1e:	2300      	movs	r3, #0
 8004c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c2c:	4b6b      	ldr	r3, [pc, #428]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c30:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c3c:	4a67      	ldr	r2, [pc, #412]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	d011      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c62:	3308      	adds	r3, #8
 8004c64:	2100      	movs	r1, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fb78 	bl	800535c <RCCEx_PLL2_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	6239      	str	r1, [r7, #32]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	d011      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fb58 	bl	800535c <RCCEx_PLL2_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	61b9      	str	r1, [r7, #24]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	d011      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fb38 	bl	800535c <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	6139      	str	r1, [r7, #16]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	d011      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d22:	3328      	adds	r3, #40	@ 0x28
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fbca 	bl	80054c0 <RCCEx_PLL3_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	d011      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	3328      	adds	r3, #40	@ 0x28
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fbaa 	bl	80054c0 <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d011      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	3328      	adds	r3, #40	@ 0x28
 8004da4:	2102      	movs	r1, #2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fb8a 	bl	80054c0 <RCCEx_PLL3_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004dc2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e000      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ddc:	58024400 	.word	0x58024400

08004de0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004de4:	f7fe fd96 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	091b      	lsrs	r3, r3, #4
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	4904      	ldr	r1, [pc, #16]	@ (8004e08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004df6:	5ccb      	ldrb	r3, [r1, r3]
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	58024400 	.word	0x58024400
 8004e08:	08007f5c 	.word	0x08007f5c

08004e0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	@ 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e14:	4ba1      	ldr	r3, [pc, #644]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004e1e:	4b9f      	ldr	r3, [pc, #636]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e22:	0b1b      	lsrs	r3, r3, #12
 8004e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e2a:	4b9c      	ldr	r3, [pc, #624]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	091b      	lsrs	r3, r3, #4
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004e36:	4b99      	ldr	r3, [pc, #612]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3a:	08db      	lsrs	r3, r3, #3
 8004e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8111 	beq.w	800507c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	f000 8083 	beq.w	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	f200 80a1 	bhi.w	8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d056      	beq.n	8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e76:	e099      	b.n	8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e78:	4b88      	ldr	r3, [pc, #544]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02d      	beq.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e84:	4b85      	ldr	r3, [pc, #532]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	4a84      	ldr	r2, [pc, #528]	@ (80050a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
 8004e94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	ee07 3a90 	vmov	s15, r3
 8004e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eae:	4b7b      	ldr	r3, [pc, #492]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ede:	e087      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f22:	e065      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f36:	4b59      	ldr	r3, [pc, #356]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f66:	e043      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7a:	4b48      	ldr	r3, [pc, #288]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004faa:	e021      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbe:	4b37      	ldr	r3, [pc, #220]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff4:	0a5b      	lsrs	r3, r3, #9
 8004ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005002:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800500a:	edd7 6a07 	vldr	s13, [r7, #28]
 800500e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005016:	ee17 2a90 	vmov	r2, s15
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800501e:	4b1f      	ldr	r3, [pc, #124]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005022:	0c1b      	lsrs	r3, r3, #16
 8005024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005028:	ee07 3a90 	vmov	s15, r3
 800502c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005030:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005038:	edd7 6a07 	vldr	s13, [r7, #28]
 800503c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005044:	ee17 2a90 	vmov	r2, s15
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800504c:	4b13      	ldr	r3, [pc, #76]	@ (800509c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	0e1b      	lsrs	r3, r3, #24
 8005052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005066:	edd7 6a07 	vldr	s13, [r7, #28]
 800506a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800506e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005072:	ee17 2a90 	vmov	r2, s15
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800507a:	e008      	b.n	800508e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	609a      	str	r2, [r3, #8]
}
 800508e:	bf00      	nop
 8005090:	3724      	adds	r7, #36	@ 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
 80050a0:	03d09000 	.word	0x03d09000
 80050a4:	46000000 	.word	0x46000000
 80050a8:	4c742400 	.word	0x4c742400
 80050ac:	4a742400 	.word	0x4a742400
 80050b0:	4af42400 	.word	0x4af42400

080050b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b089      	sub	sp, #36	@ 0x24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050bc:	4ba1      	ldr	r3, [pc, #644]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80050c6:	4b9f      	ldr	r3, [pc, #636]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	0d1b      	lsrs	r3, r3, #20
 80050cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80050d2:	4b9c      	ldr	r3, [pc, #624]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80050de:	4b99      	ldr	r3, [pc, #612]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e2:	08db      	lsrs	r3, r3, #3
 80050e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8111 	beq.w	8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b02      	cmp	r3, #2
 8005106:	f000 8083 	beq.w	8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b02      	cmp	r3, #2
 800510e:	f200 80a1 	bhi.w	8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d056      	beq.n	80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800511e:	e099      	b.n	8005254 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005120:	4b88      	ldr	r3, [pc, #544]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d02d      	beq.n	8005188 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800512c:	4b85      	ldr	r3, [pc, #532]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	08db      	lsrs	r3, r3, #3
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	4a84      	ldr	r2, [pc, #528]	@ (8005348 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005138:	fa22 f303 	lsr.w	r3, r2, r3
 800513c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b7b      	ldr	r3, [pc, #492]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a03 	vldr	s12, [r7, #12]
 800516a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800534c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005186:	e087      	b.n	8005298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b6a      	ldr	r3, [pc, #424]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800534c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ca:	e065      	b.n	8005298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b59      	ldr	r3, [pc, #356]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800534c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520e:	e043      	b.n	8005298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800521e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005222:	4b48      	ldr	r3, [pc, #288]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005232:	ed97 6a03 	vldr	s12, [r7, #12]
 8005236:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800534c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800523a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005252:	e021      	b.n	8005298 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005266:	4b37      	ldr	r3, [pc, #220]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005276:	ed97 6a03 	vldr	s12, [r7, #12]
 800527a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800534c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800527e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800528a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005296:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005298:	4b2a      	ldr	r3, [pc, #168]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	0a5b      	lsrs	r3, r3, #9
 800529e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a2:	ee07 3a90 	vmov	s15, r3
 80052a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052be:	ee17 2a90 	vmov	r2, s15
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80052c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80052e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ec:	ee17 2a90 	vmov	r2, s15
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80052f4:	4b13      	ldr	r3, [pc, #76]	@ (8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	0e1b      	lsrs	r3, r3, #24
 80052fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800530a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800530e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800531a:	ee17 2a90 	vmov	r2, s15
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005322:	e008      	b.n	8005336 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	609a      	str	r2, [r3, #8]
}
 8005336:	bf00      	nop
 8005338:	3724      	adds	r7, #36	@ 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	58024400 	.word	0x58024400
 8005348:	03d09000 	.word	0x03d09000
 800534c:	46000000 	.word	0x46000000
 8005350:	4c742400 	.word	0x4c742400
 8005354:	4a742400 	.word	0x4a742400
 8005358:	4af42400 	.word	0x4af42400

0800535c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800536a:	4b53      	ldr	r3, [pc, #332]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b03      	cmp	r3, #3
 8005374:	d101      	bne.n	800537a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e099      	b.n	80054ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800537a:	4b4f      	ldr	r3, [pc, #316]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a4e      	ldr	r2, [pc, #312]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005380:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005386:	f7fc fa0b 	bl	80017a0 <HAL_GetTick>
 800538a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800538c:	e008      	b.n	80053a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800538e:	f7fc fa07 	bl	80017a0 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e086      	b.n	80054ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053a0:	4b45      	ldr	r3, [pc, #276]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f0      	bne.n	800538e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80053ac:	4b42      	ldr	r3, [pc, #264]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	031b      	lsls	r3, r3, #12
 80053ba:	493f      	ldr	r1, [pc, #252]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	628b      	str	r3, [r1, #40]	@ 0x28
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	025b      	lsls	r3, r3, #9
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	3b01      	subs	r3, #1
 80053dc:	041b      	lsls	r3, r3, #16
 80053de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	061b      	lsls	r3, r3, #24
 80053ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053f0:	4931      	ldr	r1, [pc, #196]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053f6:	4b30      	ldr	r3, [pc, #192]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	492d      	ldr	r1, [pc, #180]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005404:	4313      	orrs	r3, r2
 8005406:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005408:	4b2b      	ldr	r3, [pc, #172]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	f023 0220 	bic.w	r2, r3, #32
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	4928      	ldr	r1, [pc, #160]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800541a:	4b27      	ldr	r3, [pc, #156]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	4a26      	ldr	r2, [pc, #152]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005420:	f023 0310 	bic.w	r3, r3, #16
 8005424:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005426:	4b24      	ldr	r3, [pc, #144]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005428:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800542a:	4b24      	ldr	r3, [pc, #144]	@ (80054bc <RCCEx_PLL2_Config+0x160>)
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	69d2      	ldr	r2, [r2, #28]
 8005432:	00d2      	lsls	r2, r2, #3
 8005434:	4920      	ldr	r1, [pc, #128]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800543a:	4b1f      	ldr	r3, [pc, #124]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	4a1e      	ldr	r2, [pc, #120]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005440:	f043 0310 	orr.w	r3, r3, #16
 8005444:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800544c:	4b1a      	ldr	r3, [pc, #104]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	4a19      	ldr	r2, [pc, #100]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005452:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005456:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005458:	e00f      	b.n	800547a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d106      	bne.n	800546e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005460:	4b15      	ldr	r3, [pc, #84]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	4a14      	ldr	r2, [pc, #80]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800546a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800546c:	e005      	b.n	800547a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800546e:	4b12      	ldr	r3, [pc, #72]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	4a11      	ldr	r2, [pc, #68]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005474:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005478:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800547a:	4b0f      	ldr	r3, [pc, #60]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a0e      	ldr	r2, [pc, #56]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 8005480:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005486:	f7fc f98b 	bl	80017a0 <HAL_GetTick>
 800548a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800548c:	e008      	b.n	80054a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800548e:	f7fc f987 	bl	80017a0 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e006      	b.n	80054ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054a0:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <RCCEx_PLL2_Config+0x15c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	58024400 	.word	0x58024400
 80054bc:	ffff0007 	.word	0xffff0007

080054c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054ce:	4b53      	ldr	r3, [pc, #332]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80054d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d101      	bne.n	80054de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e099      	b.n	8005612 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80054de:	4b4f      	ldr	r3, [pc, #316]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a4e      	ldr	r2, [pc, #312]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ea:	f7fc f959 	bl	80017a0 <HAL_GetTick>
 80054ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054f0:	e008      	b.n	8005504 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054f2:	f7fc f955 	bl	80017a0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e086      	b.n	8005612 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005504:	4b45      	ldr	r3, [pc, #276]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f0      	bne.n	80054f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005510:	4b42      	ldr	r3, [pc, #264]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 8005512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005514:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	051b      	lsls	r3, r3, #20
 800551e:	493f      	ldr	r1, [pc, #252]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 8005520:	4313      	orrs	r3, r2
 8005522:	628b      	str	r3, [r1, #40]	@ 0x28
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	3b01      	subs	r3, #1
 800552a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	3b01      	subs	r3, #1
 8005534:	025b      	lsls	r3, r3, #9
 8005536:	b29b      	uxth	r3, r3
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	3b01      	subs	r3, #1
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	3b01      	subs	r3, #1
 800554e:	061b      	lsls	r3, r3, #24
 8005550:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005554:	4931      	ldr	r1, [pc, #196]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 8005556:	4313      	orrs	r3, r2
 8005558:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800555a:	4b30      	ldr	r3, [pc, #192]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 800555c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	492d      	ldr	r1, [pc, #180]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 8005568:	4313      	orrs	r3, r2
 800556a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800556c:	4b2b      	ldr	r3, [pc, #172]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 800556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005570:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	4928      	ldr	r1, [pc, #160]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 800557a:	4313      	orrs	r3, r2
 800557c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800557e:	4b27      	ldr	r3, [pc, #156]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	4a26      	ldr	r2, [pc, #152]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 8005584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800558a:	4b24      	ldr	r3, [pc, #144]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 800558c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800558e:	4b24      	ldr	r3, [pc, #144]	@ (8005620 <RCCEx_PLL3_Config+0x160>)
 8005590:	4013      	ands	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	69d2      	ldr	r2, [r2, #28]
 8005596:	00d2      	lsls	r2, r2, #3
 8005598:	4920      	ldr	r1, [pc, #128]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 800559a:	4313      	orrs	r3, r2
 800559c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800559e:	4b1f      	ldr	r3, [pc, #124]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	4a1e      	ldr	r2, [pc, #120]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80055b0:	4b1a      	ldr	r3, [pc, #104]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	4a19      	ldr	r2, [pc, #100]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80055ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80055bc:	e00f      	b.n	80055de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d106      	bne.n	80055d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80055c4:	4b15      	ldr	r3, [pc, #84]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	4a14      	ldr	r2, [pc, #80]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80055d0:	e005      	b.n	80055de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80055d2:	4b12      	ldr	r3, [pc, #72]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d6:	4a11      	ldr	r2, [pc, #68]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80055de:	4b0f      	ldr	r3, [pc, #60]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a0e      	ldr	r2, [pc, #56]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 80055e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ea:	f7fc f8d9 	bl	80017a0 <HAL_GetTick>
 80055ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055f0:	e008      	b.n	8005604 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055f2:	f7fc f8d5 	bl	80017a0 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e006      	b.n	8005612 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005604:	4b05      	ldr	r3, [pc, #20]	@ (800561c <RCCEx_PLL3_Config+0x15c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	58024400 	.word	0x58024400
 8005620:	ffff0007 	.word	0xffff0007

08005624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e042      	b.n	80056bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fb fdd5 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2224      	movs	r2, #36	@ 0x24
 8005652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8ba 	bl	80057e0 <UART_SetConfig>
 800566c:	4603      	mov	r3, r0
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e022      	b.n	80056bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fe16 	bl	80062b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fe9d 	bl	80063f4 <UART_CheckIdleState>
 80056ba:	4603      	mov	r3, r0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	@ 0x28
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	4613      	mov	r3, r2
 80056d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d17b      	bne.n	80057d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_UART_Transmit+0x26>
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e074      	b.n	80057d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2221      	movs	r2, #33	@ 0x21
 80056fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056fe:	f7fc f84f 	bl	80017a0 <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	88fa      	ldrh	r2, [r7, #6]
 8005708:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800571c:	d108      	bne.n	8005730 <HAL_UART_Transmit+0x6c>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d104      	bne.n	8005730 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	e003      	b.n	8005738 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005738:	e030      	b.n	800579c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2200      	movs	r2, #0
 8005742:	2180      	movs	r1, #128	@ 0x80
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 feff 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e03d      	b.n	80057d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005770:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	3302      	adds	r3, #2
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	e007      	b.n	800578a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	781a      	ldrb	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	3301      	adds	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1c8      	bne.n	800573a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2200      	movs	r2, #0
 80057b0:	2140      	movs	r1, #64	@ 0x40
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fec8 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e006      	b.n	80057d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e000      	b.n	80057d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
  }
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e4:	b092      	sub	sp, #72	@ 0x48
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	431a      	orrs	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	4313      	orrs	r3, r2
 8005806:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4bbe      	ldr	r3, [pc, #760]	@ (8005b08 <UART_SetConfig+0x328>)
 8005810:	4013      	ands	r3, r2
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005818:	430b      	orrs	r3, r1
 800581a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4ab3      	ldr	r2, [pc, #716]	@ (8005b0c <UART_SetConfig+0x32c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005848:	4313      	orrs	r3, r2
 800584a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	4baf      	ldr	r3, [pc, #700]	@ (8005b10 <UART_SetConfig+0x330>)
 8005854:	4013      	ands	r3, r2
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800585c:	430b      	orrs	r3, r1
 800585e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005866:	f023 010f 	bic.w	r1, r3, #15
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4aa6      	ldr	r2, [pc, #664]	@ (8005b14 <UART_SetConfig+0x334>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d177      	bne.n	8005970 <UART_SetConfig+0x190>
 8005880:	4ba5      	ldr	r3, [pc, #660]	@ (8005b18 <UART_SetConfig+0x338>)
 8005882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005884:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005888:	2b28      	cmp	r3, #40	@ 0x28
 800588a:	d86d      	bhi.n	8005968 <UART_SetConfig+0x188>
 800588c:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <UART_SetConfig+0xb4>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	08005939 	.word	0x08005939
 8005898:	08005969 	.word	0x08005969
 800589c:	08005969 	.word	0x08005969
 80058a0:	08005969 	.word	0x08005969
 80058a4:	08005969 	.word	0x08005969
 80058a8:	08005969 	.word	0x08005969
 80058ac:	08005969 	.word	0x08005969
 80058b0:	08005969 	.word	0x08005969
 80058b4:	08005941 	.word	0x08005941
 80058b8:	08005969 	.word	0x08005969
 80058bc:	08005969 	.word	0x08005969
 80058c0:	08005969 	.word	0x08005969
 80058c4:	08005969 	.word	0x08005969
 80058c8:	08005969 	.word	0x08005969
 80058cc:	08005969 	.word	0x08005969
 80058d0:	08005969 	.word	0x08005969
 80058d4:	08005949 	.word	0x08005949
 80058d8:	08005969 	.word	0x08005969
 80058dc:	08005969 	.word	0x08005969
 80058e0:	08005969 	.word	0x08005969
 80058e4:	08005969 	.word	0x08005969
 80058e8:	08005969 	.word	0x08005969
 80058ec:	08005969 	.word	0x08005969
 80058f0:	08005969 	.word	0x08005969
 80058f4:	08005951 	.word	0x08005951
 80058f8:	08005969 	.word	0x08005969
 80058fc:	08005969 	.word	0x08005969
 8005900:	08005969 	.word	0x08005969
 8005904:	08005969 	.word	0x08005969
 8005908:	08005969 	.word	0x08005969
 800590c:	08005969 	.word	0x08005969
 8005910:	08005969 	.word	0x08005969
 8005914:	08005959 	.word	0x08005959
 8005918:	08005969 	.word	0x08005969
 800591c:	08005969 	.word	0x08005969
 8005920:	08005969 	.word	0x08005969
 8005924:	08005969 	.word	0x08005969
 8005928:	08005969 	.word	0x08005969
 800592c:	08005969 	.word	0x08005969
 8005930:	08005969 	.word	0x08005969
 8005934:	08005961 	.word	0x08005961
 8005938:	2301      	movs	r3, #1
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e222      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005940:	2304      	movs	r3, #4
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e21e      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005948:	2308      	movs	r3, #8
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e21a      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005950:	2310      	movs	r3, #16
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005956:	e216      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005958:	2320      	movs	r3, #32
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595e:	e212      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005960:	2340      	movs	r3, #64	@ 0x40
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005966:	e20e      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005968:	2380      	movs	r3, #128	@ 0x80
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e20a      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a69      	ldr	r2, [pc, #420]	@ (8005b1c <UART_SetConfig+0x33c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d130      	bne.n	80059dc <UART_SetConfig+0x1fc>
 800597a:	4b67      	ldr	r3, [pc, #412]	@ (8005b18 <UART_SetConfig+0x338>)
 800597c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	2b05      	cmp	r3, #5
 8005984:	d826      	bhi.n	80059d4 <UART_SetConfig+0x1f4>
 8005986:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <UART_SetConfig+0x1ac>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059a5 	.word	0x080059a5
 8005990:	080059ad 	.word	0x080059ad
 8005994:	080059b5 	.word	0x080059b5
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059cd 	.word	0x080059cd
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e1ec      	b.n	8005d86 <UART_SetConfig+0x5a6>
 80059ac:	2304      	movs	r3, #4
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e1e8      	b.n	8005d86 <UART_SetConfig+0x5a6>
 80059b4:	2308      	movs	r3, #8
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e1e4      	b.n	8005d86 <UART_SetConfig+0x5a6>
 80059bc:	2310      	movs	r3, #16
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c2:	e1e0      	b.n	8005d86 <UART_SetConfig+0x5a6>
 80059c4:	2320      	movs	r3, #32
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ca:	e1dc      	b.n	8005d86 <UART_SetConfig+0x5a6>
 80059cc:	2340      	movs	r3, #64	@ 0x40
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d2:	e1d8      	b.n	8005d86 <UART_SetConfig+0x5a6>
 80059d4:	2380      	movs	r3, #128	@ 0x80
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059da:	e1d4      	b.n	8005d86 <UART_SetConfig+0x5a6>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005b20 <UART_SetConfig+0x340>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d130      	bne.n	8005a48 <UART_SetConfig+0x268>
 80059e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005b18 <UART_SetConfig+0x338>)
 80059e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d826      	bhi.n	8005a40 <UART_SetConfig+0x260>
 80059f2:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <UART_SetConfig+0x218>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a11 	.word	0x08005a11
 80059fc:	08005a19 	.word	0x08005a19
 8005a00:	08005a21 	.word	0x08005a21
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e1b6      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1e:	e1b2      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a26:	e1ae      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2e:	e1aa      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a30:	2320      	movs	r3, #32
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a36:	e1a6      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a38:	2340      	movs	r3, #64	@ 0x40
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3e:	e1a2      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a40:	2380      	movs	r3, #128	@ 0x80
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e19e      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a35      	ldr	r2, [pc, #212]	@ (8005b24 <UART_SetConfig+0x344>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d130      	bne.n	8005ab4 <UART_SetConfig+0x2d4>
 8005a52:	4b31      	ldr	r3, [pc, #196]	@ (8005b18 <UART_SetConfig+0x338>)
 8005a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	d826      	bhi.n	8005aac <UART_SetConfig+0x2cc>
 8005a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <UART_SetConfig+0x284>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a7d 	.word	0x08005a7d
 8005a68:	08005a85 	.word	0x08005a85
 8005a6c:	08005a8d 	.word	0x08005a8d
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a82:	e180      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a84:	2304      	movs	r3, #4
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8a:	e17c      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e178      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a94:	2310      	movs	r3, #16
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9a:	e174      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005a9c:	2320      	movs	r3, #32
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa2:	e170      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005aa4:	2340      	movs	r3, #64	@ 0x40
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e16c      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005aac:	2380      	movs	r3, #128	@ 0x80
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e168      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b28 <UART_SetConfig+0x348>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d142      	bne.n	8005b44 <UART_SetConfig+0x364>
 8005abe:	4b16      	ldr	r3, [pc, #88]	@ (8005b18 <UART_SetConfig+0x338>)
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d838      	bhi.n	8005b3c <UART_SetConfig+0x35c>
 8005aca:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad0 <UART_SetConfig+0x2f0>)
 8005acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad0:	08005ae9 	.word	0x08005ae9
 8005ad4:	08005af1 	.word	0x08005af1
 8005ad8:	08005af9 	.word	0x08005af9
 8005adc:	08005b01 	.word	0x08005b01
 8005ae0:	08005b2d 	.word	0x08005b2d
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aee:	e14a      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005af0:	2304      	movs	r3, #4
 8005af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af6:	e146      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005af8:	2308      	movs	r3, #8
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afe:	e142      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005b00:	2310      	movs	r3, #16
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b06:	e13e      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005b08:	cfff69f3 	.word	0xcfff69f3
 8005b0c:	58000c00 	.word	0x58000c00
 8005b10:	11fff4ff 	.word	0x11fff4ff
 8005b14:	40011000 	.word	0x40011000
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	40004400 	.word	0x40004400
 8005b20:	40004800 	.word	0x40004800
 8005b24:	40004c00 	.word	0x40004c00
 8005b28:	40005000 	.word	0x40005000
 8005b2c:	2320      	movs	r3, #32
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e128      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005b34:	2340      	movs	r3, #64	@ 0x40
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e124      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005b3c:	2380      	movs	r3, #128	@ 0x80
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e120      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4acb      	ldr	r2, [pc, #812]	@ (8005e78 <UART_SetConfig+0x698>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d176      	bne.n	8005c3c <UART_SetConfig+0x45c>
 8005b4e:	4bcb      	ldr	r3, [pc, #812]	@ (8005e7c <UART_SetConfig+0x69c>)
 8005b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b56:	2b28      	cmp	r3, #40	@ 0x28
 8005b58:	d86c      	bhi.n	8005c34 <UART_SetConfig+0x454>
 8005b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b60 <UART_SetConfig+0x380>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005c05 	.word	0x08005c05
 8005b64:	08005c35 	.word	0x08005c35
 8005b68:	08005c35 	.word	0x08005c35
 8005b6c:	08005c35 	.word	0x08005c35
 8005b70:	08005c35 	.word	0x08005c35
 8005b74:	08005c35 	.word	0x08005c35
 8005b78:	08005c35 	.word	0x08005c35
 8005b7c:	08005c35 	.word	0x08005c35
 8005b80:	08005c0d 	.word	0x08005c0d
 8005b84:	08005c35 	.word	0x08005c35
 8005b88:	08005c35 	.word	0x08005c35
 8005b8c:	08005c35 	.word	0x08005c35
 8005b90:	08005c35 	.word	0x08005c35
 8005b94:	08005c35 	.word	0x08005c35
 8005b98:	08005c35 	.word	0x08005c35
 8005b9c:	08005c35 	.word	0x08005c35
 8005ba0:	08005c15 	.word	0x08005c15
 8005ba4:	08005c35 	.word	0x08005c35
 8005ba8:	08005c35 	.word	0x08005c35
 8005bac:	08005c35 	.word	0x08005c35
 8005bb0:	08005c35 	.word	0x08005c35
 8005bb4:	08005c35 	.word	0x08005c35
 8005bb8:	08005c35 	.word	0x08005c35
 8005bbc:	08005c35 	.word	0x08005c35
 8005bc0:	08005c1d 	.word	0x08005c1d
 8005bc4:	08005c35 	.word	0x08005c35
 8005bc8:	08005c35 	.word	0x08005c35
 8005bcc:	08005c35 	.word	0x08005c35
 8005bd0:	08005c35 	.word	0x08005c35
 8005bd4:	08005c35 	.word	0x08005c35
 8005bd8:	08005c35 	.word	0x08005c35
 8005bdc:	08005c35 	.word	0x08005c35
 8005be0:	08005c25 	.word	0x08005c25
 8005be4:	08005c35 	.word	0x08005c35
 8005be8:	08005c35 	.word	0x08005c35
 8005bec:	08005c35 	.word	0x08005c35
 8005bf0:	08005c35 	.word	0x08005c35
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c35 	.word	0x08005c35
 8005bfc:	08005c35 	.word	0x08005c35
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e0bc      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e0b8      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c14:	2308      	movs	r3, #8
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e0b4      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c22:	e0b0      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c24:	2320      	movs	r3, #32
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2a:	e0ac      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c2c:	2340      	movs	r3, #64	@ 0x40
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c32:	e0a8      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c34:	2380      	movs	r3, #128	@ 0x80
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e0a4      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a8f      	ldr	r2, [pc, #572]	@ (8005e80 <UART_SetConfig+0x6a0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d130      	bne.n	8005ca8 <UART_SetConfig+0x4c8>
 8005c46:	4b8d      	ldr	r3, [pc, #564]	@ (8005e7c <UART_SetConfig+0x69c>)
 8005c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d826      	bhi.n	8005ca0 <UART_SetConfig+0x4c0>
 8005c52:	a201      	add	r2, pc, #4	@ (adr r2, 8005c58 <UART_SetConfig+0x478>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c71 	.word	0x08005c71
 8005c5c:	08005c79 	.word	0x08005c79
 8005c60:	08005c81 	.word	0x08005c81
 8005c64:	08005c89 	.word	0x08005c89
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005c99 	.word	0x08005c99
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e086      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e082      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c80:	2308      	movs	r3, #8
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e07e      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e07a      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c90:	2320      	movs	r3, #32
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e076      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005c98:	2340      	movs	r3, #64	@ 0x40
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e072      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005ca0:	2380      	movs	r3, #128	@ 0x80
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e06e      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a75      	ldr	r2, [pc, #468]	@ (8005e84 <UART_SetConfig+0x6a4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d130      	bne.n	8005d14 <UART_SetConfig+0x534>
 8005cb2:	4b72      	ldr	r3, [pc, #456]	@ (8005e7c <UART_SetConfig+0x69c>)
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d826      	bhi.n	8005d0c <UART_SetConfig+0x52c>
 8005cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <UART_SetConfig+0x4e4>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005cdd 	.word	0x08005cdd
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	08005ced 	.word	0x08005ced
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e050      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e04c      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e048      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e044      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e040      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d04:	2340      	movs	r3, #64	@ 0x40
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e03c      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d0c:	2380      	movs	r3, #128	@ 0x80
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e038      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a5b      	ldr	r2, [pc, #364]	@ (8005e88 <UART_SetConfig+0x6a8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d130      	bne.n	8005d80 <UART_SetConfig+0x5a0>
 8005d1e:	4b57      	ldr	r3, [pc, #348]	@ (8005e7c <UART_SetConfig+0x69c>)
 8005d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d826      	bhi.n	8005d78 <UART_SetConfig+0x598>
 8005d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <UART_SetConfig+0x550>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d49 	.word	0x08005d49
 8005d34:	08005d51 	.word	0x08005d51
 8005d38:	08005d59 	.word	0x08005d59
 8005d3c:	08005d61 	.word	0x08005d61
 8005d40:	08005d69 	.word	0x08005d69
 8005d44:	08005d71 	.word	0x08005d71
 8005d48:	2302      	movs	r3, #2
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e01a      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d50:	2304      	movs	r3, #4
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d56:	e016      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d58:	2308      	movs	r3, #8
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e012      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d60:	2310      	movs	r3, #16
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e00e      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d68:	2320      	movs	r3, #32
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e00a      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d70:	2340      	movs	r3, #64	@ 0x40
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e006      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d78:	2380      	movs	r3, #128	@ 0x80
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e002      	b.n	8005d86 <UART_SetConfig+0x5a6>
 8005d80:	2380      	movs	r3, #128	@ 0x80
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e88 <UART_SetConfig+0x6a8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	f040 80f8 	bne.w	8005f82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	dc46      	bgt.n	8005e28 <UART_SetConfig+0x648>
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	f2c0 8082 	blt.w	8005ea4 <UART_SetConfig+0x6c4>
 8005da0:	3b02      	subs	r3, #2
 8005da2:	2b1e      	cmp	r3, #30
 8005da4:	d87e      	bhi.n	8005ea4 <UART_SetConfig+0x6c4>
 8005da6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <UART_SetConfig+0x5cc>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005e2f 	.word	0x08005e2f
 8005db0:	08005ea5 	.word	0x08005ea5
 8005db4:	08005e37 	.word	0x08005e37
 8005db8:	08005ea5 	.word	0x08005ea5
 8005dbc:	08005ea5 	.word	0x08005ea5
 8005dc0:	08005ea5 	.word	0x08005ea5
 8005dc4:	08005e47 	.word	0x08005e47
 8005dc8:	08005ea5 	.word	0x08005ea5
 8005dcc:	08005ea5 	.word	0x08005ea5
 8005dd0:	08005ea5 	.word	0x08005ea5
 8005dd4:	08005ea5 	.word	0x08005ea5
 8005dd8:	08005ea5 	.word	0x08005ea5
 8005ddc:	08005ea5 	.word	0x08005ea5
 8005de0:	08005ea5 	.word	0x08005ea5
 8005de4:	08005e57 	.word	0x08005e57
 8005de8:	08005ea5 	.word	0x08005ea5
 8005dec:	08005ea5 	.word	0x08005ea5
 8005df0:	08005ea5 	.word	0x08005ea5
 8005df4:	08005ea5 	.word	0x08005ea5
 8005df8:	08005ea5 	.word	0x08005ea5
 8005dfc:	08005ea5 	.word	0x08005ea5
 8005e00:	08005ea5 	.word	0x08005ea5
 8005e04:	08005ea5 	.word	0x08005ea5
 8005e08:	08005ea5 	.word	0x08005ea5
 8005e0c:	08005ea5 	.word	0x08005ea5
 8005e10:	08005ea5 	.word	0x08005ea5
 8005e14:	08005ea5 	.word	0x08005ea5
 8005e18:	08005ea5 	.word	0x08005ea5
 8005e1c:	08005ea5 	.word	0x08005ea5
 8005e20:	08005ea5 	.word	0x08005ea5
 8005e24:	08005e97 	.word	0x08005e97
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d037      	beq.n	8005e9c <UART_SetConfig+0x6bc>
 8005e2c:	e03a      	b.n	8005ea4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e2e:	f7fe ffd7 	bl	8004de0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e34:	e03c      	b.n	8005eb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe ffe6 	bl	8004e0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e44:	e034      	b.n	8005eb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e46:	f107 0318 	add.w	r3, r7, #24
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff f932 	bl	80050b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e54:	e02c      	b.n	8005eb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e56:	4b09      	ldr	r3, [pc, #36]	@ (8005e7c <UART_SetConfig+0x69c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d016      	beq.n	8005e90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e62:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <UART_SetConfig+0x69c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	08db      	lsrs	r3, r3, #3
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	4a07      	ldr	r2, [pc, #28]	@ (8005e8c <UART_SetConfig+0x6ac>)
 8005e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e74:	e01c      	b.n	8005eb0 <UART_SetConfig+0x6d0>
 8005e76:	bf00      	nop
 8005e78:	40011400 	.word	0x40011400
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	40007800 	.word	0x40007800
 8005e84:	40007c00 	.word	0x40007c00
 8005e88:	58000c00 	.word	0x58000c00
 8005e8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e90:	4b9d      	ldr	r3, [pc, #628]	@ (8006108 <UART_SetConfig+0x928>)
 8005e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e94:	e00c      	b.n	8005eb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e96:	4b9d      	ldr	r3, [pc, #628]	@ (800610c <UART_SetConfig+0x92c>)
 8005e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e9a:	e009      	b.n	8005eb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea2:	e005      	b.n	8005eb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005eae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 81de 	beq.w	8006274 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	4a94      	ldr	r2, [pc, #592]	@ (8006110 <UART_SetConfig+0x930>)
 8005ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	4413      	add	r3, r2
 8005ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d305      	bcc.n	8005ee8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d903      	bls.n	8005ef0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005eee:	e1c1      	b.n	8006274 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	60fa      	str	r2, [r7, #12]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	4a84      	ldr	r2, [pc, #528]	@ (8006110 <UART_SetConfig+0x930>)
 8005efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2200      	movs	r2, #0
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f12:	f7fa fa35 	bl	8000380 <__aeabi_uldivmod>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	020b      	lsls	r3, r1, #8
 8005f28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f2c:	0202      	lsls	r2, r0, #8
 8005f2e:	6979      	ldr	r1, [r7, #20]
 8005f30:	6849      	ldr	r1, [r1, #4]
 8005f32:	0849      	lsrs	r1, r1, #1
 8005f34:	2000      	movs	r0, #0
 8005f36:	460c      	mov	r4, r1
 8005f38:	4605      	mov	r5, r0
 8005f3a:	eb12 0804 	adds.w	r8, r2, r4
 8005f3e:	eb43 0905 	adc.w	r9, r3, r5
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	469a      	mov	sl, r3
 8005f4a:	4693      	mov	fp, r2
 8005f4c:	4652      	mov	r2, sl
 8005f4e:	465b      	mov	r3, fp
 8005f50:	4640      	mov	r0, r8
 8005f52:	4649      	mov	r1, r9
 8005f54:	f7fa fa14 	bl	8000380 <__aeabi_uldivmod>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f66:	d308      	bcc.n	8005f7a <UART_SetConfig+0x79a>
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6e:	d204      	bcs.n	8005f7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f76:	60da      	str	r2, [r3, #12]
 8005f78:	e17c      	b.n	8006274 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f80:	e178      	b.n	8006274 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f8a:	f040 80c5 	bne.w	8006118 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	dc48      	bgt.n	8006028 <UART_SetConfig+0x848>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	db7b      	blt.n	8006092 <UART_SetConfig+0x8b2>
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d879      	bhi.n	8006092 <UART_SetConfig+0x8b2>
 8005f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa4 <UART_SetConfig+0x7c4>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	0800602f 	.word	0x0800602f
 8005fa8:	08006037 	.word	0x08006037
 8005fac:	08006093 	.word	0x08006093
 8005fb0:	08006093 	.word	0x08006093
 8005fb4:	0800603f 	.word	0x0800603f
 8005fb8:	08006093 	.word	0x08006093
 8005fbc:	08006093 	.word	0x08006093
 8005fc0:	08006093 	.word	0x08006093
 8005fc4:	0800604f 	.word	0x0800604f
 8005fc8:	08006093 	.word	0x08006093
 8005fcc:	08006093 	.word	0x08006093
 8005fd0:	08006093 	.word	0x08006093
 8005fd4:	08006093 	.word	0x08006093
 8005fd8:	08006093 	.word	0x08006093
 8005fdc:	08006093 	.word	0x08006093
 8005fe0:	08006093 	.word	0x08006093
 8005fe4:	0800605f 	.word	0x0800605f
 8005fe8:	08006093 	.word	0x08006093
 8005fec:	08006093 	.word	0x08006093
 8005ff0:	08006093 	.word	0x08006093
 8005ff4:	08006093 	.word	0x08006093
 8005ff8:	08006093 	.word	0x08006093
 8005ffc:	08006093 	.word	0x08006093
 8006000:	08006093 	.word	0x08006093
 8006004:	08006093 	.word	0x08006093
 8006008:	08006093 	.word	0x08006093
 800600c:	08006093 	.word	0x08006093
 8006010:	08006093 	.word	0x08006093
 8006014:	08006093 	.word	0x08006093
 8006018:	08006093 	.word	0x08006093
 800601c:	08006093 	.word	0x08006093
 8006020:	08006093 	.word	0x08006093
 8006024:	08006085 	.word	0x08006085
 8006028:	2b40      	cmp	r3, #64	@ 0x40
 800602a:	d02e      	beq.n	800608a <UART_SetConfig+0x8aa>
 800602c:	e031      	b.n	8006092 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602e:	f7fd fca1 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8006032:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006034:	e033      	b.n	800609e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006036:	f7fd fcb3 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 800603a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800603c:	e02f      	b.n	800609e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800603e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe fee2 	bl	8004e0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800604c:	e027      	b.n	800609e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800604e:	f107 0318 	add.w	r3, r7, #24
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff f82e 	bl	80050b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800605c:	e01f      	b.n	800609e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800605e:	4b2d      	ldr	r3, [pc, #180]	@ (8006114 <UART_SetConfig+0x934>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800606a:	4b2a      	ldr	r3, [pc, #168]	@ (8006114 <UART_SetConfig+0x934>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	08db      	lsrs	r3, r3, #3
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	4a24      	ldr	r2, [pc, #144]	@ (8006108 <UART_SetConfig+0x928>)
 8006076:	fa22 f303 	lsr.w	r3, r2, r3
 800607a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800607c:	e00f      	b.n	800609e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800607e:	4b22      	ldr	r3, [pc, #136]	@ (8006108 <UART_SetConfig+0x928>)
 8006080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006082:	e00c      	b.n	800609e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006084:	4b21      	ldr	r3, [pc, #132]	@ (800610c <UART_SetConfig+0x92c>)
 8006086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006088:	e009      	b.n	800609e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800608a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800608e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006090:	e005      	b.n	800609e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800609c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800609e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80e7 	beq.w	8006274 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	4a19      	ldr	r2, [pc, #100]	@ (8006110 <UART_SetConfig+0x930>)
 80060ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b8:	005a      	lsls	r2, r3, #1
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	085b      	lsrs	r3, r3, #1
 80060c0:	441a      	add	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	2b0f      	cmp	r3, #15
 80060d0:	d916      	bls.n	8006100 <UART_SetConfig+0x920>
 80060d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d8:	d212      	bcs.n	8006100 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f023 030f 	bic.w	r3, r3, #15
 80060e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060f2:	4313      	orrs	r3, r2
 80060f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80060fc:	60da      	str	r2, [r3, #12]
 80060fe:	e0b9      	b.n	8006274 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006106:	e0b5      	b.n	8006274 <UART_SetConfig+0xa94>
 8006108:	03d09000 	.word	0x03d09000
 800610c:	003d0900 	.word	0x003d0900
 8006110:	08007f6c 	.word	0x08007f6c
 8006114:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006118:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800611c:	2b20      	cmp	r3, #32
 800611e:	dc49      	bgt.n	80061b4 <UART_SetConfig+0x9d4>
 8006120:	2b00      	cmp	r3, #0
 8006122:	db7c      	blt.n	800621e <UART_SetConfig+0xa3e>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d87a      	bhi.n	800621e <UART_SetConfig+0xa3e>
 8006128:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <UART_SetConfig+0x950>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	080061bb 	.word	0x080061bb
 8006134:	080061c3 	.word	0x080061c3
 8006138:	0800621f 	.word	0x0800621f
 800613c:	0800621f 	.word	0x0800621f
 8006140:	080061cb 	.word	0x080061cb
 8006144:	0800621f 	.word	0x0800621f
 8006148:	0800621f 	.word	0x0800621f
 800614c:	0800621f 	.word	0x0800621f
 8006150:	080061db 	.word	0x080061db
 8006154:	0800621f 	.word	0x0800621f
 8006158:	0800621f 	.word	0x0800621f
 800615c:	0800621f 	.word	0x0800621f
 8006160:	0800621f 	.word	0x0800621f
 8006164:	0800621f 	.word	0x0800621f
 8006168:	0800621f 	.word	0x0800621f
 800616c:	0800621f 	.word	0x0800621f
 8006170:	080061eb 	.word	0x080061eb
 8006174:	0800621f 	.word	0x0800621f
 8006178:	0800621f 	.word	0x0800621f
 800617c:	0800621f 	.word	0x0800621f
 8006180:	0800621f 	.word	0x0800621f
 8006184:	0800621f 	.word	0x0800621f
 8006188:	0800621f 	.word	0x0800621f
 800618c:	0800621f 	.word	0x0800621f
 8006190:	0800621f 	.word	0x0800621f
 8006194:	0800621f 	.word	0x0800621f
 8006198:	0800621f 	.word	0x0800621f
 800619c:	0800621f 	.word	0x0800621f
 80061a0:	0800621f 	.word	0x0800621f
 80061a4:	0800621f 	.word	0x0800621f
 80061a8:	0800621f 	.word	0x0800621f
 80061ac:	0800621f 	.word	0x0800621f
 80061b0:	08006211 	.word	0x08006211
 80061b4:	2b40      	cmp	r3, #64	@ 0x40
 80061b6:	d02e      	beq.n	8006216 <UART_SetConfig+0xa36>
 80061b8:	e031      	b.n	800621e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ba:	f7fd fbdb 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 80061be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061c0:	e033      	b.n	800622a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c2:	f7fd fbed 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 80061c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061c8:	e02f      	b.n	800622a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fe1c 	bl	8004e0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d8:	e027      	b.n	800622a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061da:	f107 0318 	add.w	r3, r7, #24
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe ff68 	bl	80050b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e8:	e01f      	b.n	800622a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ea:	4b2d      	ldr	r3, [pc, #180]	@ (80062a0 <UART_SetConfig+0xac0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061f6:	4b2a      	ldr	r3, [pc, #168]	@ (80062a0 <UART_SetConfig+0xac0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	08db      	lsrs	r3, r3, #3
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	4a28      	ldr	r2, [pc, #160]	@ (80062a4 <UART_SetConfig+0xac4>)
 8006202:	fa22 f303 	lsr.w	r3, r2, r3
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006208:	e00f      	b.n	800622a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800620a:	4b26      	ldr	r3, [pc, #152]	@ (80062a4 <UART_SetConfig+0xac4>)
 800620c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800620e:	e00c      	b.n	800622a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006210:	4b25      	ldr	r3, [pc, #148]	@ (80062a8 <UART_SetConfig+0xac8>)
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006214:	e009      	b.n	800622a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621c:	e005      	b.n	800622a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006228:	bf00      	nop
    }

    if (pclk != 0U)
 800622a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d021      	beq.n	8006274 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	4a1d      	ldr	r2, [pc, #116]	@ (80062ac <UART_SetConfig+0xacc>)
 8006236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800623a:	461a      	mov	r2, r3
 800623c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	441a      	add	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d909      	bls.n	800626e <UART_SetConfig+0xa8e>
 800625a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006260:	d205      	bcs.n	800626e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	b29a      	uxth	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60da      	str	r2, [r3, #12]
 800626c:	e002      	b.n	8006274 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2201      	movs	r2, #1
 8006278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2201      	movs	r2, #1
 8006280:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2200      	movs	r2, #0
 8006288:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2200      	movs	r2, #0
 800628e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006290:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006294:	4618      	mov	r0, r3
 8006296:	3748      	adds	r7, #72	@ 0x48
 8006298:	46bd      	mov	sp, r7
 800629a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800629e:	bf00      	nop
 80062a0:	58024400 	.word	0x58024400
 80062a4:	03d09000 	.word	0x03d09000
 80062a8:	003d0900 	.word	0x003d0900
 80062ac:	08007f6c 	.word	0x08007f6c

080062b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01a      	beq.n	80063c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ae:	d10a      	bne.n	80063c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	605a      	str	r2, [r3, #4]
  }
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b098      	sub	sp, #96	@ 0x60
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006404:	f7fb f9cc 	bl	80017a0 <HAL_GetTick>
 8006408:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b08      	cmp	r3, #8
 8006416:	d12f      	bne.n	8006478 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006418:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006420:	2200      	movs	r2, #0
 8006422:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f88e 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d022      	beq.n	8006478 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006446:	653b      	str	r3, [r7, #80]	@ 0x50
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006450:	647b      	str	r3, [r7, #68]	@ 0x44
 8006452:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800645e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e6      	bne.n	8006432 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e063      	b.n	8006540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	2b04      	cmp	r3, #4
 8006484:	d149      	bne.n	800651a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006486:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800648e:	2200      	movs	r2, #0
 8006490:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f857 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d03c      	beq.n	800651a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	623b      	str	r3, [r7, #32]
   return(result);
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064be:	633b      	str	r3, [r7, #48]	@ 0x30
 80064c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e6      	bne.n	80064a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3308      	adds	r3, #8
 80064d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064f2:	61fa      	str	r2, [r7, #28]
 80064f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	69b9      	ldr	r1, [r7, #24]
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e5      	bne.n	80064d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e012      	b.n	8006540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3758      	adds	r7, #88	@ 0x58
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006558:	e049      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d045      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006562:	f7fb f91d 	bl	80017a0 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <UART_WaitOnFlagUntilTimeout+0x30>
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e048      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d031      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b08      	cmp	r3, #8
 8006596:	d110      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2208      	movs	r2, #8
 800659e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f839 	bl	8006618 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2208      	movs	r2, #8
 80065aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e029      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c8:	d111      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f81f 	bl	8006618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e00f      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4013      	ands	r3, r2
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	bf0c      	ite	eq
 80065fe:	2301      	moveq	r3, #1
 8006600:	2300      	movne	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	429a      	cmp	r2, r3
 800660a:	d0a6      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b095      	sub	sp, #84	@ 0x54
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006640:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3308      	adds	r3, #8
 8006658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	61fb      	str	r3, [r7, #28]
   return(result);
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	4b1e      	ldr	r3, [pc, #120]	@ (80066e0 <UART_EndRxTransfer+0xc8>)
 8006666:	4013      	ands	r3, r2
 8006668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e5      	bne.n	8006652 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800668a:	2b01      	cmp	r3, #1
 800668c:	d118      	bne.n	80066c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	60bb      	str	r3, [r7, #8]
   return(result);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f023 0310 	bic.w	r3, r3, #16
 80066a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6979      	ldr	r1, [r7, #20]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e6      	bne.n	800668e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066d4:	bf00      	nop
 80066d6:	3754      	adds	r7, #84	@ 0x54
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	effffffe 	.word	0xeffffffe

080066e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_UARTEx_DisableFifoMode+0x16>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e027      	b.n	800674a <HAL_UARTEx_DisableFifoMode+0x66>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2224      	movs	r2, #36	@ 0x24
 8006706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0201 	bic.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006728:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800676a:	2302      	movs	r3, #2
 800676c:	e02d      	b.n	80067ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2224      	movs	r2, #36	@ 0x24
 800677a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f850 	bl	8006850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e02d      	b.n	8006846 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2224      	movs	r2, #36	@ 0x24
 80067f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f812 	bl	8006850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800685c:	2b00      	cmp	r3, #0
 800685e:	d108      	bne.n	8006872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006870:	e031      	b.n	80068d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006872:	2310      	movs	r3, #16
 8006874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006876:	2310      	movs	r3, #16
 8006878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	0e5b      	lsrs	r3, r3, #25
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	0f5b      	lsrs	r3, r3, #29
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	7b3a      	ldrb	r2, [r7, #12]
 800689e:	4911      	ldr	r1, [pc, #68]	@ (80068e4 <UARTEx_SetNbDataToProcess+0x94>)
 80068a0:	5c8a      	ldrb	r2, [r1, r2]
 80068a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068a6:	7b3a      	ldrb	r2, [r7, #12]
 80068a8:	490f      	ldr	r1, [pc, #60]	@ (80068e8 <UARTEx_SetNbDataToProcess+0x98>)
 80068aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	7b7a      	ldrb	r2, [r7, #13]
 80068bc:	4909      	ldr	r1, [pc, #36]	@ (80068e4 <UARTEx_SetNbDataToProcess+0x94>)
 80068be:	5c8a      	ldrb	r2, [r1, r2]
 80068c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068c4:	7b7a      	ldrb	r2, [r7, #13]
 80068c6:	4908      	ldr	r1, [pc, #32]	@ (80068e8 <UARTEx_SetNbDataToProcess+0x98>)
 80068c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068d6:	bf00      	nop
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	08007f84 	.word	0x08007f84
 80068e8:	08007f8c 	.word	0x08007f8c

080068ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068ec:	b084      	sub	sp, #16
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	f107 001c 	add.w	r0, r7, #28
 80068fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	2b01      	cmp	r3, #1
 8006902:	d120      	bne.n	8006946 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006908:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	4b2a      	ldr	r3, [pc, #168]	@ (80069c0 <USB_CoreInit+0xd4>)
 8006916:	4013      	ands	r3, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d105      	bne.n	800693a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 faac 	bl	8006e98 <USB_CoreReset>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
 8006944:	e01a      	b.n	800697c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 faa0 	bl	8006e98 <USB_CoreReset>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800695c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006966:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	639a      	str	r2, [r3, #56]	@ 0x38
 800696e:	e005      	b.n	800697c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006974:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	2b01      	cmp	r3, #1
 8006980:	d116      	bne.n	80069b0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006986:	b29a      	uxth	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006990:	4b0c      	ldr	r3, [pc, #48]	@ (80069c4 <USB_CoreInit+0xd8>)
 8006992:	4313      	orrs	r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f043 0206 	orr.w	r2, r3, #6
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069bc:	b004      	add	sp, #16
 80069be:	4770      	bx	lr
 80069c0:	ffbdffbf 	.word	0xffbdffbf
 80069c4:	03ee0000 	.word	0x03ee0000

080069c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f023 0201 	bic.w	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a06:	78fb      	ldrb	r3, [r7, #3]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d115      	bne.n	8006a38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a18:	2001      	movs	r0, #1
 8006a1a:	f7fa fecd 	bl	80017b8 <HAL_Delay>
      ms++;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3301      	adds	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fa29 	bl	8006e7c <USB_GetMode>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d01e      	beq.n	8006a6e <USB_SetCurrentMode+0x84>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b31      	cmp	r3, #49	@ 0x31
 8006a34:	d9f0      	bls.n	8006a18 <USB_SetCurrentMode+0x2e>
 8006a36:	e01a      	b.n	8006a6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d115      	bne.n	8006a6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	f7fa feb4 	bl	80017b8 <HAL_Delay>
      ms++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa10 	bl	8006e7c <USB_GetMode>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <USB_SetCurrentMode+0x84>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b31      	cmp	r3, #49	@ 0x31
 8006a66:	d9f0      	bls.n	8006a4a <USB_SetCurrentMode+0x60>
 8006a68:	e001      	b.n	8006a6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e005      	b.n	8006a7a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b32      	cmp	r3, #50	@ 0x32
 8006a72:	d101      	bne.n	8006a78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e000      	b.n	8006a7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a84:	b084      	sub	sp, #16
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b086      	sub	sp, #24
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e009      	b.n	8006ab8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3340      	adds	r3, #64	@ 0x40
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2b0e      	cmp	r3, #14
 8006abc:	d9f2      	bls.n	8006aa4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11c      	bne.n	8006afe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ad2:	f043 0302 	orr.w	r3, r3, #2
 8006ad6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006adc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e005      	b.n	8006b0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b10:	461a      	mov	r2, r3
 8006b12:	2300      	movs	r3, #0
 8006b14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b24:	461a      	mov	r2, r3
 8006b26:	680b      	ldr	r3, [r1, #0]
 8006b28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d10c      	bne.n	8006b4a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b36:	2100      	movs	r1, #0
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f965 	bl	8006e08 <USB_SetDevSpeed>
 8006b3e:	e008      	b.n	8006b52 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b40:	2101      	movs	r1, #1
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f960 	bl	8006e08 <USB_SetDevSpeed>
 8006b48:	e003      	b.n	8006b52 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b4a:	2103      	movs	r1, #3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f95b 	bl	8006e08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b52:	2110      	movs	r1, #16
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f8f3 	bl	8006d40 <USB_FlushTxFifo>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f91f 	bl	8006da8 <USB_FlushRxFifo>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b86:	461a      	mov	r2, r3
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b92:	461a      	mov	r2, r3
 8006b94:	2300      	movs	r3, #0
 8006b96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	e043      	b.n	8006c26 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bb4:	d118      	bne.n	8006be8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	e013      	b.n	8006bfa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bde:	461a      	mov	r2, r3
 8006be0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e008      	b.n	8006bfa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c06:	461a      	mov	r2, r3
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	3301      	adds	r3, #1
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d3b7      	bcc.n	8006b9e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	e043      	b.n	8006cbc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c4a:	d118      	bne.n	8006c7e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	e013      	b.n	8006c90 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c74:	461a      	mov	r2, r3
 8006c76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	e008      	b.n	8006c90 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d3b7      	bcc.n	8006c34 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006ce4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d105      	bne.n	8006cf8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f043 0210 	orr.w	r2, r3, #16
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d38 <USB_DevInit+0x2b4>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f043 0208 	orr.w	r2, r3, #8
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d105      	bne.n	8006d28 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <USB_DevInit+0x2b8>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d34:	b004      	add	sp, #16
 8006d36:	4770      	bx	lr
 8006d38:	803c3800 	.word	0x803c3800
 8006d3c:	40000004 	.word	0x40000004

08006d40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a13      	ldr	r2, [pc, #76]	@ (8006da4 <USB_FlushTxFifo+0x64>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d901      	bls.n	8006d60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e01b      	b.n	8006d98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	daf2      	bge.n	8006d4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	019b      	lsls	r3, r3, #6
 8006d70:	f043 0220 	orr.w	r2, r3, #32
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4a08      	ldr	r2, [pc, #32]	@ (8006da4 <USB_FlushTxFifo+0x64>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d901      	bls.n	8006d8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e006      	b.n	8006d98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	d0f0      	beq.n	8006d78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	00030d40 	.word	0x00030d40

08006da8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4a11      	ldr	r2, [pc, #68]	@ (8006e04 <USB_FlushRxFifo+0x5c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e018      	b.n	8006df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	daf2      	bge.n	8006db4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4a08      	ldr	r2, [pc, #32]	@ (8006e04 <USB_FlushRxFifo+0x5c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e006      	b.n	8006df8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0310 	and.w	r3, r3, #16
 8006df2:	2b10      	cmp	r3, #16
 8006df4:	d0f0      	beq.n	8006dd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	00030d40 	.word	0x00030d40

08006e08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e54:	f023 0303 	bic.w	r3, r3, #3
 8006e58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	f003 0301 	and.w	r3, r3, #1
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4a13      	ldr	r2, [pc, #76]	@ (8006efc <USB_CoreReset+0x64>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d901      	bls.n	8006eb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e01b      	b.n	8006eee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	daf2      	bge.n	8006ea4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f043 0201 	orr.w	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4a09      	ldr	r2, [pc, #36]	@ (8006efc <USB_CoreReset+0x64>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d901      	bls.n	8006ee0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e006      	b.n	8006eee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d0f0      	beq.n	8006ece <USB_CoreReset+0x36>

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	00030d40 	.word	0x00030d40

08006f00 <std>:
 8006f00:	2300      	movs	r3, #0
 8006f02:	b510      	push	{r4, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	e9c0 3300 	strd	r3, r3, [r0]
 8006f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f0e:	6083      	str	r3, [r0, #8]
 8006f10:	8181      	strh	r1, [r0, #12]
 8006f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f14:	81c2      	strh	r2, [r0, #14]
 8006f16:	6183      	str	r3, [r0, #24]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	305c      	adds	r0, #92	@ 0x5c
 8006f1e:	f000 f9f9 	bl	8007314 <memset>
 8006f22:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <std+0x58>)
 8006f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f26:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <std+0x5c>)
 8006f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f60 <std+0x60>)
 8006f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f64 <std+0x64>)
 8006f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f32:	4b0d      	ldr	r3, [pc, #52]	@ (8006f68 <std+0x68>)
 8006f34:	6224      	str	r4, [r4, #32]
 8006f36:	429c      	cmp	r4, r3
 8006f38:	d006      	beq.n	8006f48 <std+0x48>
 8006f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f3e:	4294      	cmp	r4, r2
 8006f40:	d002      	beq.n	8006f48 <std+0x48>
 8006f42:	33d0      	adds	r3, #208	@ 0xd0
 8006f44:	429c      	cmp	r4, r3
 8006f46:	d105      	bne.n	8006f54 <std+0x54>
 8006f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f50:	f000 ba58 	b.w	8007404 <__retarget_lock_init_recursive>
 8006f54:	bd10      	pop	{r4, pc}
 8006f56:	bf00      	nop
 8006f58:	08007165 	.word	0x08007165
 8006f5c:	08007187 	.word	0x08007187
 8006f60:	080071bf 	.word	0x080071bf
 8006f64:	080071e3 	.word	0x080071e3
 8006f68:	2400323c 	.word	0x2400323c

08006f6c <stdio_exit_handler>:
 8006f6c:	4a02      	ldr	r2, [pc, #8]	@ (8006f78 <stdio_exit_handler+0xc>)
 8006f6e:	4903      	ldr	r1, [pc, #12]	@ (8006f7c <stdio_exit_handler+0x10>)
 8006f70:	4803      	ldr	r0, [pc, #12]	@ (8006f80 <stdio_exit_handler+0x14>)
 8006f72:	f000 b869 	b.w	8007048 <_fwalk_sglue>
 8006f76:	bf00      	nop
 8006f78:	24000010 	.word	0x24000010
 8006f7c:	08007ca5 	.word	0x08007ca5
 8006f80:	24000020 	.word	0x24000020

08006f84 <cleanup_stdio>:
 8006f84:	6841      	ldr	r1, [r0, #4]
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <cleanup_stdio+0x34>)
 8006f88:	4299      	cmp	r1, r3
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	d001      	beq.n	8006f94 <cleanup_stdio+0x10>
 8006f90:	f000 fe88 	bl	8007ca4 <_fflush_r>
 8006f94:	68a1      	ldr	r1, [r4, #8]
 8006f96:	4b09      	ldr	r3, [pc, #36]	@ (8006fbc <cleanup_stdio+0x38>)
 8006f98:	4299      	cmp	r1, r3
 8006f9a:	d002      	beq.n	8006fa2 <cleanup_stdio+0x1e>
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 fe81 	bl	8007ca4 <_fflush_r>
 8006fa2:	68e1      	ldr	r1, [r4, #12]
 8006fa4:	4b06      	ldr	r3, [pc, #24]	@ (8006fc0 <cleanup_stdio+0x3c>)
 8006fa6:	4299      	cmp	r1, r3
 8006fa8:	d004      	beq.n	8006fb4 <cleanup_stdio+0x30>
 8006faa:	4620      	mov	r0, r4
 8006fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb0:	f000 be78 	b.w	8007ca4 <_fflush_r>
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2400323c 	.word	0x2400323c
 8006fbc:	240032a4 	.word	0x240032a4
 8006fc0:	2400330c 	.word	0x2400330c

08006fc4 <global_stdio_init.part.0>:
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff4 <global_stdio_init.part.0+0x30>)
 8006fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8006ff8 <global_stdio_init.part.0+0x34>)
 8006fca:	4a0c      	ldr	r2, [pc, #48]	@ (8006ffc <global_stdio_init.part.0+0x38>)
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	f7ff ff94 	bl	8006f00 <std>
 8006fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006fdc:	2201      	movs	r2, #1
 8006fde:	2109      	movs	r1, #9
 8006fe0:	f7ff ff8e 	bl	8006f00 <std>
 8006fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006fe8:	2202      	movs	r2, #2
 8006fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fee:	2112      	movs	r1, #18
 8006ff0:	f7ff bf86 	b.w	8006f00 <std>
 8006ff4:	24003374 	.word	0x24003374
 8006ff8:	2400323c 	.word	0x2400323c
 8006ffc:	08006f6d 	.word	0x08006f6d

08007000 <__sfp_lock_acquire>:
 8007000:	4801      	ldr	r0, [pc, #4]	@ (8007008 <__sfp_lock_acquire+0x8>)
 8007002:	f000 ba00 	b.w	8007406 <__retarget_lock_acquire_recursive>
 8007006:	bf00      	nop
 8007008:	2400337d 	.word	0x2400337d

0800700c <__sfp_lock_release>:
 800700c:	4801      	ldr	r0, [pc, #4]	@ (8007014 <__sfp_lock_release+0x8>)
 800700e:	f000 b9fb 	b.w	8007408 <__retarget_lock_release_recursive>
 8007012:	bf00      	nop
 8007014:	2400337d 	.word	0x2400337d

08007018 <__sinit>:
 8007018:	b510      	push	{r4, lr}
 800701a:	4604      	mov	r4, r0
 800701c:	f7ff fff0 	bl	8007000 <__sfp_lock_acquire>
 8007020:	6a23      	ldr	r3, [r4, #32]
 8007022:	b11b      	cbz	r3, 800702c <__sinit+0x14>
 8007024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007028:	f7ff bff0 	b.w	800700c <__sfp_lock_release>
 800702c:	4b04      	ldr	r3, [pc, #16]	@ (8007040 <__sinit+0x28>)
 800702e:	6223      	str	r3, [r4, #32]
 8007030:	4b04      	ldr	r3, [pc, #16]	@ (8007044 <__sinit+0x2c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f5      	bne.n	8007024 <__sinit+0xc>
 8007038:	f7ff ffc4 	bl	8006fc4 <global_stdio_init.part.0>
 800703c:	e7f2      	b.n	8007024 <__sinit+0xc>
 800703e:	bf00      	nop
 8007040:	08006f85 	.word	0x08006f85
 8007044:	24003374 	.word	0x24003374

08007048 <_fwalk_sglue>:
 8007048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800704c:	4607      	mov	r7, r0
 800704e:	4688      	mov	r8, r1
 8007050:	4614      	mov	r4, r2
 8007052:	2600      	movs	r6, #0
 8007054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007058:	f1b9 0901 	subs.w	r9, r9, #1
 800705c:	d505      	bpl.n	800706a <_fwalk_sglue+0x22>
 800705e:	6824      	ldr	r4, [r4, #0]
 8007060:	2c00      	cmp	r4, #0
 8007062:	d1f7      	bne.n	8007054 <_fwalk_sglue+0xc>
 8007064:	4630      	mov	r0, r6
 8007066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706a:	89ab      	ldrh	r3, [r5, #12]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d907      	bls.n	8007080 <_fwalk_sglue+0x38>
 8007070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007074:	3301      	adds	r3, #1
 8007076:	d003      	beq.n	8007080 <_fwalk_sglue+0x38>
 8007078:	4629      	mov	r1, r5
 800707a:	4638      	mov	r0, r7
 800707c:	47c0      	blx	r8
 800707e:	4306      	orrs	r6, r0
 8007080:	3568      	adds	r5, #104	@ 0x68
 8007082:	e7e9      	b.n	8007058 <_fwalk_sglue+0x10>

08007084 <iprintf>:
 8007084:	b40f      	push	{r0, r1, r2, r3}
 8007086:	b507      	push	{r0, r1, r2, lr}
 8007088:	4906      	ldr	r1, [pc, #24]	@ (80070a4 <iprintf+0x20>)
 800708a:	ab04      	add	r3, sp, #16
 800708c:	6808      	ldr	r0, [r1, #0]
 800708e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007092:	6881      	ldr	r1, [r0, #8]
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	f000 fadb 	bl	8007650 <_vfiprintf_r>
 800709a:	b003      	add	sp, #12
 800709c:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a0:	b004      	add	sp, #16
 80070a2:	4770      	bx	lr
 80070a4:	2400001c 	.word	0x2400001c

080070a8 <_puts_r>:
 80070a8:	6a03      	ldr	r3, [r0, #32]
 80070aa:	b570      	push	{r4, r5, r6, lr}
 80070ac:	6884      	ldr	r4, [r0, #8]
 80070ae:	4605      	mov	r5, r0
 80070b0:	460e      	mov	r6, r1
 80070b2:	b90b      	cbnz	r3, 80070b8 <_puts_r+0x10>
 80070b4:	f7ff ffb0 	bl	8007018 <__sinit>
 80070b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070ba:	07db      	lsls	r3, r3, #31
 80070bc:	d405      	bmi.n	80070ca <_puts_r+0x22>
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	0598      	lsls	r0, r3, #22
 80070c2:	d402      	bmi.n	80070ca <_puts_r+0x22>
 80070c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070c6:	f000 f99e 	bl	8007406 <__retarget_lock_acquire_recursive>
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	0719      	lsls	r1, r3, #28
 80070ce:	d502      	bpl.n	80070d6 <_puts_r+0x2e>
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d135      	bne.n	8007142 <_puts_r+0x9a>
 80070d6:	4621      	mov	r1, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	f000 f8c5 	bl	8007268 <__swsetup_r>
 80070de:	b380      	cbz	r0, 8007142 <_puts_r+0x9a>
 80070e0:	f04f 35ff 	mov.w	r5, #4294967295
 80070e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070e6:	07da      	lsls	r2, r3, #31
 80070e8:	d405      	bmi.n	80070f6 <_puts_r+0x4e>
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	059b      	lsls	r3, r3, #22
 80070ee:	d402      	bmi.n	80070f6 <_puts_r+0x4e>
 80070f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070f2:	f000 f989 	bl	8007408 <__retarget_lock_release_recursive>
 80070f6:	4628      	mov	r0, r5
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	da04      	bge.n	8007108 <_puts_r+0x60>
 80070fe:	69a2      	ldr	r2, [r4, #24]
 8007100:	429a      	cmp	r2, r3
 8007102:	dc17      	bgt.n	8007134 <_puts_r+0x8c>
 8007104:	290a      	cmp	r1, #10
 8007106:	d015      	beq.n	8007134 <_puts_r+0x8c>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	6022      	str	r2, [r4, #0]
 800710e:	7019      	strb	r1, [r3, #0]
 8007110:	68a3      	ldr	r3, [r4, #8]
 8007112:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007116:	3b01      	subs	r3, #1
 8007118:	60a3      	str	r3, [r4, #8]
 800711a:	2900      	cmp	r1, #0
 800711c:	d1ed      	bne.n	80070fa <_puts_r+0x52>
 800711e:	2b00      	cmp	r3, #0
 8007120:	da11      	bge.n	8007146 <_puts_r+0x9e>
 8007122:	4622      	mov	r2, r4
 8007124:	210a      	movs	r1, #10
 8007126:	4628      	mov	r0, r5
 8007128:	f000 f85f 	bl	80071ea <__swbuf_r>
 800712c:	3001      	adds	r0, #1
 800712e:	d0d7      	beq.n	80070e0 <_puts_r+0x38>
 8007130:	250a      	movs	r5, #10
 8007132:	e7d7      	b.n	80070e4 <_puts_r+0x3c>
 8007134:	4622      	mov	r2, r4
 8007136:	4628      	mov	r0, r5
 8007138:	f000 f857 	bl	80071ea <__swbuf_r>
 800713c:	3001      	adds	r0, #1
 800713e:	d1e7      	bne.n	8007110 <_puts_r+0x68>
 8007140:	e7ce      	b.n	80070e0 <_puts_r+0x38>
 8007142:	3e01      	subs	r6, #1
 8007144:	e7e4      	b.n	8007110 <_puts_r+0x68>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	6022      	str	r2, [r4, #0]
 800714c:	220a      	movs	r2, #10
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	e7ee      	b.n	8007130 <_puts_r+0x88>
	...

08007154 <puts>:
 8007154:	4b02      	ldr	r3, [pc, #8]	@ (8007160 <puts+0xc>)
 8007156:	4601      	mov	r1, r0
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	f7ff bfa5 	b.w	80070a8 <_puts_r>
 800715e:	bf00      	nop
 8007160:	2400001c 	.word	0x2400001c

08007164 <__sread>:
 8007164:	b510      	push	{r4, lr}
 8007166:	460c      	mov	r4, r1
 8007168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716c:	f000 f8fc 	bl	8007368 <_read_r>
 8007170:	2800      	cmp	r0, #0
 8007172:	bfab      	itete	ge
 8007174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007176:	89a3      	ldrhlt	r3, [r4, #12]
 8007178:	181b      	addge	r3, r3, r0
 800717a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800717e:	bfac      	ite	ge
 8007180:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007182:	81a3      	strhlt	r3, [r4, #12]
 8007184:	bd10      	pop	{r4, pc}

08007186 <__swrite>:
 8007186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718a:	461f      	mov	r7, r3
 800718c:	898b      	ldrh	r3, [r1, #12]
 800718e:	05db      	lsls	r3, r3, #23
 8007190:	4605      	mov	r5, r0
 8007192:	460c      	mov	r4, r1
 8007194:	4616      	mov	r6, r2
 8007196:	d505      	bpl.n	80071a4 <__swrite+0x1e>
 8007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719c:	2302      	movs	r3, #2
 800719e:	2200      	movs	r2, #0
 80071a0:	f000 f8d0 	bl	8007344 <_lseek_r>
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	4632      	mov	r2, r6
 80071b2:	463b      	mov	r3, r7
 80071b4:	4628      	mov	r0, r5
 80071b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ba:	f000 b8e7 	b.w	800738c <_write_r>

080071be <__sseek>:
 80071be:	b510      	push	{r4, lr}
 80071c0:	460c      	mov	r4, r1
 80071c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c6:	f000 f8bd 	bl	8007344 <_lseek_r>
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	bf15      	itete	ne
 80071d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80071d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80071d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80071da:	81a3      	strheq	r3, [r4, #12]
 80071dc:	bf18      	it	ne
 80071de:	81a3      	strhne	r3, [r4, #12]
 80071e0:	bd10      	pop	{r4, pc}

080071e2 <__sclose>:
 80071e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e6:	f000 b89d 	b.w	8007324 <_close_r>

080071ea <__swbuf_r>:
 80071ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ec:	460e      	mov	r6, r1
 80071ee:	4614      	mov	r4, r2
 80071f0:	4605      	mov	r5, r0
 80071f2:	b118      	cbz	r0, 80071fc <__swbuf_r+0x12>
 80071f4:	6a03      	ldr	r3, [r0, #32]
 80071f6:	b90b      	cbnz	r3, 80071fc <__swbuf_r+0x12>
 80071f8:	f7ff ff0e 	bl	8007018 <__sinit>
 80071fc:	69a3      	ldr	r3, [r4, #24]
 80071fe:	60a3      	str	r3, [r4, #8]
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	071a      	lsls	r2, r3, #28
 8007204:	d501      	bpl.n	800720a <__swbuf_r+0x20>
 8007206:	6923      	ldr	r3, [r4, #16]
 8007208:	b943      	cbnz	r3, 800721c <__swbuf_r+0x32>
 800720a:	4621      	mov	r1, r4
 800720c:	4628      	mov	r0, r5
 800720e:	f000 f82b 	bl	8007268 <__swsetup_r>
 8007212:	b118      	cbz	r0, 800721c <__swbuf_r+0x32>
 8007214:	f04f 37ff 	mov.w	r7, #4294967295
 8007218:	4638      	mov	r0, r7
 800721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	6922      	ldr	r2, [r4, #16]
 8007220:	1a98      	subs	r0, r3, r2
 8007222:	6963      	ldr	r3, [r4, #20]
 8007224:	b2f6      	uxtb	r6, r6
 8007226:	4283      	cmp	r3, r0
 8007228:	4637      	mov	r7, r6
 800722a:	dc05      	bgt.n	8007238 <__swbuf_r+0x4e>
 800722c:	4621      	mov	r1, r4
 800722e:	4628      	mov	r0, r5
 8007230:	f000 fd38 	bl	8007ca4 <_fflush_r>
 8007234:	2800      	cmp	r0, #0
 8007236:	d1ed      	bne.n	8007214 <__swbuf_r+0x2a>
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	3b01      	subs	r3, #1
 800723c:	60a3      	str	r3, [r4, #8]
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	6022      	str	r2, [r4, #0]
 8007244:	701e      	strb	r6, [r3, #0]
 8007246:	6962      	ldr	r2, [r4, #20]
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	429a      	cmp	r2, r3
 800724c:	d004      	beq.n	8007258 <__swbuf_r+0x6e>
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	07db      	lsls	r3, r3, #31
 8007252:	d5e1      	bpl.n	8007218 <__swbuf_r+0x2e>
 8007254:	2e0a      	cmp	r6, #10
 8007256:	d1df      	bne.n	8007218 <__swbuf_r+0x2e>
 8007258:	4621      	mov	r1, r4
 800725a:	4628      	mov	r0, r5
 800725c:	f000 fd22 	bl	8007ca4 <_fflush_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	d0d9      	beq.n	8007218 <__swbuf_r+0x2e>
 8007264:	e7d6      	b.n	8007214 <__swbuf_r+0x2a>
	...

08007268 <__swsetup_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4b29      	ldr	r3, [pc, #164]	@ (8007310 <__swsetup_r+0xa8>)
 800726c:	4605      	mov	r5, r0
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	460c      	mov	r4, r1
 8007272:	b118      	cbz	r0, 800727c <__swsetup_r+0x14>
 8007274:	6a03      	ldr	r3, [r0, #32]
 8007276:	b90b      	cbnz	r3, 800727c <__swsetup_r+0x14>
 8007278:	f7ff fece 	bl	8007018 <__sinit>
 800727c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007280:	0719      	lsls	r1, r3, #28
 8007282:	d422      	bmi.n	80072ca <__swsetup_r+0x62>
 8007284:	06da      	lsls	r2, r3, #27
 8007286:	d407      	bmi.n	8007298 <__swsetup_r+0x30>
 8007288:	2209      	movs	r2, #9
 800728a:	602a      	str	r2, [r5, #0]
 800728c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007290:	81a3      	strh	r3, [r4, #12]
 8007292:	f04f 30ff 	mov.w	r0, #4294967295
 8007296:	e033      	b.n	8007300 <__swsetup_r+0x98>
 8007298:	0758      	lsls	r0, r3, #29
 800729a:	d512      	bpl.n	80072c2 <__swsetup_r+0x5a>
 800729c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800729e:	b141      	cbz	r1, 80072b2 <__swsetup_r+0x4a>
 80072a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072a4:	4299      	cmp	r1, r3
 80072a6:	d002      	beq.n	80072ae <__swsetup_r+0x46>
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 f8af 	bl	800740c <_free_r>
 80072ae:	2300      	movs	r3, #0
 80072b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	2300      	movs	r3, #0
 80072bc:	6063      	str	r3, [r4, #4]
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	89a3      	ldrh	r3, [r4, #12]
 80072c4:	f043 0308 	orr.w	r3, r3, #8
 80072c8:	81a3      	strh	r3, [r4, #12]
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	b94b      	cbnz	r3, 80072e2 <__swsetup_r+0x7a>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d8:	d003      	beq.n	80072e2 <__swsetup_r+0x7a>
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 fd2f 	bl	8007d40 <__smakebuf_r>
 80072e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e6:	f013 0201 	ands.w	r2, r3, #1
 80072ea:	d00a      	beq.n	8007302 <__swsetup_r+0x9a>
 80072ec:	2200      	movs	r2, #0
 80072ee:	60a2      	str	r2, [r4, #8]
 80072f0:	6962      	ldr	r2, [r4, #20]
 80072f2:	4252      	negs	r2, r2
 80072f4:	61a2      	str	r2, [r4, #24]
 80072f6:	6922      	ldr	r2, [r4, #16]
 80072f8:	b942      	cbnz	r2, 800730c <__swsetup_r+0xa4>
 80072fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072fe:	d1c5      	bne.n	800728c <__swsetup_r+0x24>
 8007300:	bd38      	pop	{r3, r4, r5, pc}
 8007302:	0799      	lsls	r1, r3, #30
 8007304:	bf58      	it	pl
 8007306:	6962      	ldrpl	r2, [r4, #20]
 8007308:	60a2      	str	r2, [r4, #8]
 800730a:	e7f4      	b.n	80072f6 <__swsetup_r+0x8e>
 800730c:	2000      	movs	r0, #0
 800730e:	e7f7      	b.n	8007300 <__swsetup_r+0x98>
 8007310:	2400001c 	.word	0x2400001c

08007314 <memset>:
 8007314:	4402      	add	r2, r0
 8007316:	4603      	mov	r3, r0
 8007318:	4293      	cmp	r3, r2
 800731a:	d100      	bne.n	800731e <memset+0xa>
 800731c:	4770      	bx	lr
 800731e:	f803 1b01 	strb.w	r1, [r3], #1
 8007322:	e7f9      	b.n	8007318 <memset+0x4>

08007324 <_close_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	4d06      	ldr	r5, [pc, #24]	@ (8007340 <_close_r+0x1c>)
 8007328:	2300      	movs	r3, #0
 800732a:	4604      	mov	r4, r0
 800732c:	4608      	mov	r0, r1
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	f7fa f894 	bl	800145c <_close>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_close_r+0x1a>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_close_r+0x1a>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	24003378 	.word	0x24003378

08007344 <_lseek_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4d07      	ldr	r5, [pc, #28]	@ (8007364 <_lseek_r+0x20>)
 8007348:	4604      	mov	r4, r0
 800734a:	4608      	mov	r0, r1
 800734c:	4611      	mov	r1, r2
 800734e:	2200      	movs	r2, #0
 8007350:	602a      	str	r2, [r5, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	f7fa f8a9 	bl	80014aa <_lseek>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d102      	bne.n	8007362 <_lseek_r+0x1e>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	b103      	cbz	r3, 8007362 <_lseek_r+0x1e>
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	24003378 	.word	0x24003378

08007368 <_read_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4d07      	ldr	r5, [pc, #28]	@ (8007388 <_read_r+0x20>)
 800736c:	4604      	mov	r4, r0
 800736e:	4608      	mov	r0, r1
 8007370:	4611      	mov	r1, r2
 8007372:	2200      	movs	r2, #0
 8007374:	602a      	str	r2, [r5, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	f7fa f853 	bl	8001422 <_read>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_read_r+0x1e>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_read_r+0x1e>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	24003378 	.word	0x24003378

0800738c <_write_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4d07      	ldr	r5, [pc, #28]	@ (80073ac <_write_r+0x20>)
 8007390:	4604      	mov	r4, r0
 8007392:	4608      	mov	r0, r1
 8007394:	4611      	mov	r1, r2
 8007396:	2200      	movs	r2, #0
 8007398:	602a      	str	r2, [r5, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	f7f9 fa12 	bl	80007c4 <_write>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_write_r+0x1e>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_write_r+0x1e>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	24003378 	.word	0x24003378

080073b0 <__errno>:
 80073b0:	4b01      	ldr	r3, [pc, #4]	@ (80073b8 <__errno+0x8>)
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	2400001c 	.word	0x2400001c

080073bc <__libc_init_array>:
 80073bc:	b570      	push	{r4, r5, r6, lr}
 80073be:	4d0d      	ldr	r5, [pc, #52]	@ (80073f4 <__libc_init_array+0x38>)
 80073c0:	4c0d      	ldr	r4, [pc, #52]	@ (80073f8 <__libc_init_array+0x3c>)
 80073c2:	1b64      	subs	r4, r4, r5
 80073c4:	10a4      	asrs	r4, r4, #2
 80073c6:	2600      	movs	r6, #0
 80073c8:	42a6      	cmp	r6, r4
 80073ca:	d109      	bne.n	80073e0 <__libc_init_array+0x24>
 80073cc:	4d0b      	ldr	r5, [pc, #44]	@ (80073fc <__libc_init_array+0x40>)
 80073ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007400 <__libc_init_array+0x44>)
 80073d0:	f000 fd24 	bl	8007e1c <_init>
 80073d4:	1b64      	subs	r4, r4, r5
 80073d6:	10a4      	asrs	r4, r4, #2
 80073d8:	2600      	movs	r6, #0
 80073da:	42a6      	cmp	r6, r4
 80073dc:	d105      	bne.n	80073ea <__libc_init_array+0x2e>
 80073de:	bd70      	pop	{r4, r5, r6, pc}
 80073e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e4:	4798      	blx	r3
 80073e6:	3601      	adds	r6, #1
 80073e8:	e7ee      	b.n	80073c8 <__libc_init_array+0xc>
 80073ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ee:	4798      	blx	r3
 80073f0:	3601      	adds	r6, #1
 80073f2:	e7f2      	b.n	80073da <__libc_init_array+0x1e>
 80073f4:	08007fd0 	.word	0x08007fd0
 80073f8:	08007fd0 	.word	0x08007fd0
 80073fc:	08007fd0 	.word	0x08007fd0
 8007400:	08007fd4 	.word	0x08007fd4

08007404 <__retarget_lock_init_recursive>:
 8007404:	4770      	bx	lr

08007406 <__retarget_lock_acquire_recursive>:
 8007406:	4770      	bx	lr

08007408 <__retarget_lock_release_recursive>:
 8007408:	4770      	bx	lr
	...

0800740c <_free_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4605      	mov	r5, r0
 8007410:	2900      	cmp	r1, #0
 8007412:	d041      	beq.n	8007498 <_free_r+0x8c>
 8007414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007418:	1f0c      	subs	r4, r1, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfb8      	it	lt
 800741e:	18e4      	addlt	r4, r4, r3
 8007420:	f000 f8e0 	bl	80075e4 <__malloc_lock>
 8007424:	4a1d      	ldr	r2, [pc, #116]	@ (800749c <_free_r+0x90>)
 8007426:	6813      	ldr	r3, [r2, #0]
 8007428:	b933      	cbnz	r3, 8007438 <_free_r+0x2c>
 800742a:	6063      	str	r3, [r4, #4]
 800742c:	6014      	str	r4, [r2, #0]
 800742e:	4628      	mov	r0, r5
 8007430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007434:	f000 b8dc 	b.w	80075f0 <__malloc_unlock>
 8007438:	42a3      	cmp	r3, r4
 800743a:	d908      	bls.n	800744e <_free_r+0x42>
 800743c:	6820      	ldr	r0, [r4, #0]
 800743e:	1821      	adds	r1, r4, r0
 8007440:	428b      	cmp	r3, r1
 8007442:	bf01      	itttt	eq
 8007444:	6819      	ldreq	r1, [r3, #0]
 8007446:	685b      	ldreq	r3, [r3, #4]
 8007448:	1809      	addeq	r1, r1, r0
 800744a:	6021      	streq	r1, [r4, #0]
 800744c:	e7ed      	b.n	800742a <_free_r+0x1e>
 800744e:	461a      	mov	r2, r3
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	b10b      	cbz	r3, 8007458 <_free_r+0x4c>
 8007454:	42a3      	cmp	r3, r4
 8007456:	d9fa      	bls.n	800744e <_free_r+0x42>
 8007458:	6811      	ldr	r1, [r2, #0]
 800745a:	1850      	adds	r0, r2, r1
 800745c:	42a0      	cmp	r0, r4
 800745e:	d10b      	bne.n	8007478 <_free_r+0x6c>
 8007460:	6820      	ldr	r0, [r4, #0]
 8007462:	4401      	add	r1, r0
 8007464:	1850      	adds	r0, r2, r1
 8007466:	4283      	cmp	r3, r0
 8007468:	6011      	str	r1, [r2, #0]
 800746a:	d1e0      	bne.n	800742e <_free_r+0x22>
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	6053      	str	r3, [r2, #4]
 8007472:	4408      	add	r0, r1
 8007474:	6010      	str	r0, [r2, #0]
 8007476:	e7da      	b.n	800742e <_free_r+0x22>
 8007478:	d902      	bls.n	8007480 <_free_r+0x74>
 800747a:	230c      	movs	r3, #12
 800747c:	602b      	str	r3, [r5, #0]
 800747e:	e7d6      	b.n	800742e <_free_r+0x22>
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	1821      	adds	r1, r4, r0
 8007484:	428b      	cmp	r3, r1
 8007486:	bf04      	itt	eq
 8007488:	6819      	ldreq	r1, [r3, #0]
 800748a:	685b      	ldreq	r3, [r3, #4]
 800748c:	6063      	str	r3, [r4, #4]
 800748e:	bf04      	itt	eq
 8007490:	1809      	addeq	r1, r1, r0
 8007492:	6021      	streq	r1, [r4, #0]
 8007494:	6054      	str	r4, [r2, #4]
 8007496:	e7ca      	b.n	800742e <_free_r+0x22>
 8007498:	bd38      	pop	{r3, r4, r5, pc}
 800749a:	bf00      	nop
 800749c:	24003384 	.word	0x24003384

080074a0 <sbrk_aligned>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4e0f      	ldr	r6, [pc, #60]	@ (80074e0 <sbrk_aligned+0x40>)
 80074a4:	460c      	mov	r4, r1
 80074a6:	6831      	ldr	r1, [r6, #0]
 80074a8:	4605      	mov	r5, r0
 80074aa:	b911      	cbnz	r1, 80074b2 <sbrk_aligned+0x12>
 80074ac:	f000 fca6 	bl	8007dfc <_sbrk_r>
 80074b0:	6030      	str	r0, [r6, #0]
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 fca1 	bl	8007dfc <_sbrk_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d103      	bne.n	80074c6 <sbrk_aligned+0x26>
 80074be:	f04f 34ff 	mov.w	r4, #4294967295
 80074c2:	4620      	mov	r0, r4
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
 80074c6:	1cc4      	adds	r4, r0, #3
 80074c8:	f024 0403 	bic.w	r4, r4, #3
 80074cc:	42a0      	cmp	r0, r4
 80074ce:	d0f8      	beq.n	80074c2 <sbrk_aligned+0x22>
 80074d0:	1a21      	subs	r1, r4, r0
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 fc92 	bl	8007dfc <_sbrk_r>
 80074d8:	3001      	adds	r0, #1
 80074da:	d1f2      	bne.n	80074c2 <sbrk_aligned+0x22>
 80074dc:	e7ef      	b.n	80074be <sbrk_aligned+0x1e>
 80074de:	bf00      	nop
 80074e0:	24003380 	.word	0x24003380

080074e4 <_malloc_r>:
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	1ccd      	adds	r5, r1, #3
 80074ea:	f025 0503 	bic.w	r5, r5, #3
 80074ee:	3508      	adds	r5, #8
 80074f0:	2d0c      	cmp	r5, #12
 80074f2:	bf38      	it	cc
 80074f4:	250c      	movcc	r5, #12
 80074f6:	2d00      	cmp	r5, #0
 80074f8:	4606      	mov	r6, r0
 80074fa:	db01      	blt.n	8007500 <_malloc_r+0x1c>
 80074fc:	42a9      	cmp	r1, r5
 80074fe:	d904      	bls.n	800750a <_malloc_r+0x26>
 8007500:	230c      	movs	r3, #12
 8007502:	6033      	str	r3, [r6, #0]
 8007504:	2000      	movs	r0, #0
 8007506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075e0 <_malloc_r+0xfc>
 800750e:	f000 f869 	bl	80075e4 <__malloc_lock>
 8007512:	f8d8 3000 	ldr.w	r3, [r8]
 8007516:	461c      	mov	r4, r3
 8007518:	bb44      	cbnz	r4, 800756c <_malloc_r+0x88>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff ffbf 	bl	80074a0 <sbrk_aligned>
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	4604      	mov	r4, r0
 8007526:	d158      	bne.n	80075da <_malloc_r+0xf6>
 8007528:	f8d8 4000 	ldr.w	r4, [r8]
 800752c:	4627      	mov	r7, r4
 800752e:	2f00      	cmp	r7, #0
 8007530:	d143      	bne.n	80075ba <_malloc_r+0xd6>
 8007532:	2c00      	cmp	r4, #0
 8007534:	d04b      	beq.n	80075ce <_malloc_r+0xea>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	4639      	mov	r1, r7
 800753a:	4630      	mov	r0, r6
 800753c:	eb04 0903 	add.w	r9, r4, r3
 8007540:	f000 fc5c 	bl	8007dfc <_sbrk_r>
 8007544:	4581      	cmp	r9, r0
 8007546:	d142      	bne.n	80075ce <_malloc_r+0xea>
 8007548:	6821      	ldr	r1, [r4, #0]
 800754a:	1a6d      	subs	r5, r5, r1
 800754c:	4629      	mov	r1, r5
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ffa6 	bl	80074a0 <sbrk_aligned>
 8007554:	3001      	adds	r0, #1
 8007556:	d03a      	beq.n	80075ce <_malloc_r+0xea>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	442b      	add	r3, r5
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	f8d8 3000 	ldr.w	r3, [r8]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	bb62      	cbnz	r2, 80075c0 <_malloc_r+0xdc>
 8007566:	f8c8 7000 	str.w	r7, [r8]
 800756a:	e00f      	b.n	800758c <_malloc_r+0xa8>
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	1b52      	subs	r2, r2, r5
 8007570:	d420      	bmi.n	80075b4 <_malloc_r+0xd0>
 8007572:	2a0b      	cmp	r2, #11
 8007574:	d917      	bls.n	80075a6 <_malloc_r+0xc2>
 8007576:	1961      	adds	r1, r4, r5
 8007578:	42a3      	cmp	r3, r4
 800757a:	6025      	str	r5, [r4, #0]
 800757c:	bf18      	it	ne
 800757e:	6059      	strne	r1, [r3, #4]
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	bf08      	it	eq
 8007584:	f8c8 1000 	streq.w	r1, [r8]
 8007588:	5162      	str	r2, [r4, r5]
 800758a:	604b      	str	r3, [r1, #4]
 800758c:	4630      	mov	r0, r6
 800758e:	f000 f82f 	bl	80075f0 <__malloc_unlock>
 8007592:	f104 000b 	add.w	r0, r4, #11
 8007596:	1d23      	adds	r3, r4, #4
 8007598:	f020 0007 	bic.w	r0, r0, #7
 800759c:	1ac2      	subs	r2, r0, r3
 800759e:	bf1c      	itt	ne
 80075a0:	1a1b      	subne	r3, r3, r0
 80075a2:	50a3      	strne	r3, [r4, r2]
 80075a4:	e7af      	b.n	8007506 <_malloc_r+0x22>
 80075a6:	6862      	ldr	r2, [r4, #4]
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	bf0c      	ite	eq
 80075ac:	f8c8 2000 	streq.w	r2, [r8]
 80075b0:	605a      	strne	r2, [r3, #4]
 80075b2:	e7eb      	b.n	800758c <_malloc_r+0xa8>
 80075b4:	4623      	mov	r3, r4
 80075b6:	6864      	ldr	r4, [r4, #4]
 80075b8:	e7ae      	b.n	8007518 <_malloc_r+0x34>
 80075ba:	463c      	mov	r4, r7
 80075bc:	687f      	ldr	r7, [r7, #4]
 80075be:	e7b6      	b.n	800752e <_malloc_r+0x4a>
 80075c0:	461a      	mov	r2, r3
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	d1fb      	bne.n	80075c0 <_malloc_r+0xdc>
 80075c8:	2300      	movs	r3, #0
 80075ca:	6053      	str	r3, [r2, #4]
 80075cc:	e7de      	b.n	800758c <_malloc_r+0xa8>
 80075ce:	230c      	movs	r3, #12
 80075d0:	6033      	str	r3, [r6, #0]
 80075d2:	4630      	mov	r0, r6
 80075d4:	f000 f80c 	bl	80075f0 <__malloc_unlock>
 80075d8:	e794      	b.n	8007504 <_malloc_r+0x20>
 80075da:	6005      	str	r5, [r0, #0]
 80075dc:	e7d6      	b.n	800758c <_malloc_r+0xa8>
 80075de:	bf00      	nop
 80075e0:	24003384 	.word	0x24003384

080075e4 <__malloc_lock>:
 80075e4:	4801      	ldr	r0, [pc, #4]	@ (80075ec <__malloc_lock+0x8>)
 80075e6:	f7ff bf0e 	b.w	8007406 <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	2400337c 	.word	0x2400337c

080075f0 <__malloc_unlock>:
 80075f0:	4801      	ldr	r0, [pc, #4]	@ (80075f8 <__malloc_unlock+0x8>)
 80075f2:	f7ff bf09 	b.w	8007408 <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	2400337c 	.word	0x2400337c

080075fc <__sfputc_r>:
 80075fc:	6893      	ldr	r3, [r2, #8]
 80075fe:	3b01      	subs	r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	b410      	push	{r4}
 8007604:	6093      	str	r3, [r2, #8]
 8007606:	da08      	bge.n	800761a <__sfputc_r+0x1e>
 8007608:	6994      	ldr	r4, [r2, #24]
 800760a:	42a3      	cmp	r3, r4
 800760c:	db01      	blt.n	8007612 <__sfputc_r+0x16>
 800760e:	290a      	cmp	r1, #10
 8007610:	d103      	bne.n	800761a <__sfputc_r+0x1e>
 8007612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007616:	f7ff bde8 	b.w	80071ea <__swbuf_r>
 800761a:	6813      	ldr	r3, [r2, #0]
 800761c:	1c58      	adds	r0, r3, #1
 800761e:	6010      	str	r0, [r2, #0]
 8007620:	7019      	strb	r1, [r3, #0]
 8007622:	4608      	mov	r0, r1
 8007624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007628:	4770      	bx	lr

0800762a <__sfputs_r>:
 800762a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762c:	4606      	mov	r6, r0
 800762e:	460f      	mov	r7, r1
 8007630:	4614      	mov	r4, r2
 8007632:	18d5      	adds	r5, r2, r3
 8007634:	42ac      	cmp	r4, r5
 8007636:	d101      	bne.n	800763c <__sfputs_r+0x12>
 8007638:	2000      	movs	r0, #0
 800763a:	e007      	b.n	800764c <__sfputs_r+0x22>
 800763c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007640:	463a      	mov	r2, r7
 8007642:	4630      	mov	r0, r6
 8007644:	f7ff ffda 	bl	80075fc <__sfputc_r>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d1f3      	bne.n	8007634 <__sfputs_r+0xa>
 800764c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007650 <_vfiprintf_r>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	460d      	mov	r5, r1
 8007656:	b09d      	sub	sp, #116	@ 0x74
 8007658:	4614      	mov	r4, r2
 800765a:	4698      	mov	r8, r3
 800765c:	4606      	mov	r6, r0
 800765e:	b118      	cbz	r0, 8007668 <_vfiprintf_r+0x18>
 8007660:	6a03      	ldr	r3, [r0, #32]
 8007662:	b90b      	cbnz	r3, 8007668 <_vfiprintf_r+0x18>
 8007664:	f7ff fcd8 	bl	8007018 <__sinit>
 8007668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800766a:	07d9      	lsls	r1, r3, #31
 800766c:	d405      	bmi.n	800767a <_vfiprintf_r+0x2a>
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	059a      	lsls	r2, r3, #22
 8007672:	d402      	bmi.n	800767a <_vfiprintf_r+0x2a>
 8007674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007676:	f7ff fec6 	bl	8007406 <__retarget_lock_acquire_recursive>
 800767a:	89ab      	ldrh	r3, [r5, #12]
 800767c:	071b      	lsls	r3, r3, #28
 800767e:	d501      	bpl.n	8007684 <_vfiprintf_r+0x34>
 8007680:	692b      	ldr	r3, [r5, #16]
 8007682:	b99b      	cbnz	r3, 80076ac <_vfiprintf_r+0x5c>
 8007684:	4629      	mov	r1, r5
 8007686:	4630      	mov	r0, r6
 8007688:	f7ff fdee 	bl	8007268 <__swsetup_r>
 800768c:	b170      	cbz	r0, 80076ac <_vfiprintf_r+0x5c>
 800768e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007690:	07dc      	lsls	r4, r3, #31
 8007692:	d504      	bpl.n	800769e <_vfiprintf_r+0x4e>
 8007694:	f04f 30ff 	mov.w	r0, #4294967295
 8007698:	b01d      	add	sp, #116	@ 0x74
 800769a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769e:	89ab      	ldrh	r3, [r5, #12]
 80076a0:	0598      	lsls	r0, r3, #22
 80076a2:	d4f7      	bmi.n	8007694 <_vfiprintf_r+0x44>
 80076a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076a6:	f7ff feaf 	bl	8007408 <__retarget_lock_release_recursive>
 80076aa:	e7f3      	b.n	8007694 <_vfiprintf_r+0x44>
 80076ac:	2300      	movs	r3, #0
 80076ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80076b0:	2320      	movs	r3, #32
 80076b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ba:	2330      	movs	r3, #48	@ 0x30
 80076bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800786c <_vfiprintf_r+0x21c>
 80076c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076c4:	f04f 0901 	mov.w	r9, #1
 80076c8:	4623      	mov	r3, r4
 80076ca:	469a      	mov	sl, r3
 80076cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d0:	b10a      	cbz	r2, 80076d6 <_vfiprintf_r+0x86>
 80076d2:	2a25      	cmp	r2, #37	@ 0x25
 80076d4:	d1f9      	bne.n	80076ca <_vfiprintf_r+0x7a>
 80076d6:	ebba 0b04 	subs.w	fp, sl, r4
 80076da:	d00b      	beq.n	80076f4 <_vfiprintf_r+0xa4>
 80076dc:	465b      	mov	r3, fp
 80076de:	4622      	mov	r2, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7ff ffa1 	bl	800762a <__sfputs_r>
 80076e8:	3001      	adds	r0, #1
 80076ea:	f000 80a7 	beq.w	800783c <_vfiprintf_r+0x1ec>
 80076ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076f0:	445a      	add	r2, fp
 80076f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076f4:	f89a 3000 	ldrb.w	r3, [sl]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 809f 	beq.w	800783c <_vfiprintf_r+0x1ec>
 80076fe:	2300      	movs	r3, #0
 8007700:	f04f 32ff 	mov.w	r2, #4294967295
 8007704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007708:	f10a 0a01 	add.w	sl, sl, #1
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007714:	931a      	str	r3, [sp, #104]	@ 0x68
 8007716:	4654      	mov	r4, sl
 8007718:	2205      	movs	r2, #5
 800771a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771e:	4853      	ldr	r0, [pc, #332]	@ (800786c <_vfiprintf_r+0x21c>)
 8007720:	f7f8 fdde 	bl	80002e0 <memchr>
 8007724:	9a04      	ldr	r2, [sp, #16]
 8007726:	b9d8      	cbnz	r0, 8007760 <_vfiprintf_r+0x110>
 8007728:	06d1      	lsls	r1, r2, #27
 800772a:	bf44      	itt	mi
 800772c:	2320      	movmi	r3, #32
 800772e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007732:	0713      	lsls	r3, r2, #28
 8007734:	bf44      	itt	mi
 8007736:	232b      	movmi	r3, #43	@ 0x2b
 8007738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800773c:	f89a 3000 	ldrb.w	r3, [sl]
 8007740:	2b2a      	cmp	r3, #42	@ 0x2a
 8007742:	d015      	beq.n	8007770 <_vfiprintf_r+0x120>
 8007744:	9a07      	ldr	r2, [sp, #28]
 8007746:	4654      	mov	r4, sl
 8007748:	2000      	movs	r0, #0
 800774a:	f04f 0c0a 	mov.w	ip, #10
 800774e:	4621      	mov	r1, r4
 8007750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007754:	3b30      	subs	r3, #48	@ 0x30
 8007756:	2b09      	cmp	r3, #9
 8007758:	d94b      	bls.n	80077f2 <_vfiprintf_r+0x1a2>
 800775a:	b1b0      	cbz	r0, 800778a <_vfiprintf_r+0x13a>
 800775c:	9207      	str	r2, [sp, #28]
 800775e:	e014      	b.n	800778a <_vfiprintf_r+0x13a>
 8007760:	eba0 0308 	sub.w	r3, r0, r8
 8007764:	fa09 f303 	lsl.w	r3, r9, r3
 8007768:	4313      	orrs	r3, r2
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	46a2      	mov	sl, r4
 800776e:	e7d2      	b.n	8007716 <_vfiprintf_r+0xc6>
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	1d19      	adds	r1, r3, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	9103      	str	r1, [sp, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	bfbb      	ittet	lt
 800777c:	425b      	neglt	r3, r3
 800777e:	f042 0202 	orrlt.w	r2, r2, #2
 8007782:	9307      	strge	r3, [sp, #28]
 8007784:	9307      	strlt	r3, [sp, #28]
 8007786:	bfb8      	it	lt
 8007788:	9204      	strlt	r2, [sp, #16]
 800778a:	7823      	ldrb	r3, [r4, #0]
 800778c:	2b2e      	cmp	r3, #46	@ 0x2e
 800778e:	d10a      	bne.n	80077a6 <_vfiprintf_r+0x156>
 8007790:	7863      	ldrb	r3, [r4, #1]
 8007792:	2b2a      	cmp	r3, #42	@ 0x2a
 8007794:	d132      	bne.n	80077fc <_vfiprintf_r+0x1ac>
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	1d1a      	adds	r2, r3, #4
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	9203      	str	r2, [sp, #12]
 800779e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077a2:	3402      	adds	r4, #2
 80077a4:	9305      	str	r3, [sp, #20]
 80077a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800787c <_vfiprintf_r+0x22c>
 80077aa:	7821      	ldrb	r1, [r4, #0]
 80077ac:	2203      	movs	r2, #3
 80077ae:	4650      	mov	r0, sl
 80077b0:	f7f8 fd96 	bl	80002e0 <memchr>
 80077b4:	b138      	cbz	r0, 80077c6 <_vfiprintf_r+0x176>
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	eba0 000a 	sub.w	r0, r0, sl
 80077bc:	2240      	movs	r2, #64	@ 0x40
 80077be:	4082      	lsls	r2, r0
 80077c0:	4313      	orrs	r3, r2
 80077c2:	3401      	adds	r4, #1
 80077c4:	9304      	str	r3, [sp, #16]
 80077c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ca:	4829      	ldr	r0, [pc, #164]	@ (8007870 <_vfiprintf_r+0x220>)
 80077cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077d0:	2206      	movs	r2, #6
 80077d2:	f7f8 fd85 	bl	80002e0 <memchr>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d03f      	beq.n	800785a <_vfiprintf_r+0x20a>
 80077da:	4b26      	ldr	r3, [pc, #152]	@ (8007874 <_vfiprintf_r+0x224>)
 80077dc:	bb1b      	cbnz	r3, 8007826 <_vfiprintf_r+0x1d6>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	3307      	adds	r3, #7
 80077e2:	f023 0307 	bic.w	r3, r3, #7
 80077e6:	3308      	adds	r3, #8
 80077e8:	9303      	str	r3, [sp, #12]
 80077ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ec:	443b      	add	r3, r7
 80077ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80077f0:	e76a      	b.n	80076c8 <_vfiprintf_r+0x78>
 80077f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077f6:	460c      	mov	r4, r1
 80077f8:	2001      	movs	r0, #1
 80077fa:	e7a8      	b.n	800774e <_vfiprintf_r+0xfe>
 80077fc:	2300      	movs	r3, #0
 80077fe:	3401      	adds	r4, #1
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	4619      	mov	r1, r3
 8007804:	f04f 0c0a 	mov.w	ip, #10
 8007808:	4620      	mov	r0, r4
 800780a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800780e:	3a30      	subs	r2, #48	@ 0x30
 8007810:	2a09      	cmp	r2, #9
 8007812:	d903      	bls.n	800781c <_vfiprintf_r+0x1cc>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0c6      	beq.n	80077a6 <_vfiprintf_r+0x156>
 8007818:	9105      	str	r1, [sp, #20]
 800781a:	e7c4      	b.n	80077a6 <_vfiprintf_r+0x156>
 800781c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007820:	4604      	mov	r4, r0
 8007822:	2301      	movs	r3, #1
 8007824:	e7f0      	b.n	8007808 <_vfiprintf_r+0x1b8>
 8007826:	ab03      	add	r3, sp, #12
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	462a      	mov	r2, r5
 800782c:	4b12      	ldr	r3, [pc, #72]	@ (8007878 <_vfiprintf_r+0x228>)
 800782e:	a904      	add	r1, sp, #16
 8007830:	4630      	mov	r0, r6
 8007832:	f3af 8000 	nop.w
 8007836:	4607      	mov	r7, r0
 8007838:	1c78      	adds	r0, r7, #1
 800783a:	d1d6      	bne.n	80077ea <_vfiprintf_r+0x19a>
 800783c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800783e:	07d9      	lsls	r1, r3, #31
 8007840:	d405      	bmi.n	800784e <_vfiprintf_r+0x1fe>
 8007842:	89ab      	ldrh	r3, [r5, #12]
 8007844:	059a      	lsls	r2, r3, #22
 8007846:	d402      	bmi.n	800784e <_vfiprintf_r+0x1fe>
 8007848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800784a:	f7ff fddd 	bl	8007408 <__retarget_lock_release_recursive>
 800784e:	89ab      	ldrh	r3, [r5, #12]
 8007850:	065b      	lsls	r3, r3, #25
 8007852:	f53f af1f 	bmi.w	8007694 <_vfiprintf_r+0x44>
 8007856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007858:	e71e      	b.n	8007698 <_vfiprintf_r+0x48>
 800785a:	ab03      	add	r3, sp, #12
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	462a      	mov	r2, r5
 8007860:	4b05      	ldr	r3, [pc, #20]	@ (8007878 <_vfiprintf_r+0x228>)
 8007862:	a904      	add	r1, sp, #16
 8007864:	4630      	mov	r0, r6
 8007866:	f000 f879 	bl	800795c <_printf_i>
 800786a:	e7e4      	b.n	8007836 <_vfiprintf_r+0x1e6>
 800786c:	08007f94 	.word	0x08007f94
 8007870:	08007f9e 	.word	0x08007f9e
 8007874:	00000000 	.word	0x00000000
 8007878:	0800762b 	.word	0x0800762b
 800787c:	08007f9a 	.word	0x08007f9a

08007880 <_printf_common>:
 8007880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007884:	4616      	mov	r6, r2
 8007886:	4698      	mov	r8, r3
 8007888:	688a      	ldr	r2, [r1, #8]
 800788a:	690b      	ldr	r3, [r1, #16]
 800788c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007890:	4293      	cmp	r3, r2
 8007892:	bfb8      	it	lt
 8007894:	4613      	movlt	r3, r2
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800789c:	4607      	mov	r7, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	b10a      	cbz	r2, 80078a6 <_printf_common+0x26>
 80078a2:	3301      	adds	r3, #1
 80078a4:	6033      	str	r3, [r6, #0]
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	0699      	lsls	r1, r3, #26
 80078aa:	bf42      	ittt	mi
 80078ac:	6833      	ldrmi	r3, [r6, #0]
 80078ae:	3302      	addmi	r3, #2
 80078b0:	6033      	strmi	r3, [r6, #0]
 80078b2:	6825      	ldr	r5, [r4, #0]
 80078b4:	f015 0506 	ands.w	r5, r5, #6
 80078b8:	d106      	bne.n	80078c8 <_printf_common+0x48>
 80078ba:	f104 0a19 	add.w	sl, r4, #25
 80078be:	68e3      	ldr	r3, [r4, #12]
 80078c0:	6832      	ldr	r2, [r6, #0]
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	42ab      	cmp	r3, r5
 80078c6:	dc26      	bgt.n	8007916 <_printf_common+0x96>
 80078c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	3b00      	subs	r3, #0
 80078d0:	bf18      	it	ne
 80078d2:	2301      	movne	r3, #1
 80078d4:	0692      	lsls	r2, r2, #26
 80078d6:	d42b      	bmi.n	8007930 <_printf_common+0xb0>
 80078d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078dc:	4641      	mov	r1, r8
 80078de:	4638      	mov	r0, r7
 80078e0:	47c8      	blx	r9
 80078e2:	3001      	adds	r0, #1
 80078e4:	d01e      	beq.n	8007924 <_printf_common+0xa4>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	6922      	ldr	r2, [r4, #16]
 80078ea:	f003 0306 	and.w	r3, r3, #6
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	bf02      	ittt	eq
 80078f2:	68e5      	ldreq	r5, [r4, #12]
 80078f4:	6833      	ldreq	r3, [r6, #0]
 80078f6:	1aed      	subeq	r5, r5, r3
 80078f8:	68a3      	ldr	r3, [r4, #8]
 80078fa:	bf0c      	ite	eq
 80078fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007900:	2500      	movne	r5, #0
 8007902:	4293      	cmp	r3, r2
 8007904:	bfc4      	itt	gt
 8007906:	1a9b      	subgt	r3, r3, r2
 8007908:	18ed      	addgt	r5, r5, r3
 800790a:	2600      	movs	r6, #0
 800790c:	341a      	adds	r4, #26
 800790e:	42b5      	cmp	r5, r6
 8007910:	d11a      	bne.n	8007948 <_printf_common+0xc8>
 8007912:	2000      	movs	r0, #0
 8007914:	e008      	b.n	8007928 <_printf_common+0xa8>
 8007916:	2301      	movs	r3, #1
 8007918:	4652      	mov	r2, sl
 800791a:	4641      	mov	r1, r8
 800791c:	4638      	mov	r0, r7
 800791e:	47c8      	blx	r9
 8007920:	3001      	adds	r0, #1
 8007922:	d103      	bne.n	800792c <_printf_common+0xac>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792c:	3501      	adds	r5, #1
 800792e:	e7c6      	b.n	80078be <_printf_common+0x3e>
 8007930:	18e1      	adds	r1, r4, r3
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	2030      	movs	r0, #48	@ 0x30
 8007936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800793a:	4422      	add	r2, r4
 800793c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007944:	3302      	adds	r3, #2
 8007946:	e7c7      	b.n	80078d8 <_printf_common+0x58>
 8007948:	2301      	movs	r3, #1
 800794a:	4622      	mov	r2, r4
 800794c:	4641      	mov	r1, r8
 800794e:	4638      	mov	r0, r7
 8007950:	47c8      	blx	r9
 8007952:	3001      	adds	r0, #1
 8007954:	d0e6      	beq.n	8007924 <_printf_common+0xa4>
 8007956:	3601      	adds	r6, #1
 8007958:	e7d9      	b.n	800790e <_printf_common+0x8e>
	...

0800795c <_printf_i>:
 800795c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	7e0f      	ldrb	r7, [r1, #24]
 8007962:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007964:	2f78      	cmp	r7, #120	@ 0x78
 8007966:	4691      	mov	r9, r2
 8007968:	4680      	mov	r8, r0
 800796a:	460c      	mov	r4, r1
 800796c:	469a      	mov	sl, r3
 800796e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007972:	d807      	bhi.n	8007984 <_printf_i+0x28>
 8007974:	2f62      	cmp	r7, #98	@ 0x62
 8007976:	d80a      	bhi.n	800798e <_printf_i+0x32>
 8007978:	2f00      	cmp	r7, #0
 800797a:	f000 80d2 	beq.w	8007b22 <_printf_i+0x1c6>
 800797e:	2f58      	cmp	r7, #88	@ 0x58
 8007980:	f000 80b9 	beq.w	8007af6 <_printf_i+0x19a>
 8007984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800798c:	e03a      	b.n	8007a04 <_printf_i+0xa8>
 800798e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007992:	2b15      	cmp	r3, #21
 8007994:	d8f6      	bhi.n	8007984 <_printf_i+0x28>
 8007996:	a101      	add	r1, pc, #4	@ (adr r1, 800799c <_printf_i+0x40>)
 8007998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800799c:	080079f5 	.word	0x080079f5
 80079a0:	08007a09 	.word	0x08007a09
 80079a4:	08007985 	.word	0x08007985
 80079a8:	08007985 	.word	0x08007985
 80079ac:	08007985 	.word	0x08007985
 80079b0:	08007985 	.word	0x08007985
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007985 	.word	0x08007985
 80079bc:	08007985 	.word	0x08007985
 80079c0:	08007985 	.word	0x08007985
 80079c4:	08007985 	.word	0x08007985
 80079c8:	08007b09 	.word	0x08007b09
 80079cc:	08007a33 	.word	0x08007a33
 80079d0:	08007ac3 	.word	0x08007ac3
 80079d4:	08007985 	.word	0x08007985
 80079d8:	08007985 	.word	0x08007985
 80079dc:	08007b2b 	.word	0x08007b2b
 80079e0:	08007985 	.word	0x08007985
 80079e4:	08007a33 	.word	0x08007a33
 80079e8:	08007985 	.word	0x08007985
 80079ec:	08007985 	.word	0x08007985
 80079f0:	08007acb 	.word	0x08007acb
 80079f4:	6833      	ldr	r3, [r6, #0]
 80079f6:	1d1a      	adds	r2, r3, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6032      	str	r2, [r6, #0]
 80079fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a04:	2301      	movs	r3, #1
 8007a06:	e09d      	b.n	8007b44 <_printf_i+0x1e8>
 8007a08:	6833      	ldr	r3, [r6, #0]
 8007a0a:	6820      	ldr	r0, [r4, #0]
 8007a0c:	1d19      	adds	r1, r3, #4
 8007a0e:	6031      	str	r1, [r6, #0]
 8007a10:	0606      	lsls	r6, r0, #24
 8007a12:	d501      	bpl.n	8007a18 <_printf_i+0xbc>
 8007a14:	681d      	ldr	r5, [r3, #0]
 8007a16:	e003      	b.n	8007a20 <_printf_i+0xc4>
 8007a18:	0645      	lsls	r5, r0, #25
 8007a1a:	d5fb      	bpl.n	8007a14 <_printf_i+0xb8>
 8007a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	da03      	bge.n	8007a2c <_printf_i+0xd0>
 8007a24:	232d      	movs	r3, #45	@ 0x2d
 8007a26:	426d      	negs	r5, r5
 8007a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a2c:	4859      	ldr	r0, [pc, #356]	@ (8007b94 <_printf_i+0x238>)
 8007a2e:	230a      	movs	r3, #10
 8007a30:	e011      	b.n	8007a56 <_printf_i+0xfa>
 8007a32:	6821      	ldr	r1, [r4, #0]
 8007a34:	6833      	ldr	r3, [r6, #0]
 8007a36:	0608      	lsls	r0, r1, #24
 8007a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a3c:	d402      	bmi.n	8007a44 <_printf_i+0xe8>
 8007a3e:	0649      	lsls	r1, r1, #25
 8007a40:	bf48      	it	mi
 8007a42:	b2ad      	uxthmi	r5, r5
 8007a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a46:	4853      	ldr	r0, [pc, #332]	@ (8007b94 <_printf_i+0x238>)
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	bf14      	ite	ne
 8007a4c:	230a      	movne	r3, #10
 8007a4e:	2308      	moveq	r3, #8
 8007a50:	2100      	movs	r1, #0
 8007a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a56:	6866      	ldr	r6, [r4, #4]
 8007a58:	60a6      	str	r6, [r4, #8]
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	bfa2      	ittt	ge
 8007a5e:	6821      	ldrge	r1, [r4, #0]
 8007a60:	f021 0104 	bicge.w	r1, r1, #4
 8007a64:	6021      	strge	r1, [r4, #0]
 8007a66:	b90d      	cbnz	r5, 8007a6c <_printf_i+0x110>
 8007a68:	2e00      	cmp	r6, #0
 8007a6a:	d04b      	beq.n	8007b04 <_printf_i+0x1a8>
 8007a6c:	4616      	mov	r6, r2
 8007a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a72:	fb03 5711 	mls	r7, r3, r1, r5
 8007a76:	5dc7      	ldrb	r7, [r0, r7]
 8007a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a7c:	462f      	mov	r7, r5
 8007a7e:	42bb      	cmp	r3, r7
 8007a80:	460d      	mov	r5, r1
 8007a82:	d9f4      	bls.n	8007a6e <_printf_i+0x112>
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d10b      	bne.n	8007aa0 <_printf_i+0x144>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	07df      	lsls	r7, r3, #31
 8007a8c:	d508      	bpl.n	8007aa0 <_printf_i+0x144>
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	6861      	ldr	r1, [r4, #4]
 8007a92:	4299      	cmp	r1, r3
 8007a94:	bfde      	ittt	le
 8007a96:	2330      	movle	r3, #48	@ 0x30
 8007a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007aa0:	1b92      	subs	r2, r2, r6
 8007aa2:	6122      	str	r2, [r4, #16]
 8007aa4:	f8cd a000 	str.w	sl, [sp]
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	aa03      	add	r2, sp, #12
 8007aac:	4621      	mov	r1, r4
 8007aae:	4640      	mov	r0, r8
 8007ab0:	f7ff fee6 	bl	8007880 <_printf_common>
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d14a      	bne.n	8007b4e <_printf_i+0x1f2>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	b004      	add	sp, #16
 8007abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	f043 0320 	orr.w	r3, r3, #32
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	4833      	ldr	r0, [pc, #204]	@ (8007b98 <_printf_i+0x23c>)
 8007acc:	2778      	movs	r7, #120	@ 0x78
 8007ace:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	6831      	ldr	r1, [r6, #0]
 8007ad6:	061f      	lsls	r7, r3, #24
 8007ad8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007adc:	d402      	bmi.n	8007ae4 <_printf_i+0x188>
 8007ade:	065f      	lsls	r7, r3, #25
 8007ae0:	bf48      	it	mi
 8007ae2:	b2ad      	uxthmi	r5, r5
 8007ae4:	6031      	str	r1, [r6, #0]
 8007ae6:	07d9      	lsls	r1, r3, #31
 8007ae8:	bf44      	itt	mi
 8007aea:	f043 0320 	orrmi.w	r3, r3, #32
 8007aee:	6023      	strmi	r3, [r4, #0]
 8007af0:	b11d      	cbz	r5, 8007afa <_printf_i+0x19e>
 8007af2:	2310      	movs	r3, #16
 8007af4:	e7ac      	b.n	8007a50 <_printf_i+0xf4>
 8007af6:	4827      	ldr	r0, [pc, #156]	@ (8007b94 <_printf_i+0x238>)
 8007af8:	e7e9      	b.n	8007ace <_printf_i+0x172>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	f023 0320 	bic.w	r3, r3, #32
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	e7f6      	b.n	8007af2 <_printf_i+0x196>
 8007b04:	4616      	mov	r6, r2
 8007b06:	e7bd      	b.n	8007a84 <_printf_i+0x128>
 8007b08:	6833      	ldr	r3, [r6, #0]
 8007b0a:	6825      	ldr	r5, [r4, #0]
 8007b0c:	6961      	ldr	r1, [r4, #20]
 8007b0e:	1d18      	adds	r0, r3, #4
 8007b10:	6030      	str	r0, [r6, #0]
 8007b12:	062e      	lsls	r6, r5, #24
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	d501      	bpl.n	8007b1c <_printf_i+0x1c0>
 8007b18:	6019      	str	r1, [r3, #0]
 8007b1a:	e002      	b.n	8007b22 <_printf_i+0x1c6>
 8007b1c:	0668      	lsls	r0, r5, #25
 8007b1e:	d5fb      	bpl.n	8007b18 <_printf_i+0x1bc>
 8007b20:	8019      	strh	r1, [r3, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	4616      	mov	r6, r2
 8007b28:	e7bc      	b.n	8007aa4 <_printf_i+0x148>
 8007b2a:	6833      	ldr	r3, [r6, #0]
 8007b2c:	1d1a      	adds	r2, r3, #4
 8007b2e:	6032      	str	r2, [r6, #0]
 8007b30:	681e      	ldr	r6, [r3, #0]
 8007b32:	6862      	ldr	r2, [r4, #4]
 8007b34:	2100      	movs	r1, #0
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7f8 fbd2 	bl	80002e0 <memchr>
 8007b3c:	b108      	cbz	r0, 8007b42 <_printf_i+0x1e6>
 8007b3e:	1b80      	subs	r0, r0, r6
 8007b40:	6060      	str	r0, [r4, #4]
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	2300      	movs	r3, #0
 8007b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b4c:	e7aa      	b.n	8007aa4 <_printf_i+0x148>
 8007b4e:	6923      	ldr	r3, [r4, #16]
 8007b50:	4632      	mov	r2, r6
 8007b52:	4649      	mov	r1, r9
 8007b54:	4640      	mov	r0, r8
 8007b56:	47d0      	blx	sl
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d0ad      	beq.n	8007ab8 <_printf_i+0x15c>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	079b      	lsls	r3, r3, #30
 8007b60:	d413      	bmi.n	8007b8a <_printf_i+0x22e>
 8007b62:	68e0      	ldr	r0, [r4, #12]
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	4298      	cmp	r0, r3
 8007b68:	bfb8      	it	lt
 8007b6a:	4618      	movlt	r0, r3
 8007b6c:	e7a6      	b.n	8007abc <_printf_i+0x160>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4632      	mov	r2, r6
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	47d0      	blx	sl
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d09d      	beq.n	8007ab8 <_printf_i+0x15c>
 8007b7c:	3501      	adds	r5, #1
 8007b7e:	68e3      	ldr	r3, [r4, #12]
 8007b80:	9903      	ldr	r1, [sp, #12]
 8007b82:	1a5b      	subs	r3, r3, r1
 8007b84:	42ab      	cmp	r3, r5
 8007b86:	dcf2      	bgt.n	8007b6e <_printf_i+0x212>
 8007b88:	e7eb      	b.n	8007b62 <_printf_i+0x206>
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	f104 0619 	add.w	r6, r4, #25
 8007b90:	e7f5      	b.n	8007b7e <_printf_i+0x222>
 8007b92:	bf00      	nop
 8007b94:	08007fa5 	.word	0x08007fa5
 8007b98:	08007fb6 	.word	0x08007fb6

08007b9c <__sflush_r>:
 8007b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba4:	0716      	lsls	r6, r2, #28
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	d454      	bmi.n	8007c56 <__sflush_r+0xba>
 8007bac:	684b      	ldr	r3, [r1, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dc02      	bgt.n	8007bb8 <__sflush_r+0x1c>
 8007bb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	dd48      	ble.n	8007c4a <__sflush_r+0xae>
 8007bb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	d045      	beq.n	8007c4a <__sflush_r+0xae>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bc4:	682f      	ldr	r7, [r5, #0]
 8007bc6:	6a21      	ldr	r1, [r4, #32]
 8007bc8:	602b      	str	r3, [r5, #0]
 8007bca:	d030      	beq.n	8007c2e <__sflush_r+0x92>
 8007bcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	0759      	lsls	r1, r3, #29
 8007bd2:	d505      	bpl.n	8007be0 <__sflush_r+0x44>
 8007bd4:	6863      	ldr	r3, [r4, #4]
 8007bd6:	1ad2      	subs	r2, r2, r3
 8007bd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bda:	b10b      	cbz	r3, 8007be0 <__sflush_r+0x44>
 8007bdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	2300      	movs	r3, #0
 8007be2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007be4:	6a21      	ldr	r1, [r4, #32]
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b0      	blx	r6
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	d106      	bne.n	8007bfe <__sflush_r+0x62>
 8007bf0:	6829      	ldr	r1, [r5, #0]
 8007bf2:	291d      	cmp	r1, #29
 8007bf4:	d82b      	bhi.n	8007c4e <__sflush_r+0xb2>
 8007bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8007ca0 <__sflush_r+0x104>)
 8007bf8:	410a      	asrs	r2, r1
 8007bfa:	07d6      	lsls	r6, r2, #31
 8007bfc:	d427      	bmi.n	8007c4e <__sflush_r+0xb2>
 8007bfe:	2200      	movs	r2, #0
 8007c00:	6062      	str	r2, [r4, #4]
 8007c02:	04d9      	lsls	r1, r3, #19
 8007c04:	6922      	ldr	r2, [r4, #16]
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	d504      	bpl.n	8007c14 <__sflush_r+0x78>
 8007c0a:	1c42      	adds	r2, r0, #1
 8007c0c:	d101      	bne.n	8007c12 <__sflush_r+0x76>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	b903      	cbnz	r3, 8007c14 <__sflush_r+0x78>
 8007c12:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c16:	602f      	str	r7, [r5, #0]
 8007c18:	b1b9      	cbz	r1, 8007c4a <__sflush_r+0xae>
 8007c1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c1e:	4299      	cmp	r1, r3
 8007c20:	d002      	beq.n	8007c28 <__sflush_r+0x8c>
 8007c22:	4628      	mov	r0, r5
 8007c24:	f7ff fbf2 	bl	800740c <_free_r>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c2c:	e00d      	b.n	8007c4a <__sflush_r+0xae>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b0      	blx	r6
 8007c34:	4602      	mov	r2, r0
 8007c36:	1c50      	adds	r0, r2, #1
 8007c38:	d1c9      	bne.n	8007bce <__sflush_r+0x32>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0c6      	beq.n	8007bce <__sflush_r+0x32>
 8007c40:	2b1d      	cmp	r3, #29
 8007c42:	d001      	beq.n	8007c48 <__sflush_r+0xac>
 8007c44:	2b16      	cmp	r3, #22
 8007c46:	d11e      	bne.n	8007c86 <__sflush_r+0xea>
 8007c48:	602f      	str	r7, [r5, #0]
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	e022      	b.n	8007c94 <__sflush_r+0xf8>
 8007c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c52:	b21b      	sxth	r3, r3
 8007c54:	e01b      	b.n	8007c8e <__sflush_r+0xf2>
 8007c56:	690f      	ldr	r7, [r1, #16]
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	d0f6      	beq.n	8007c4a <__sflush_r+0xae>
 8007c5c:	0793      	lsls	r3, r2, #30
 8007c5e:	680e      	ldr	r6, [r1, #0]
 8007c60:	bf08      	it	eq
 8007c62:	694b      	ldreq	r3, [r1, #20]
 8007c64:	600f      	str	r7, [r1, #0]
 8007c66:	bf18      	it	ne
 8007c68:	2300      	movne	r3, #0
 8007c6a:	eba6 0807 	sub.w	r8, r6, r7
 8007c6e:	608b      	str	r3, [r1, #8]
 8007c70:	f1b8 0f00 	cmp.w	r8, #0
 8007c74:	dde9      	ble.n	8007c4a <__sflush_r+0xae>
 8007c76:	6a21      	ldr	r1, [r4, #32]
 8007c78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c7a:	4643      	mov	r3, r8
 8007c7c:	463a      	mov	r2, r7
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b0      	blx	r6
 8007c82:	2800      	cmp	r0, #0
 8007c84:	dc08      	bgt.n	8007c98 <__sflush_r+0xfc>
 8007c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c98:	4407      	add	r7, r0
 8007c9a:	eba8 0800 	sub.w	r8, r8, r0
 8007c9e:	e7e7      	b.n	8007c70 <__sflush_r+0xd4>
 8007ca0:	dfbffffe 	.word	0xdfbffffe

08007ca4 <_fflush_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	690b      	ldr	r3, [r1, #16]
 8007ca8:	4605      	mov	r5, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	b913      	cbnz	r3, 8007cb4 <_fflush_r+0x10>
 8007cae:	2500      	movs	r5, #0
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	b118      	cbz	r0, 8007cbe <_fflush_r+0x1a>
 8007cb6:	6a03      	ldr	r3, [r0, #32]
 8007cb8:	b90b      	cbnz	r3, 8007cbe <_fflush_r+0x1a>
 8007cba:	f7ff f9ad 	bl	8007018 <__sinit>
 8007cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f3      	beq.n	8007cae <_fflush_r+0xa>
 8007cc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cc8:	07d0      	lsls	r0, r2, #31
 8007cca:	d404      	bmi.n	8007cd6 <_fflush_r+0x32>
 8007ccc:	0599      	lsls	r1, r3, #22
 8007cce:	d402      	bmi.n	8007cd6 <_fflush_r+0x32>
 8007cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cd2:	f7ff fb98 	bl	8007406 <__retarget_lock_acquire_recursive>
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f7ff ff5f 	bl	8007b9c <__sflush_r>
 8007cde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ce0:	07da      	lsls	r2, r3, #31
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	d4e4      	bmi.n	8007cb0 <_fflush_r+0xc>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	059b      	lsls	r3, r3, #22
 8007cea:	d4e1      	bmi.n	8007cb0 <_fflush_r+0xc>
 8007cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cee:	f7ff fb8b 	bl	8007408 <__retarget_lock_release_recursive>
 8007cf2:	e7dd      	b.n	8007cb0 <_fflush_r+0xc>

08007cf4 <__swhatbuf_r>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	b096      	sub	sp, #88	@ 0x58
 8007d00:	4615      	mov	r5, r2
 8007d02:	461e      	mov	r6, r3
 8007d04:	da0d      	bge.n	8007d22 <__swhatbuf_r+0x2e>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d0c:	f04f 0100 	mov.w	r1, #0
 8007d10:	bf14      	ite	ne
 8007d12:	2340      	movne	r3, #64	@ 0x40
 8007d14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d18:	2000      	movs	r0, #0
 8007d1a:	6031      	str	r1, [r6, #0]
 8007d1c:	602b      	str	r3, [r5, #0]
 8007d1e:	b016      	add	sp, #88	@ 0x58
 8007d20:	bd70      	pop	{r4, r5, r6, pc}
 8007d22:	466a      	mov	r2, sp
 8007d24:	f000 f848 	bl	8007db8 <_fstat_r>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	dbec      	blt.n	8007d06 <__swhatbuf_r+0x12>
 8007d2c:	9901      	ldr	r1, [sp, #4]
 8007d2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d36:	4259      	negs	r1, r3
 8007d38:	4159      	adcs	r1, r3
 8007d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d3e:	e7eb      	b.n	8007d18 <__swhatbuf_r+0x24>

08007d40 <__smakebuf_r>:
 8007d40:	898b      	ldrh	r3, [r1, #12]
 8007d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d44:	079d      	lsls	r5, r3, #30
 8007d46:	4606      	mov	r6, r0
 8007d48:	460c      	mov	r4, r1
 8007d4a:	d507      	bpl.n	8007d5c <__smakebuf_r+0x1c>
 8007d4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	6123      	str	r3, [r4, #16]
 8007d54:	2301      	movs	r3, #1
 8007d56:	6163      	str	r3, [r4, #20]
 8007d58:	b003      	add	sp, #12
 8007d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d5c:	ab01      	add	r3, sp, #4
 8007d5e:	466a      	mov	r2, sp
 8007d60:	f7ff ffc8 	bl	8007cf4 <__swhatbuf_r>
 8007d64:	9f00      	ldr	r7, [sp, #0]
 8007d66:	4605      	mov	r5, r0
 8007d68:	4639      	mov	r1, r7
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff fbba 	bl	80074e4 <_malloc_r>
 8007d70:	b948      	cbnz	r0, 8007d86 <__smakebuf_r+0x46>
 8007d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d76:	059a      	lsls	r2, r3, #22
 8007d78:	d4ee      	bmi.n	8007d58 <__smakebuf_r+0x18>
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	f043 0302 	orr.w	r3, r3, #2
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	e7e2      	b.n	8007d4c <__smakebuf_r+0xc>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	6020      	str	r0, [r4, #0]
 8007d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	9b01      	ldr	r3, [sp, #4]
 8007d92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d96:	b15b      	cbz	r3, 8007db0 <__smakebuf_r+0x70>
 8007d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 f81d 	bl	8007ddc <_isatty_r>
 8007da2:	b128      	cbz	r0, 8007db0 <__smakebuf_r+0x70>
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	f023 0303 	bic.w	r3, r3, #3
 8007daa:	f043 0301 	orr.w	r3, r3, #1
 8007dae:	81a3      	strh	r3, [r4, #12]
 8007db0:	89a3      	ldrh	r3, [r4, #12]
 8007db2:	431d      	orrs	r5, r3
 8007db4:	81a5      	strh	r5, [r4, #12]
 8007db6:	e7cf      	b.n	8007d58 <__smakebuf_r+0x18>

08007db8 <_fstat_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d07      	ldr	r5, [pc, #28]	@ (8007dd8 <_fstat_r+0x20>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	f7f9 fb55 	bl	8001474 <_fstat>
 8007dca:	1c43      	adds	r3, r0, #1
 8007dcc:	d102      	bne.n	8007dd4 <_fstat_r+0x1c>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	b103      	cbz	r3, 8007dd4 <_fstat_r+0x1c>
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	bd38      	pop	{r3, r4, r5, pc}
 8007dd6:	bf00      	nop
 8007dd8:	24003378 	.word	0x24003378

08007ddc <_isatty_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d06      	ldr	r5, [pc, #24]	@ (8007df8 <_isatty_r+0x1c>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	602b      	str	r3, [r5, #0]
 8007de8:	f7f9 fb54 	bl	8001494 <_isatty>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_isatty_r+0x1a>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_isatty_r+0x1a>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	24003378 	.word	0x24003378

08007dfc <_sbrk_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4d06      	ldr	r5, [pc, #24]	@ (8007e18 <_sbrk_r+0x1c>)
 8007e00:	2300      	movs	r3, #0
 8007e02:	4604      	mov	r4, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	602b      	str	r3, [r5, #0]
 8007e08:	f7f9 fb5c 	bl	80014c4 <_sbrk>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d102      	bne.n	8007e16 <_sbrk_r+0x1a>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	b103      	cbz	r3, 8007e16 <_sbrk_r+0x1a>
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	24003378 	.word	0x24003378

08007e1c <_init>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	bf00      	nop
 8007e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e22:	bc08      	pop	{r3}
 8007e24:	469e      	mov	lr, r3
 8007e26:	4770      	bx	lr

08007e28 <_fini>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr
